// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.raze.admingol.domain;

import com.raze.admingol.catalog.StatusCedula;
import com.raze.admingol.domain.CedulaPartido;
import com.raze.admingol.domain.Partido;
import javax.persistence.EntityManager;
import javax.persistence.TypedQuery;

privileged aspect CedulaPartido_Roo_Finder {
    
    public static Long CedulaPartido.countFindCedulaPartidoesByPartido(Partido partido) {
        if (partido == null) throw new IllegalArgumentException("The partido argument is required");
        EntityManager em = CedulaPartido.entityManager();
        TypedQuery q = em.createQuery("SELECT COUNT(o) FROM CedulaPartido AS o WHERE o.partido = :partido", Long.class);
        q.setParameter("partido", partido);
        return ((Long) q.getSingleResult());
    }
    
    public static Long CedulaPartido.countFindCedulaPartidoesByPartidoAndStatus(Partido partido, StatusCedula status) {
        if (partido == null) throw new IllegalArgumentException("The partido argument is required");
        if (status == null) throw new IllegalArgumentException("The status argument is required");
        EntityManager em = CedulaPartido.entityManager();
        TypedQuery q = em.createQuery("SELECT COUNT(o) FROM CedulaPartido AS o WHERE o.partido = :partido AND o.status = :status", Long.class);
        q.setParameter("partido", partido);
        q.setParameter("status", status);
        return ((Long) q.getSingleResult());
    }
    
    public static TypedQuery<CedulaPartido> CedulaPartido.findCedulaPartidoesByPartido(Partido partido) {
        if (partido == null) throw new IllegalArgumentException("The partido argument is required");
        EntityManager em = CedulaPartido.entityManager();
        TypedQuery<CedulaPartido> q = em.createQuery("SELECT o FROM CedulaPartido AS o WHERE o.partido = :partido", CedulaPartido.class);
        q.setParameter("partido", partido);
        return q;
    }
    
    public static TypedQuery<CedulaPartido> CedulaPartido.findCedulaPartidoesByPartido(Partido partido, String sortFieldName, String sortOrder) {
        if (partido == null) throw new IllegalArgumentException("The partido argument is required");
        EntityManager em = CedulaPartido.entityManager();
        String jpaQuery = "SELECT o FROM CedulaPartido AS o WHERE o.partido = :partido";
        if (fieldNames4OrderClauseFilter.contains(sortFieldName)) {
            jpaQuery = jpaQuery + " ORDER BY " + sortFieldName;
            if ("ASC".equalsIgnoreCase(sortOrder) || "DESC".equalsIgnoreCase(sortOrder)) {
                jpaQuery = jpaQuery + " " + sortOrder;
            }
        }
        TypedQuery<CedulaPartido> q = em.createQuery(jpaQuery, CedulaPartido.class);
        q.setParameter("partido", partido);
        return q;
    }
    
    public static TypedQuery<CedulaPartido> CedulaPartido.findCedulaPartidoesByPartidoAndStatus(Partido partido, StatusCedula status) {
        if (partido == null) throw new IllegalArgumentException("The partido argument is required");
        if (status == null) throw new IllegalArgumentException("The status argument is required");
        EntityManager em = CedulaPartido.entityManager();
        TypedQuery<CedulaPartido> q = em.createQuery("SELECT o FROM CedulaPartido AS o WHERE o.partido = :partido AND o.status = :status", CedulaPartido.class);
        q.setParameter("partido", partido);
        q.setParameter("status", status);
        return q;
    }
    
    public static TypedQuery<CedulaPartido> CedulaPartido.findCedulaPartidoesByPartidoAndStatus(Partido partido, StatusCedula status, String sortFieldName, String sortOrder) {
        if (partido == null) throw new IllegalArgumentException("The partido argument is required");
        if (status == null) throw new IllegalArgumentException("The status argument is required");
        EntityManager em = CedulaPartido.entityManager();
        String jpaQuery = "SELECT o FROM CedulaPartido AS o WHERE o.partido = :partido AND o.status = :status";
        if (fieldNames4OrderClauseFilter.contains(sortFieldName)) {
            jpaQuery = jpaQuery + " ORDER BY " + sortFieldName;
            if ("ASC".equalsIgnoreCase(sortOrder) || "DESC".equalsIgnoreCase(sortOrder)) {
                jpaQuery = jpaQuery + " " + sortOrder;
            }
        }
        TypedQuery<CedulaPartido> q = em.createQuery(jpaQuery, CedulaPartido.class);
        q.setParameter("partido", partido);
        q.setParameter("status", status);
        return q;
    }
    
}
