// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.raze.admingol.domain;

import com.raze.admingol.catalog.Accion;
import com.raze.admingol.domain.Alineacion;
import com.raze.admingol.domain.Estadisticas;
import javax.persistence.EntityManager;
import javax.persistence.TypedQuery;

privileged aspect Estadisticas_Roo_Finder {
    
    public static Long Estadisticas.countFindEstadisticasesByAccion(Accion accion) {
        if (accion == null) throw new IllegalArgumentException("The accion argument is required");
        EntityManager em = Estadisticas.entityManager();
        TypedQuery q = em.createQuery("SELECT COUNT(o) FROM Estadisticas AS o WHERE o.accion = :accion", Long.class);
        q.setParameter("accion", accion);
        return ((Long) q.getSingleResult());
    }
    
    public static Long Estadisticas.countFindEstadisticasesByAlineacion(Alineacion alineacion) {
        if (alineacion == null) throw new IllegalArgumentException("The alineacion argument is required");
        EntityManager em = Estadisticas.entityManager();
        TypedQuery q = em.createQuery("SELECT COUNT(o) FROM Estadisticas AS o WHERE o.alineacion = :alineacion", Long.class);
        q.setParameter("alineacion", alineacion);
        return ((Long) q.getSingleResult());
    }
    
    public static TypedQuery<Estadisticas> Estadisticas.findEstadisticasesByAccion(Accion accion) {
        if (accion == null) throw new IllegalArgumentException("The accion argument is required");
        EntityManager em = Estadisticas.entityManager();
        TypedQuery<Estadisticas> q = em.createQuery("SELECT o FROM Estadisticas AS o WHERE o.accion = :accion", Estadisticas.class);
        q.setParameter("accion", accion);
        return q;
    }
    
    public static TypedQuery<Estadisticas> Estadisticas.findEstadisticasesByAccion(Accion accion, String sortFieldName, String sortOrder) {
        if (accion == null) throw new IllegalArgumentException("The accion argument is required");
        EntityManager em = Estadisticas.entityManager();
        String jpaQuery = "SELECT o FROM Estadisticas AS o WHERE o.accion = :accion";
        if (fieldNames4OrderClauseFilter.contains(sortFieldName)) {
            jpaQuery = jpaQuery + " ORDER BY " + sortFieldName;
            if ("ASC".equalsIgnoreCase(sortOrder) || "DESC".equalsIgnoreCase(sortOrder)) {
                jpaQuery = jpaQuery + " " + sortOrder;
            }
        }
        TypedQuery<Estadisticas> q = em.createQuery(jpaQuery, Estadisticas.class);
        q.setParameter("accion", accion);
        return q;
    }
    
    public static TypedQuery<Estadisticas> Estadisticas.findEstadisticasesByAlineacion(Alineacion alineacion) {
        if (alineacion == null) throw new IllegalArgumentException("The alineacion argument is required");
        EntityManager em = Estadisticas.entityManager();
        TypedQuery<Estadisticas> q = em.createQuery("SELECT o FROM Estadisticas AS o WHERE o.alineacion = :alineacion", Estadisticas.class);
        q.setParameter("alineacion", alineacion);
        return q;
    }
    
    public static TypedQuery<Estadisticas> Estadisticas.findEstadisticasesByAlineacion(Alineacion alineacion, String sortFieldName, String sortOrder) {
        if (alineacion == null) throw new IllegalArgumentException("The alineacion argument is required");
        EntityManager em = Estadisticas.entityManager();
        String jpaQuery = "SELECT o FROM Estadisticas AS o WHERE o.alineacion = :alineacion";
        if (fieldNames4OrderClauseFilter.contains(sortFieldName)) {
            jpaQuery = jpaQuery + " ORDER BY " + sortFieldName;
            if ("ASC".equalsIgnoreCase(sortOrder) || "DESC".equalsIgnoreCase(sortOrder)) {
                jpaQuery = jpaQuery + " " + sortOrder;
            }
        }
        TypedQuery<Estadisticas> q = em.createQuery(jpaQuery, Estadisticas.class);
        q.setParameter("alineacion", alineacion);
        return q;
    }
    
}
