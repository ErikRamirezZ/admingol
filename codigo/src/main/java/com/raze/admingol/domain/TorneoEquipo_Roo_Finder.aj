// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.raze.admingol.domain;

import com.raze.admingol.domain.Equipo;
import com.raze.admingol.domain.Torneo;
import com.raze.admingol.domain.TorneoEquipo;
import javax.persistence.EntityManager;
import javax.persistence.TypedQuery;

privileged aspect TorneoEquipo_Roo_Finder {
    
    public static Long TorneoEquipo.countFindTorneoEquipoesByEquipo(Equipo equipo) {
        if (equipo == null) throw new IllegalArgumentException("The equipo argument is required");
        EntityManager em = TorneoEquipo.entityManager();
        TypedQuery q = em.createQuery("SELECT COUNT(o) FROM TorneoEquipo AS o WHERE o.equipo = :equipo", Long.class);
        q.setParameter("equipo", equipo);
        return ((Long) q.getSingleResult());
    }
    
    public static Long TorneoEquipo.countFindTorneoEquipoesByTorneo(Torneo torneo) {
        if (torneo == null) throw new IllegalArgumentException("The torneo argument is required");
        EntityManager em = TorneoEquipo.entityManager();
        TypedQuery q = em.createQuery("SELECT COUNT(o) FROM TorneoEquipo AS o WHERE o.torneo = :torneo", Long.class);
        q.setParameter("torneo", torneo);
        return ((Long) q.getSingleResult());
    }
    
    public static TypedQuery<TorneoEquipo> TorneoEquipo.findTorneoEquipoesByEquipo(Equipo equipo) {
        if (equipo == null) throw new IllegalArgumentException("The equipo argument is required");
        EntityManager em = TorneoEquipo.entityManager();
        TypedQuery<TorneoEquipo> q = em.createQuery("SELECT o FROM TorneoEquipo AS o WHERE o.equipo = :equipo", TorneoEquipo.class);
        q.setParameter("equipo", equipo);
        return q;
    }
    
    public static TypedQuery<TorneoEquipo> TorneoEquipo.findTorneoEquipoesByEquipo(Equipo equipo, String sortFieldName, String sortOrder) {
        if (equipo == null) throw new IllegalArgumentException("The equipo argument is required");
        EntityManager em = TorneoEquipo.entityManager();
        String jpaQuery = "SELECT o FROM TorneoEquipo AS o WHERE o.equipo = :equipo";
        if (fieldNames4OrderClauseFilter.contains(sortFieldName)) {
            jpaQuery = jpaQuery + " ORDER BY " + sortFieldName;
            if ("ASC".equalsIgnoreCase(sortOrder) || "DESC".equalsIgnoreCase(sortOrder)) {
                jpaQuery = jpaQuery + " " + sortOrder;
            }
        }
        TypedQuery<TorneoEquipo> q = em.createQuery(jpaQuery, TorneoEquipo.class);
        q.setParameter("equipo", equipo);
        return q;
    }
    
    public static TypedQuery<TorneoEquipo> TorneoEquipo.findTorneoEquipoesByTorneo(Torneo torneo) {
        if (torneo == null) throw new IllegalArgumentException("The torneo argument is required");
        EntityManager em = TorneoEquipo.entityManager();
        TypedQuery<TorneoEquipo> q = em.createQuery("SELECT o FROM TorneoEquipo AS o WHERE o.torneo = :torneo", TorneoEquipo.class);
        q.setParameter("torneo", torneo);
        return q;
    }
    
    public static TypedQuery<TorneoEquipo> TorneoEquipo.findTorneoEquipoesByTorneo(Torneo torneo, String sortFieldName, String sortOrder) {
        if (torneo == null) throw new IllegalArgumentException("The torneo argument is required");
        EntityManager em = TorneoEquipo.entityManager();
        String jpaQuery = "SELECT o FROM TorneoEquipo AS o WHERE o.torneo = :torneo";
        if (fieldNames4OrderClauseFilter.contains(sortFieldName)) {
            jpaQuery = jpaQuery + " ORDER BY " + sortFieldName;
            if ("ASC".equalsIgnoreCase(sortOrder) || "DESC".equalsIgnoreCase(sortOrder)) {
                jpaQuery = jpaQuery + " " + sortOrder;
            }
        }
        TypedQuery<TorneoEquipo> q = em.createQuery(jpaQuery, TorneoEquipo.class);
        q.setParameter("torneo", torneo);
        return q;
    }
    
}
