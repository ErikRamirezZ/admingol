// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.raze.admingol.domain;

import com.raze.admingol.catalog.Descuento;
import com.raze.admingol.catalog.MetodoPago;
import com.raze.admingol.catalog.StatusCargoAbono;
import com.raze.admingol.domain.Abono;
import com.raze.admingol.domain.Cargo;
import java.util.Date;
import javax.persistence.EntityManager;
import javax.persistence.TypedQuery;

privileged aspect Abono_Roo_Finder {
    
    public static Long Abono.countFindAbonoesByCargoAndFechaCreacionBetween(Cargo cargo, Date minFechaCreacion, Date maxFechaCreacion) {
        if (cargo == null) throw new IllegalArgumentException("The cargo argument is required");
        if (minFechaCreacion == null) throw new IllegalArgumentException("The minFechaCreacion argument is required");
        if (maxFechaCreacion == null) throw new IllegalArgumentException("The maxFechaCreacion argument is required");
        EntityManager em = Abono.entityManager();
        TypedQuery q = em.createQuery("SELECT COUNT(o) FROM Abono AS o WHERE o.cargo = :cargo AND o.fechaCreacion BETWEEN :minFechaCreacion AND :maxFechaCreacion", Long.class);
        q.setParameter("cargo", cargo);
        q.setParameter("minFechaCreacion", minFechaCreacion);
        q.setParameter("maxFechaCreacion", maxFechaCreacion);
        return ((Long) q.getSingleResult());
    }
    
    public static Long Abono.countFindAbonoesByDescuentoAndFechaCreacionBetween(Descuento descuento, Date minFechaCreacion, Date maxFechaCreacion) {
        if (descuento == null) throw new IllegalArgumentException("The descuento argument is required");
        if (minFechaCreacion == null) throw new IllegalArgumentException("The minFechaCreacion argument is required");
        if (maxFechaCreacion == null) throw new IllegalArgumentException("The maxFechaCreacion argument is required");
        EntityManager em = Abono.entityManager();
        TypedQuery q = em.createQuery("SELECT COUNT(o) FROM Abono AS o WHERE o.descuento = :descuento AND o.fechaCreacion BETWEEN :minFechaCreacion AND :maxFechaCreacion", Long.class);
        q.setParameter("descuento", descuento);
        q.setParameter("minFechaCreacion", minFechaCreacion);
        q.setParameter("maxFechaCreacion", maxFechaCreacion);
        return ((Long) q.getSingleResult());
    }
    
    public static Long Abono.countFindAbonoesByMetodoPagoAndFechaCreacionBetween(MetodoPago metodoPago, Date minFechaCreacion, Date maxFechaCreacion) {
        if (metodoPago == null) throw new IllegalArgumentException("The metodoPago argument is required");
        if (minFechaCreacion == null) throw new IllegalArgumentException("The minFechaCreacion argument is required");
        if (maxFechaCreacion == null) throw new IllegalArgumentException("The maxFechaCreacion argument is required");
        EntityManager em = Abono.entityManager();
        TypedQuery q = em.createQuery("SELECT COUNT(o) FROM Abono AS o WHERE o.metodoPago = :metodoPago AND o.fechaCreacion BETWEEN :minFechaCreacion AND :maxFechaCreacion", Long.class);
        q.setParameter("metodoPago", metodoPago);
        q.setParameter("minFechaCreacion", minFechaCreacion);
        q.setParameter("maxFechaCreacion", maxFechaCreacion);
        return ((Long) q.getSingleResult());
    }
    
    public static Long Abono.countFindAbonoesByStatusAndFechaCreacionBetween(StatusCargoAbono status, Date minFechaCreacion, Date maxFechaCreacion) {
        if (status == null) throw new IllegalArgumentException("The status argument is required");
        if (minFechaCreacion == null) throw new IllegalArgumentException("The minFechaCreacion argument is required");
        if (maxFechaCreacion == null) throw new IllegalArgumentException("The maxFechaCreacion argument is required");
        EntityManager em = Abono.entityManager();
        TypedQuery q = em.createQuery("SELECT COUNT(o) FROM Abono AS o WHERE o.status = :status AND o.fechaCreacion BETWEEN :minFechaCreacion AND :maxFechaCreacion", Long.class);
        q.setParameter("status", status);
        q.setParameter("minFechaCreacion", minFechaCreacion);
        q.setParameter("maxFechaCreacion", maxFechaCreacion);
        return ((Long) q.getSingleResult());
    }
    
    public static TypedQuery<Abono> Abono.findAbonoesByCargoAndFechaCreacionBetween(Cargo cargo, Date minFechaCreacion, Date maxFechaCreacion) {
        if (cargo == null) throw new IllegalArgumentException("The cargo argument is required");
        if (minFechaCreacion == null) throw new IllegalArgumentException("The minFechaCreacion argument is required");
        if (maxFechaCreacion == null) throw new IllegalArgumentException("The maxFechaCreacion argument is required");
        EntityManager em = Abono.entityManager();
        TypedQuery<Abono> q = em.createQuery("SELECT o FROM Abono AS o WHERE o.cargo = :cargo AND o.fechaCreacion BETWEEN :minFechaCreacion AND :maxFechaCreacion", Abono.class);
        q.setParameter("cargo", cargo);
        q.setParameter("minFechaCreacion", minFechaCreacion);
        q.setParameter("maxFechaCreacion", maxFechaCreacion);
        return q;
    }
    
    public static TypedQuery<Abono> Abono.findAbonoesByCargoAndFechaCreacionBetween(Cargo cargo, Date minFechaCreacion, Date maxFechaCreacion, String sortFieldName, String sortOrder) {
        if (cargo == null) throw new IllegalArgumentException("The cargo argument is required");
        if (minFechaCreacion == null) throw new IllegalArgumentException("The minFechaCreacion argument is required");
        if (maxFechaCreacion == null) throw new IllegalArgumentException("The maxFechaCreacion argument is required");
        EntityManager em = Abono.entityManager();
        String jpaQuery = "SELECT o FROM Abono AS o WHERE o.cargo = :cargo AND o.fechaCreacion BETWEEN :minFechaCreacion AND :maxFechaCreacion";
        if (fieldNames4OrderClauseFilter.contains(sortFieldName)) {
            jpaQuery = jpaQuery + " ORDER BY " + sortFieldName;
            if ("ASC".equalsIgnoreCase(sortOrder) || "DESC".equalsIgnoreCase(sortOrder)) {
                jpaQuery = jpaQuery + " " + sortOrder;
            }
        }
        TypedQuery<Abono> q = em.createQuery(jpaQuery, Abono.class);
        q.setParameter("cargo", cargo);
        q.setParameter("minFechaCreacion", minFechaCreacion);
        q.setParameter("maxFechaCreacion", maxFechaCreacion);
        return q;
    }
    
    public static TypedQuery<Abono> Abono.findAbonoesByDescuentoAndFechaCreacionBetween(Descuento descuento, Date minFechaCreacion, Date maxFechaCreacion) {
        if (descuento == null) throw new IllegalArgumentException("The descuento argument is required");
        if (minFechaCreacion == null) throw new IllegalArgumentException("The minFechaCreacion argument is required");
        if (maxFechaCreacion == null) throw new IllegalArgumentException("The maxFechaCreacion argument is required");
        EntityManager em = Abono.entityManager();
        TypedQuery<Abono> q = em.createQuery("SELECT o FROM Abono AS o WHERE o.descuento = :descuento AND o.fechaCreacion BETWEEN :minFechaCreacion AND :maxFechaCreacion", Abono.class);
        q.setParameter("descuento", descuento);
        q.setParameter("minFechaCreacion", minFechaCreacion);
        q.setParameter("maxFechaCreacion", maxFechaCreacion);
        return q;
    }
    
    public static TypedQuery<Abono> Abono.findAbonoesByDescuentoAndFechaCreacionBetween(Descuento descuento, Date minFechaCreacion, Date maxFechaCreacion, String sortFieldName, String sortOrder) {
        if (descuento == null) throw new IllegalArgumentException("The descuento argument is required");
        if (minFechaCreacion == null) throw new IllegalArgumentException("The minFechaCreacion argument is required");
        if (maxFechaCreacion == null) throw new IllegalArgumentException("The maxFechaCreacion argument is required");
        EntityManager em = Abono.entityManager();
        String jpaQuery = "SELECT o FROM Abono AS o WHERE o.descuento = :descuento AND o.fechaCreacion BETWEEN :minFechaCreacion AND :maxFechaCreacion";
        if (fieldNames4OrderClauseFilter.contains(sortFieldName)) {
            jpaQuery = jpaQuery + " ORDER BY " + sortFieldName;
            if ("ASC".equalsIgnoreCase(sortOrder) || "DESC".equalsIgnoreCase(sortOrder)) {
                jpaQuery = jpaQuery + " " + sortOrder;
            }
        }
        TypedQuery<Abono> q = em.createQuery(jpaQuery, Abono.class);
        q.setParameter("descuento", descuento);
        q.setParameter("minFechaCreacion", minFechaCreacion);
        q.setParameter("maxFechaCreacion", maxFechaCreacion);
        return q;
    }
    
    public static TypedQuery<Abono> Abono.findAbonoesByMetodoPagoAndFechaCreacionBetween(MetodoPago metodoPago, Date minFechaCreacion, Date maxFechaCreacion) {
        if (metodoPago == null) throw new IllegalArgumentException("The metodoPago argument is required");
        if (minFechaCreacion == null) throw new IllegalArgumentException("The minFechaCreacion argument is required");
        if (maxFechaCreacion == null) throw new IllegalArgumentException("The maxFechaCreacion argument is required");
        EntityManager em = Abono.entityManager();
        TypedQuery<Abono> q = em.createQuery("SELECT o FROM Abono AS o WHERE o.metodoPago = :metodoPago AND o.fechaCreacion BETWEEN :minFechaCreacion AND :maxFechaCreacion", Abono.class);
        q.setParameter("metodoPago", metodoPago);
        q.setParameter("minFechaCreacion", minFechaCreacion);
        q.setParameter("maxFechaCreacion", maxFechaCreacion);
        return q;
    }
    
    public static TypedQuery<Abono> Abono.findAbonoesByMetodoPagoAndFechaCreacionBetween(MetodoPago metodoPago, Date minFechaCreacion, Date maxFechaCreacion, String sortFieldName, String sortOrder) {
        if (metodoPago == null) throw new IllegalArgumentException("The metodoPago argument is required");
        if (minFechaCreacion == null) throw new IllegalArgumentException("The minFechaCreacion argument is required");
        if (maxFechaCreacion == null) throw new IllegalArgumentException("The maxFechaCreacion argument is required");
        EntityManager em = Abono.entityManager();
        String jpaQuery = "SELECT o FROM Abono AS o WHERE o.metodoPago = :metodoPago AND o.fechaCreacion BETWEEN :minFechaCreacion AND :maxFechaCreacion";
        if (fieldNames4OrderClauseFilter.contains(sortFieldName)) {
            jpaQuery = jpaQuery + " ORDER BY " + sortFieldName;
            if ("ASC".equalsIgnoreCase(sortOrder) || "DESC".equalsIgnoreCase(sortOrder)) {
                jpaQuery = jpaQuery + " " + sortOrder;
            }
        }
        TypedQuery<Abono> q = em.createQuery(jpaQuery, Abono.class);
        q.setParameter("metodoPago", metodoPago);
        q.setParameter("minFechaCreacion", minFechaCreacion);
        q.setParameter("maxFechaCreacion", maxFechaCreacion);
        return q;
    }
    
    public static TypedQuery<Abono> Abono.findAbonoesByStatusAndFechaCreacionBetween(StatusCargoAbono status, Date minFechaCreacion, Date maxFechaCreacion) {
        if (status == null) throw new IllegalArgumentException("The status argument is required");
        if (minFechaCreacion == null) throw new IllegalArgumentException("The minFechaCreacion argument is required");
        if (maxFechaCreacion == null) throw new IllegalArgumentException("The maxFechaCreacion argument is required");
        EntityManager em = Abono.entityManager();
        TypedQuery<Abono> q = em.createQuery("SELECT o FROM Abono AS o WHERE o.status = :status AND o.fechaCreacion BETWEEN :minFechaCreacion AND :maxFechaCreacion", Abono.class);
        q.setParameter("status", status);
        q.setParameter("minFechaCreacion", minFechaCreacion);
        q.setParameter("maxFechaCreacion", maxFechaCreacion);
        return q;
    }
    
    public static TypedQuery<Abono> Abono.findAbonoesByStatusAndFechaCreacionBetween(StatusCargoAbono status, Date minFechaCreacion, Date maxFechaCreacion, String sortFieldName, String sortOrder) {
        if (status == null) throw new IllegalArgumentException("The status argument is required");
        if (minFechaCreacion == null) throw new IllegalArgumentException("The minFechaCreacion argument is required");
        if (maxFechaCreacion == null) throw new IllegalArgumentException("The maxFechaCreacion argument is required");
        EntityManager em = Abono.entityManager();
        String jpaQuery = "SELECT o FROM Abono AS o WHERE o.status = :status AND o.fechaCreacion BETWEEN :minFechaCreacion AND :maxFechaCreacion";
        if (fieldNames4OrderClauseFilter.contains(sortFieldName)) {
            jpaQuery = jpaQuery + " ORDER BY " + sortFieldName;
            if ("ASC".equalsIgnoreCase(sortOrder) || "DESC".equalsIgnoreCase(sortOrder)) {
                jpaQuery = jpaQuery + " " + sortOrder;
            }
        }
        TypedQuery<Abono> q = em.createQuery(jpaQuery, Abono.class);
        q.setParameter("status", status);
        q.setParameter("minFechaCreacion", minFechaCreacion);
        q.setParameter("maxFechaCreacion", maxFechaCreacion);
        return q;
    }
    
}
