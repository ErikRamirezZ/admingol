// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.raze.admingol.domain;

import com.raze.admingol.domain.Empresa;
import javax.persistence.EntityManager;
import javax.persistence.TypedQuery;

privileged aspect Empresa_Roo_Finder {
    
    public static Long Empresa.countFindEmpresasByActivo(Boolean activo) {
        if (activo == null) throw new IllegalArgumentException("The activo argument is required");
        EntityManager em = Empresa.entityManager();
        TypedQuery q = em.createQuery("SELECT COUNT(o) FROM Empresa AS o WHERE o.activo = :activo", Long.class);
        q.setParameter("activo", activo);
        return ((Long) q.getSingleResult());
    }
    
    public static Long Empresa.countFindEmpresasByNombreComercialLikeAndActivo(String nombreComercial, Boolean activo) {
        if (nombreComercial == null || nombreComercial.length() == 0) throw new IllegalArgumentException("The nombreComercial argument is required");
        nombreComercial = nombreComercial.replace('*', '%');
        if (nombreComercial.charAt(0) != '%') {
            nombreComercial = "%" + nombreComercial;
        }
        if (nombreComercial.charAt(nombreComercial.length() - 1) != '%') {
            nombreComercial = nombreComercial + "%";
        }
        if (activo == null) throw new IllegalArgumentException("The activo argument is required");
        EntityManager em = Empresa.entityManager();
        TypedQuery q = em.createQuery("SELECT COUNT(o) FROM Empresa AS o WHERE LOWER(o.nombreComercial) LIKE LOWER(:nombreComercial)  AND o.activo = :activo", Long.class);
        q.setParameter("nombreComercial", nombreComercial);
        q.setParameter("activo", activo);
        return ((Long) q.getSingleResult());
    }
    
    public static Long Empresa.countFindEmpresasByNombreLikeAndActivo(String nombre, Boolean activo) {
        if (nombre == null || nombre.length() == 0) throw new IllegalArgumentException("The nombre argument is required");
        nombre = nombre.replace('*', '%');
        if (nombre.charAt(0) != '%') {
            nombre = "%" + nombre;
        }
        if (nombre.charAt(nombre.length() - 1) != '%') {
            nombre = nombre + "%";
        }
        if (activo == null) throw new IllegalArgumentException("The activo argument is required");
        EntityManager em = Empresa.entityManager();
        TypedQuery q = em.createQuery("SELECT COUNT(o) FROM Empresa AS o WHERE LOWER(o.nombre) LIKE LOWER(:nombre)  AND o.activo = :activo", Long.class);
        q.setParameter("nombre", nombre);
        q.setParameter("activo", activo);
        return ((Long) q.getSingleResult());
    }
    
    public static TypedQuery<Empresa> Empresa.findEmpresasByActivo(Boolean activo) {
        if (activo == null) throw new IllegalArgumentException("The activo argument is required");
        EntityManager em = Empresa.entityManager();
        TypedQuery<Empresa> q = em.createQuery("SELECT o FROM Empresa AS o WHERE o.activo = :activo", Empresa.class);
        q.setParameter("activo", activo);
        return q;
    }
    
    public static TypedQuery<Empresa> Empresa.findEmpresasByActivo(Boolean activo, String sortFieldName, String sortOrder) {
        if (activo == null) throw new IllegalArgumentException("The activo argument is required");
        EntityManager em = Empresa.entityManager();
        String jpaQuery = "SELECT o FROM Empresa AS o WHERE o.activo = :activo";
        if (fieldNames4OrderClauseFilter.contains(sortFieldName)) {
            jpaQuery = jpaQuery + " ORDER BY " + sortFieldName;
            if ("ASC".equalsIgnoreCase(sortOrder) || "DESC".equalsIgnoreCase(sortOrder)) {
                jpaQuery = jpaQuery + " " + sortOrder;
            }
        }
        TypedQuery<Empresa> q = em.createQuery(jpaQuery, Empresa.class);
        q.setParameter("activo", activo);
        return q;
    }
    
    public static TypedQuery<Empresa> Empresa.findEmpresasByNombreComercialLikeAndActivo(String nombreComercial, Boolean activo) {
        if (nombreComercial == null || nombreComercial.length() == 0) throw new IllegalArgumentException("The nombreComercial argument is required");
        nombreComercial = nombreComercial.replace('*', '%');
        if (nombreComercial.charAt(0) != '%') {
            nombreComercial = "%" + nombreComercial;
        }
        if (nombreComercial.charAt(nombreComercial.length() - 1) != '%') {
            nombreComercial = nombreComercial + "%";
        }
        if (activo == null) throw new IllegalArgumentException("The activo argument is required");
        EntityManager em = Empresa.entityManager();
        TypedQuery<Empresa> q = em.createQuery("SELECT o FROM Empresa AS o WHERE LOWER(o.nombreComercial) LIKE LOWER(:nombreComercial)  AND o.activo = :activo", Empresa.class);
        q.setParameter("nombreComercial", nombreComercial);
        q.setParameter("activo", activo);
        return q;
    }
    
    public static TypedQuery<Empresa> Empresa.findEmpresasByNombreComercialLikeAndActivo(String nombreComercial, Boolean activo, String sortFieldName, String sortOrder) {
        if (nombreComercial == null || nombreComercial.length() == 0) throw new IllegalArgumentException("The nombreComercial argument is required");
        nombreComercial = nombreComercial.replace('*', '%');
        if (nombreComercial.charAt(0) != '%') {
            nombreComercial = "%" + nombreComercial;
        }
        if (nombreComercial.charAt(nombreComercial.length() - 1) != '%') {
            nombreComercial = nombreComercial + "%";
        }
        if (activo == null) throw new IllegalArgumentException("The activo argument is required");
        EntityManager em = Empresa.entityManager();
        String jpaQuery = "SELECT o FROM Empresa AS o WHERE LOWER(o.nombreComercial) LIKE LOWER(:nombreComercial)  AND o.activo = :activo";
        if (fieldNames4OrderClauseFilter.contains(sortFieldName)) {
            jpaQuery = jpaQuery + " ORDER BY " + sortFieldName;
            if ("ASC".equalsIgnoreCase(sortOrder) || "DESC".equalsIgnoreCase(sortOrder)) {
                jpaQuery = jpaQuery + " " + sortOrder;
            }
        }
        TypedQuery<Empresa> q = em.createQuery(jpaQuery, Empresa.class);
        q.setParameter("nombreComercial", nombreComercial);
        q.setParameter("activo", activo);
        return q;
    }
    
    public static TypedQuery<Empresa> Empresa.findEmpresasByNombreLikeAndActivo(String nombre, Boolean activo) {
        if (nombre == null || nombre.length() == 0) throw new IllegalArgumentException("The nombre argument is required");
        nombre = nombre.replace('*', '%');
        if (nombre.charAt(0) != '%') {
            nombre = "%" + nombre;
        }
        if (nombre.charAt(nombre.length() - 1) != '%') {
            nombre = nombre + "%";
        }
        if (activo == null) throw new IllegalArgumentException("The activo argument is required");
        EntityManager em = Empresa.entityManager();
        TypedQuery<Empresa> q = em.createQuery("SELECT o FROM Empresa AS o WHERE LOWER(o.nombre) LIKE LOWER(:nombre)  AND o.activo = :activo", Empresa.class);
        q.setParameter("nombre", nombre);
        q.setParameter("activo", activo);
        return q;
    }
    
    public static TypedQuery<Empresa> Empresa.findEmpresasByNombreLikeAndActivo(String nombre, Boolean activo, String sortFieldName, String sortOrder) {
        if (nombre == null || nombre.length() == 0) throw new IllegalArgumentException("The nombre argument is required");
        nombre = nombre.replace('*', '%');
        if (nombre.charAt(0) != '%') {
            nombre = "%" + nombre;
        }
        if (nombre.charAt(nombre.length() - 1) != '%') {
            nombre = nombre + "%";
        }
        if (activo == null) throw new IllegalArgumentException("The activo argument is required");
        EntityManager em = Empresa.entityManager();
        String jpaQuery = "SELECT o FROM Empresa AS o WHERE LOWER(o.nombre) LIKE LOWER(:nombre)  AND o.activo = :activo";
        if (fieldNames4OrderClauseFilter.contains(sortFieldName)) {
            jpaQuery = jpaQuery + " ORDER BY " + sortFieldName;
            if ("ASC".equalsIgnoreCase(sortOrder) || "DESC".equalsIgnoreCase(sortOrder)) {
                jpaQuery = jpaQuery + " " + sortOrder;
            }
        }
        TypedQuery<Empresa> q = em.createQuery(jpaQuery, Empresa.class);
        q.setParameter("nombre", nombre);
        q.setParameter("activo", activo);
        return q;
    }
    
}
