// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.raze.admingol.domain;

import com.raze.admingol.catalog.TipoCobro;
import com.raze.admingol.domain.ConfiguracionTorneo;
import com.raze.admingol.domain.Torneo;
import javax.persistence.EntityManager;
import javax.persistence.TypedQuery;

privileged aspect ConfiguracionTorneo_Roo_Finder {
    
    public static Long ConfiguracionTorneo.countFindConfiguracionTorneosByInscripcionAndActivo(Boolean inscripcion, Boolean activo) {
        if (inscripcion == null) throw new IllegalArgumentException("The inscripcion argument is required");
        if (activo == null) throw new IllegalArgumentException("The activo argument is required");
        EntityManager em = ConfiguracionTorneo.entityManager();
        TypedQuery q = em.createQuery("SELECT COUNT(o) FROM ConfiguracionTorneo AS o WHERE o.inscripcion = :inscripcion AND o.activo = :activo", Long.class);
        q.setParameter("inscripcion", inscripcion);
        q.setParameter("activo", activo);
        return ((Long) q.getSingleResult());
    }
    
    public static Long ConfiguracionTorneo.countFindConfiguracionTorneosByTipoCobroAndActivo(TipoCobro tipoCobro, Boolean activo) {
        if (tipoCobro == null) throw new IllegalArgumentException("The tipoCobro argument is required");
        if (activo == null) throw new IllegalArgumentException("The activo argument is required");
        EntityManager em = ConfiguracionTorneo.entityManager();
        TypedQuery q = em.createQuery("SELECT COUNT(o) FROM ConfiguracionTorneo AS o WHERE o.tipoCobro = :tipoCobro AND o.activo = :activo", Long.class);
        q.setParameter("tipoCobro", tipoCobro);
        q.setParameter("activo", activo);
        return ((Long) q.getSingleResult());
    }
    
    public static Long ConfiguracionTorneo.countFindConfiguracionTorneosByTorneoAndActivo(Torneo torneo, Boolean activo) {
        if (torneo == null) throw new IllegalArgumentException("The torneo argument is required");
        if (activo == null) throw new IllegalArgumentException("The activo argument is required");
        EntityManager em = ConfiguracionTorneo.entityManager();
        TypedQuery q = em.createQuery("SELECT COUNT(o) FROM ConfiguracionTorneo AS o WHERE o.torneo = :torneo AND o.activo = :activo", Long.class);
        q.setParameter("torneo", torneo);
        q.setParameter("activo", activo);
        return ((Long) q.getSingleResult());
    }
    
    public static TypedQuery<ConfiguracionTorneo> ConfiguracionTorneo.findConfiguracionTorneosByInscripcionAndActivo(Boolean inscripcion, Boolean activo) {
        if (inscripcion == null) throw new IllegalArgumentException("The inscripcion argument is required");
        if (activo == null) throw new IllegalArgumentException("The activo argument is required");
        EntityManager em = ConfiguracionTorneo.entityManager();
        TypedQuery<ConfiguracionTorneo> q = em.createQuery("SELECT o FROM ConfiguracionTorneo AS o WHERE o.inscripcion = :inscripcion AND o.activo = :activo", ConfiguracionTorneo.class);
        q.setParameter("inscripcion", inscripcion);
        q.setParameter("activo", activo);
        return q;
    }
    
    public static TypedQuery<ConfiguracionTorneo> ConfiguracionTorneo.findConfiguracionTorneosByInscripcionAndActivo(Boolean inscripcion, Boolean activo, String sortFieldName, String sortOrder) {
        if (inscripcion == null) throw new IllegalArgumentException("The inscripcion argument is required");
        if (activo == null) throw new IllegalArgumentException("The activo argument is required");
        EntityManager em = ConfiguracionTorneo.entityManager();
        String jpaQuery = "SELECT o FROM ConfiguracionTorneo AS o WHERE o.inscripcion = :inscripcion AND o.activo = :activo";
        if (fieldNames4OrderClauseFilter.contains(sortFieldName)) {
            jpaQuery = jpaQuery + " ORDER BY " + sortFieldName;
            if ("ASC".equalsIgnoreCase(sortOrder) || "DESC".equalsIgnoreCase(sortOrder)) {
                jpaQuery = jpaQuery + " " + sortOrder;
            }
        }
        TypedQuery<ConfiguracionTorneo> q = em.createQuery(jpaQuery, ConfiguracionTorneo.class);
        q.setParameter("inscripcion", inscripcion);
        q.setParameter("activo", activo);
        return q;
    }
    
    public static TypedQuery<ConfiguracionTorneo> ConfiguracionTorneo.findConfiguracionTorneosByTipoCobroAndActivo(TipoCobro tipoCobro, Boolean activo) {
        if (tipoCobro == null) throw new IllegalArgumentException("The tipoCobro argument is required");
        if (activo == null) throw new IllegalArgumentException("The activo argument is required");
        EntityManager em = ConfiguracionTorneo.entityManager();
        TypedQuery<ConfiguracionTorneo> q = em.createQuery("SELECT o FROM ConfiguracionTorneo AS o WHERE o.tipoCobro = :tipoCobro AND o.activo = :activo", ConfiguracionTorneo.class);
        q.setParameter("tipoCobro", tipoCobro);
        q.setParameter("activo", activo);
        return q;
    }
    
    public static TypedQuery<ConfiguracionTorneo> ConfiguracionTorneo.findConfiguracionTorneosByTipoCobroAndActivo(TipoCobro tipoCobro, Boolean activo, String sortFieldName, String sortOrder) {
        if (tipoCobro == null) throw new IllegalArgumentException("The tipoCobro argument is required");
        if (activo == null) throw new IllegalArgumentException("The activo argument is required");
        EntityManager em = ConfiguracionTorneo.entityManager();
        String jpaQuery = "SELECT o FROM ConfiguracionTorneo AS o WHERE o.tipoCobro = :tipoCobro AND o.activo = :activo";
        if (fieldNames4OrderClauseFilter.contains(sortFieldName)) {
            jpaQuery = jpaQuery + " ORDER BY " + sortFieldName;
            if ("ASC".equalsIgnoreCase(sortOrder) || "DESC".equalsIgnoreCase(sortOrder)) {
                jpaQuery = jpaQuery + " " + sortOrder;
            }
        }
        TypedQuery<ConfiguracionTorneo> q = em.createQuery(jpaQuery, ConfiguracionTorneo.class);
        q.setParameter("tipoCobro", tipoCobro);
        q.setParameter("activo", activo);
        return q;
    }
    
    public static TypedQuery<ConfiguracionTorneo> ConfiguracionTorneo.findConfiguracionTorneosByTorneoAndActivo(Torneo torneo, Boolean activo) {
        if (torneo == null) throw new IllegalArgumentException("The torneo argument is required");
        if (activo == null) throw new IllegalArgumentException("The activo argument is required");
        EntityManager em = ConfiguracionTorneo.entityManager();
        TypedQuery<ConfiguracionTorneo> q = em.createQuery("SELECT o FROM ConfiguracionTorneo AS o WHERE o.torneo = :torneo AND o.activo = :activo", ConfiguracionTorneo.class);
        q.setParameter("torneo", torneo);
        q.setParameter("activo", activo);
        return q;
    }
    
    public static TypedQuery<ConfiguracionTorneo> ConfiguracionTorneo.findConfiguracionTorneosByTorneoAndActivo(Torneo torneo, Boolean activo, String sortFieldName, String sortOrder) {
        if (torneo == null) throw new IllegalArgumentException("The torneo argument is required");
        if (activo == null) throw new IllegalArgumentException("The activo argument is required");
        EntityManager em = ConfiguracionTorneo.entityManager();
        String jpaQuery = "SELECT o FROM ConfiguracionTorneo AS o WHERE o.torneo = :torneo AND o.activo = :activo";
        if (fieldNames4OrderClauseFilter.contains(sortFieldName)) {
            jpaQuery = jpaQuery + " ORDER BY " + sortFieldName;
            if ("ASC".equalsIgnoreCase(sortOrder) || "DESC".equalsIgnoreCase(sortOrder)) {
                jpaQuery = jpaQuery + " " + sortOrder;
            }
        }
        TypedQuery<ConfiguracionTorneo> q = em.createQuery(jpaQuery, ConfiguracionTorneo.class);
        q.setParameter("torneo", torneo);
        q.setParameter("activo", activo);
        return q;
    }
    
}
