// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.raze.admingol.domain;

import com.raze.admingol.catalog.Posicion;
import com.raze.admingol.catalog.StatusEquipoJugador;
import com.raze.admingol.domain.Equipo;
import com.raze.admingol.domain.Jugador;
import javax.persistence.EntityManager;
import javax.persistence.TypedQuery;

privileged aspect Jugador_Roo_Finder {
    
    public static Long Jugador.countFindJugadorsByEquipoAndActivo(Equipo equipo, Boolean activo) {
        if (equipo == null) throw new IllegalArgumentException("The equipo argument is required");
        if (activo == null) throw new IllegalArgumentException("The activo argument is required");
        EntityManager em = Jugador.entityManager();
        TypedQuery q = em.createQuery("SELECT COUNT(o) FROM Jugador AS o WHERE o.equipo = :equipo AND o.activo = :activo", Long.class);
        q.setParameter("equipo", equipo);
        q.setParameter("activo", activo);
        return ((Long) q.getSingleResult());
    }
    
    public static Long Jugador.countFindJugadorsByEquipoAndEsDelegadoAndActivo(Equipo equipo, Boolean esDelegado, Boolean activo) {
        if (equipo == null) throw new IllegalArgumentException("The equipo argument is required");
        if (esDelegado == null) throw new IllegalArgumentException("The esDelegado argument is required");
        if (activo == null) throw new IllegalArgumentException("The activo argument is required");
        EntityManager em = Jugador.entityManager();
        TypedQuery q = em.createQuery("SELECT COUNT(o) FROM Jugador AS o WHERE o.equipo = :equipo AND o.esDelegado = :esDelegado AND o.activo = :activo", Long.class);
        q.setParameter("equipo", equipo);
        q.setParameter("esDelegado", esDelegado);
        q.setParameter("activo", activo);
        return ((Long) q.getSingleResult());
    }
    
    public static Long Jugador.countFindJugadorsByEquipoAndNombreLikeAndActivo(Equipo equipo, String nombre, Boolean activo) {
        if (equipo == null) throw new IllegalArgumentException("The equipo argument is required");
        if (nombre == null || nombre.length() == 0) throw new IllegalArgumentException("The nombre argument is required");
        nombre = nombre.replace('*', '%');
        if (nombre.charAt(0) != '%') {
            nombre = "%" + nombre;
        }
        if (nombre.charAt(nombre.length() - 1) != '%') {
            nombre = nombre + "%";
        }
        if (activo == null) throw new IllegalArgumentException("The activo argument is required");
        EntityManager em = Jugador.entityManager();
        TypedQuery q = em.createQuery("SELECT COUNT(o) FROM Jugador AS o WHERE o.equipo = :equipo AND LOWER(o.nombre) LIKE LOWER(:nombre)  AND o.activo = :activo", Long.class);
        q.setParameter("equipo", equipo);
        q.setParameter("nombre", nombre);
        q.setParameter("activo", activo);
        return ((Long) q.getSingleResult());
    }
    
    public static Long Jugador.countFindJugadorsByEquipoAndNombreLikeAndApellidoPaternoLikeAndActivo(Equipo equipo, String nombre, String apellidoPaterno, Boolean activo) {
        if (equipo == null) throw new IllegalArgumentException("The equipo argument is required");
        if (nombre == null || nombre.length() == 0) throw new IllegalArgumentException("The nombre argument is required");
        nombre = nombre.replace('*', '%');
        if (nombre.charAt(0) != '%') {
            nombre = "%" + nombre;
        }
        if (nombre.charAt(nombre.length() - 1) != '%') {
            nombre = nombre + "%";
        }
        if (apellidoPaterno == null || apellidoPaterno.length() == 0) throw new IllegalArgumentException("The apellidoPaterno argument is required");
        apellidoPaterno = apellidoPaterno.replace('*', '%');
        if (apellidoPaterno.charAt(0) != '%') {
            apellidoPaterno = "%" + apellidoPaterno;
        }
        if (apellidoPaterno.charAt(apellidoPaterno.length() - 1) != '%') {
            apellidoPaterno = apellidoPaterno + "%";
        }
        if (activo == null) throw new IllegalArgumentException("The activo argument is required");
        EntityManager em = Jugador.entityManager();
        TypedQuery q = em.createQuery("SELECT COUNT(o) FROM Jugador AS o WHERE o.equipo = :equipo AND LOWER(o.nombre) LIKE LOWER(:nombre)  AND LOWER(o.apellidoPaterno) LIKE LOWER(:apellidoPaterno)  AND o.activo = :activo", Long.class);
        q.setParameter("equipo", equipo);
        q.setParameter("nombre", nombre);
        q.setParameter("apellidoPaterno", apellidoPaterno);
        q.setParameter("activo", activo);
        return ((Long) q.getSingleResult());
    }
    
    public static Long Jugador.countFindJugadorsByEquipoAndPosicionAndActivo(Equipo equipo, Posicion posicion, Boolean activo) {
        if (equipo == null) throw new IllegalArgumentException("The equipo argument is required");
        if (posicion == null) throw new IllegalArgumentException("The posicion argument is required");
        if (activo == null) throw new IllegalArgumentException("The activo argument is required");
        EntityManager em = Jugador.entityManager();
        TypedQuery q = em.createQuery("SELECT COUNT(o) FROM Jugador AS o WHERE o.equipo = :equipo AND o.posicion = :posicion AND o.activo = :activo", Long.class);
        q.setParameter("equipo", equipo);
        q.setParameter("posicion", posicion);
        q.setParameter("activo", activo);
        return ((Long) q.getSingleResult());
    }
    
    public static Long Jugador.countFindJugadorsByEquipoAndStatusAndActivo(Equipo equipo, StatusEquipoJugador status, Boolean activo) {
        if (equipo == null) throw new IllegalArgumentException("The equipo argument is required");
        if (status == null) throw new IllegalArgumentException("The status argument is required");
        if (activo == null) throw new IllegalArgumentException("The activo argument is required");
        EntityManager em = Jugador.entityManager();
        TypedQuery q = em.createQuery("SELECT COUNT(o) FROM Jugador AS o WHERE o.equipo = :equipo AND o.status = :status AND o.activo = :activo", Long.class);
        q.setParameter("equipo", equipo);
        q.setParameter("status", status);
        q.setParameter("activo", activo);
        return ((Long) q.getSingleResult());
    }
    
    public static TypedQuery<Jugador> Jugador.findJugadorsByEquipoAndActivo(Equipo equipo, Boolean activo) {
        if (equipo == null) throw new IllegalArgumentException("The equipo argument is required");
        if (activo == null) throw new IllegalArgumentException("The activo argument is required");
        EntityManager em = Jugador.entityManager();
        TypedQuery<Jugador> q = em.createQuery("SELECT o FROM Jugador AS o WHERE o.equipo = :equipo AND o.activo = :activo", Jugador.class);
        q.setParameter("equipo", equipo);
        q.setParameter("activo", activo);
        return q;
    }
    
    public static TypedQuery<Jugador> Jugador.findJugadorsByEquipoAndActivo(Equipo equipo, Boolean activo, String sortFieldName, String sortOrder) {
        if (equipo == null) throw new IllegalArgumentException("The equipo argument is required");
        if (activo == null) throw new IllegalArgumentException("The activo argument is required");
        EntityManager em = Jugador.entityManager();
        String jpaQuery = "SELECT o FROM Jugador AS o WHERE o.equipo = :equipo AND o.activo = :activo";
        if (fieldNames4OrderClauseFilter.contains(sortFieldName)) {
            jpaQuery = jpaQuery + " ORDER BY " + sortFieldName;
            if ("ASC".equalsIgnoreCase(sortOrder) || "DESC".equalsIgnoreCase(sortOrder)) {
                jpaQuery = jpaQuery + " " + sortOrder;
            }
        }
        TypedQuery<Jugador> q = em.createQuery(jpaQuery, Jugador.class);
        q.setParameter("equipo", equipo);
        q.setParameter("activo", activo);
        return q;
    }
    
    public static TypedQuery<Jugador> Jugador.findJugadorsByEquipoAndEsDelegadoAndActivo(Equipo equipo, Boolean esDelegado, Boolean activo) {
        if (equipo == null) throw new IllegalArgumentException("The equipo argument is required");
        if (esDelegado == null) throw new IllegalArgumentException("The esDelegado argument is required");
        if (activo == null) throw new IllegalArgumentException("The activo argument is required");
        EntityManager em = Jugador.entityManager();
        TypedQuery<Jugador> q = em.createQuery("SELECT o FROM Jugador AS o WHERE o.equipo = :equipo AND o.esDelegado = :esDelegado AND o.activo = :activo", Jugador.class);
        q.setParameter("equipo", equipo);
        q.setParameter("esDelegado", esDelegado);
        q.setParameter("activo", activo);
        return q;
    }
    
    public static TypedQuery<Jugador> Jugador.findJugadorsByEquipoAndEsDelegadoAndActivo(Equipo equipo, Boolean esDelegado, Boolean activo, String sortFieldName, String sortOrder) {
        if (equipo == null) throw new IllegalArgumentException("The equipo argument is required");
        if (esDelegado == null) throw new IllegalArgumentException("The esDelegado argument is required");
        if (activo == null) throw new IllegalArgumentException("The activo argument is required");
        EntityManager em = Jugador.entityManager();
        String jpaQuery = "SELECT o FROM Jugador AS o WHERE o.equipo = :equipo AND o.esDelegado = :esDelegado AND o.activo = :activo";
        if (fieldNames4OrderClauseFilter.contains(sortFieldName)) {
            jpaQuery = jpaQuery + " ORDER BY " + sortFieldName;
            if ("ASC".equalsIgnoreCase(sortOrder) || "DESC".equalsIgnoreCase(sortOrder)) {
                jpaQuery = jpaQuery + " " + sortOrder;
            }
        }
        TypedQuery<Jugador> q = em.createQuery(jpaQuery, Jugador.class);
        q.setParameter("equipo", equipo);
        q.setParameter("esDelegado", esDelegado);
        q.setParameter("activo", activo);
        return q;
    }
    
    public static TypedQuery<Jugador> Jugador.findJugadorsByEquipoAndNombreLikeAndActivo(Equipo equipo, String nombre, Boolean activo) {
        if (equipo == null) throw new IllegalArgumentException("The equipo argument is required");
        if (nombre == null || nombre.length() == 0) throw new IllegalArgumentException("The nombre argument is required");
        nombre = nombre.replace('*', '%');
        if (nombre.charAt(0) != '%') {
            nombre = "%" + nombre;
        }
        if (nombre.charAt(nombre.length() - 1) != '%') {
            nombre = nombre + "%";
        }
        if (activo == null) throw new IllegalArgumentException("The activo argument is required");
        EntityManager em = Jugador.entityManager();
        TypedQuery<Jugador> q = em.createQuery("SELECT o FROM Jugador AS o WHERE o.equipo = :equipo AND LOWER(o.nombre) LIKE LOWER(:nombre)  AND o.activo = :activo", Jugador.class);
        q.setParameter("equipo", equipo);
        q.setParameter("nombre", nombre);
        q.setParameter("activo", activo);
        return q;
    }
    
    public static TypedQuery<Jugador> Jugador.findJugadorsByEquipoAndNombreLikeAndActivo(Equipo equipo, String nombre, Boolean activo, String sortFieldName, String sortOrder) {
        if (equipo == null) throw new IllegalArgumentException("The equipo argument is required");
        if (nombre == null || nombre.length() == 0) throw new IllegalArgumentException("The nombre argument is required");
        nombre = nombre.replace('*', '%');
        if (nombre.charAt(0) != '%') {
            nombre = "%" + nombre;
        }
        if (nombre.charAt(nombre.length() - 1) != '%') {
            nombre = nombre + "%";
        }
        if (activo == null) throw new IllegalArgumentException("The activo argument is required");
        EntityManager em = Jugador.entityManager();
        String jpaQuery = "SELECT o FROM Jugador AS o WHERE o.equipo = :equipo AND LOWER(o.nombre) LIKE LOWER(:nombre)  AND o.activo = :activo";
        if (fieldNames4OrderClauseFilter.contains(sortFieldName)) {
            jpaQuery = jpaQuery + " ORDER BY " + sortFieldName;
            if ("ASC".equalsIgnoreCase(sortOrder) || "DESC".equalsIgnoreCase(sortOrder)) {
                jpaQuery = jpaQuery + " " + sortOrder;
            }
        }
        TypedQuery<Jugador> q = em.createQuery(jpaQuery, Jugador.class);
        q.setParameter("equipo", equipo);
        q.setParameter("nombre", nombre);
        q.setParameter("activo", activo);
        return q;
    }
    
    public static TypedQuery<Jugador> Jugador.findJugadorsByEquipoAndNombreLikeAndApellidoPaternoLikeAndActivo(Equipo equipo, String nombre, String apellidoPaterno, Boolean activo) {
        if (equipo == null) throw new IllegalArgumentException("The equipo argument is required");
        if (nombre == null || nombre.length() == 0) throw new IllegalArgumentException("The nombre argument is required");
        nombre = nombre.replace('*', '%');
        if (nombre.charAt(0) != '%') {
            nombre = "%" + nombre;
        }
        if (nombre.charAt(nombre.length() - 1) != '%') {
            nombre = nombre + "%";
        }
        if (apellidoPaterno == null || apellidoPaterno.length() == 0) throw new IllegalArgumentException("The apellidoPaterno argument is required");
        apellidoPaterno = apellidoPaterno.replace('*', '%');
        if (apellidoPaterno.charAt(0) != '%') {
            apellidoPaterno = "%" + apellidoPaterno;
        }
        if (apellidoPaterno.charAt(apellidoPaterno.length() - 1) != '%') {
            apellidoPaterno = apellidoPaterno + "%";
        }
        if (activo == null) throw new IllegalArgumentException("The activo argument is required");
        EntityManager em = Jugador.entityManager();
        TypedQuery<Jugador> q = em.createQuery("SELECT o FROM Jugador AS o WHERE o.equipo = :equipo AND LOWER(o.nombre) LIKE LOWER(:nombre)  AND LOWER(o.apellidoPaterno) LIKE LOWER(:apellidoPaterno)  AND o.activo = :activo", Jugador.class);
        q.setParameter("equipo", equipo);
        q.setParameter("nombre", nombre);
        q.setParameter("apellidoPaterno", apellidoPaterno);
        q.setParameter("activo", activo);
        return q;
    }
    
    public static TypedQuery<Jugador> Jugador.findJugadorsByEquipoAndNombreLikeAndApellidoPaternoLikeAndActivo(Equipo equipo, String nombre, String apellidoPaterno, Boolean activo, String sortFieldName, String sortOrder) {
        if (equipo == null) throw new IllegalArgumentException("The equipo argument is required");
        if (nombre == null || nombre.length() == 0) throw new IllegalArgumentException("The nombre argument is required");
        nombre = nombre.replace('*', '%');
        if (nombre.charAt(0) != '%') {
            nombre = "%" + nombre;
        }
        if (nombre.charAt(nombre.length() - 1) != '%') {
            nombre = nombre + "%";
        }
        if (apellidoPaterno == null || apellidoPaterno.length() == 0) throw new IllegalArgumentException("The apellidoPaterno argument is required");
        apellidoPaterno = apellidoPaterno.replace('*', '%');
        if (apellidoPaterno.charAt(0) != '%') {
            apellidoPaterno = "%" + apellidoPaterno;
        }
        if (apellidoPaterno.charAt(apellidoPaterno.length() - 1) != '%') {
            apellidoPaterno = apellidoPaterno + "%";
        }
        if (activo == null) throw new IllegalArgumentException("The activo argument is required");
        EntityManager em = Jugador.entityManager();
        String jpaQuery = "SELECT o FROM Jugador AS o WHERE o.equipo = :equipo AND LOWER(o.nombre) LIKE LOWER(:nombre)  AND LOWER(o.apellidoPaterno) LIKE LOWER(:apellidoPaterno)  AND o.activo = :activo";
        if (fieldNames4OrderClauseFilter.contains(sortFieldName)) {
            jpaQuery = jpaQuery + " ORDER BY " + sortFieldName;
            if ("ASC".equalsIgnoreCase(sortOrder) || "DESC".equalsIgnoreCase(sortOrder)) {
                jpaQuery = jpaQuery + " " + sortOrder;
            }
        }
        TypedQuery<Jugador> q = em.createQuery(jpaQuery, Jugador.class);
        q.setParameter("equipo", equipo);
        q.setParameter("nombre", nombre);
        q.setParameter("apellidoPaterno", apellidoPaterno);
        q.setParameter("activo", activo);
        return q;
    }
    
    public static TypedQuery<Jugador> Jugador.findJugadorsByEquipoAndPosicionAndActivo(Equipo equipo, Posicion posicion, Boolean activo) {
        if (equipo == null) throw new IllegalArgumentException("The equipo argument is required");
        if (posicion == null) throw new IllegalArgumentException("The posicion argument is required");
        if (activo == null) throw new IllegalArgumentException("The activo argument is required");
        EntityManager em = Jugador.entityManager();
        TypedQuery<Jugador> q = em.createQuery("SELECT o FROM Jugador AS o WHERE o.equipo = :equipo AND o.posicion = :posicion AND o.activo = :activo", Jugador.class);
        q.setParameter("equipo", equipo);
        q.setParameter("posicion", posicion);
        q.setParameter("activo", activo);
        return q;
    }
    
    public static TypedQuery<Jugador> Jugador.findJugadorsByEquipoAndPosicionAndActivo(Equipo equipo, Posicion posicion, Boolean activo, String sortFieldName, String sortOrder) {
        if (equipo == null) throw new IllegalArgumentException("The equipo argument is required");
        if (posicion == null) throw new IllegalArgumentException("The posicion argument is required");
        if (activo == null) throw new IllegalArgumentException("The activo argument is required");
        EntityManager em = Jugador.entityManager();
        String jpaQuery = "SELECT o FROM Jugador AS o WHERE o.equipo = :equipo AND o.posicion = :posicion AND o.activo = :activo";
        if (fieldNames4OrderClauseFilter.contains(sortFieldName)) {
            jpaQuery = jpaQuery + " ORDER BY " + sortFieldName;
            if ("ASC".equalsIgnoreCase(sortOrder) || "DESC".equalsIgnoreCase(sortOrder)) {
                jpaQuery = jpaQuery + " " + sortOrder;
            }
        }
        TypedQuery<Jugador> q = em.createQuery(jpaQuery, Jugador.class);
        q.setParameter("equipo", equipo);
        q.setParameter("posicion", posicion);
        q.setParameter("activo", activo);
        return q;
    }
    
    public static TypedQuery<Jugador> Jugador.findJugadorsByEquipoAndStatusAndActivo(Equipo equipo, StatusEquipoJugador status, Boolean activo) {
        if (equipo == null) throw new IllegalArgumentException("The equipo argument is required");
        if (status == null) throw new IllegalArgumentException("The status argument is required");
        if (activo == null) throw new IllegalArgumentException("The activo argument is required");
        EntityManager em = Jugador.entityManager();
        TypedQuery<Jugador> q = em.createQuery("SELECT o FROM Jugador AS o WHERE o.equipo = :equipo AND o.status = :status AND o.activo = :activo", Jugador.class);
        q.setParameter("equipo", equipo);
        q.setParameter("status", status);
        q.setParameter("activo", activo);
        return q;
    }
    
    public static TypedQuery<Jugador> Jugador.findJugadorsByEquipoAndStatusAndActivo(Equipo equipo, StatusEquipoJugador status, Boolean activo, String sortFieldName, String sortOrder) {
        if (equipo == null) throw new IllegalArgumentException("The equipo argument is required");
        if (status == null) throw new IllegalArgumentException("The status argument is required");
        if (activo == null) throw new IllegalArgumentException("The activo argument is required");
        EntityManager em = Jugador.entityManager();
        String jpaQuery = "SELECT o FROM Jugador AS o WHERE o.equipo = :equipo AND o.status = :status AND o.activo = :activo";
        if (fieldNames4OrderClauseFilter.contains(sortFieldName)) {
            jpaQuery = jpaQuery + " ORDER BY " + sortFieldName;
            if ("ASC".equalsIgnoreCase(sortOrder) || "DESC".equalsIgnoreCase(sortOrder)) {
                jpaQuery = jpaQuery + " " + sortOrder;
            }
        }
        TypedQuery<Jugador> q = em.createQuery(jpaQuery, Jugador.class);
        q.setParameter("equipo", equipo);
        q.setParameter("status", status);
        q.setParameter("activo", activo);
        return q;
    }
    
}
