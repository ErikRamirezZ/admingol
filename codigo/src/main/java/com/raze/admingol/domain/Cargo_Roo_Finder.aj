// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.raze.admingol.domain;

import com.raze.admingol.catalog.ConceptoCobro;
import com.raze.admingol.catalog.StatusCargoAbono;
import com.raze.admingol.domain.Cargo;
import com.raze.admingol.domain.Equipo;
import com.raze.admingol.domain.Torneo;
import java.util.Date;
import javax.persistence.EntityManager;
import javax.persistence.TypedQuery;

privileged aspect Cargo_Roo_Finder {
    
    public static Long Cargo.countFindCargoesByConceptoCobroAndFechaCreacionBetween(ConceptoCobro conceptoCobro, Date minFechaCreacion, Date maxFechaCreacion) {
        if (conceptoCobro == null) throw new IllegalArgumentException("The conceptoCobro argument is required");
        if (minFechaCreacion == null) throw new IllegalArgumentException("The minFechaCreacion argument is required");
        if (maxFechaCreacion == null) throw new IllegalArgumentException("The maxFechaCreacion argument is required");
        EntityManager em = Cargo.entityManager();
        TypedQuery q = em.createQuery("SELECT COUNT(o) FROM Cargo AS o WHERE o.conceptoCobro = :conceptoCobro AND o.fechaCreacion BETWEEN :minFechaCreacion AND :maxFechaCreacion", Long.class);
        q.setParameter("conceptoCobro", conceptoCobro);
        q.setParameter("minFechaCreacion", minFechaCreacion);
        q.setParameter("maxFechaCreacion", maxFechaCreacion);
        return ((Long) q.getSingleResult());
    }
    
    public static Long Cargo.countFindCargoesByConceptoCobroAndStatus(ConceptoCobro conceptoCobro, StatusCargoAbono status) {
        if (conceptoCobro == null) throw new IllegalArgumentException("The conceptoCobro argument is required");
        if (status == null) throw new IllegalArgumentException("The status argument is required");
        EntityManager em = Cargo.entityManager();
        TypedQuery q = em.createQuery("SELECT COUNT(o) FROM Cargo AS o WHERE o.conceptoCobro = :conceptoCobro AND o.status = :status", Long.class);
        q.setParameter("conceptoCobro", conceptoCobro);
        q.setParameter("status", status);
        return ((Long) q.getSingleResult());
    }
    
    public static Long Cargo.countFindCargoesByConceptoCobroAndTorneo(ConceptoCobro conceptoCobro, Torneo torneo) {
        if (conceptoCobro == null) throw new IllegalArgumentException("The conceptoCobro argument is required");
        if (torneo == null) throw new IllegalArgumentException("The torneo argument is required");
        EntityManager em = Cargo.entityManager();
        TypedQuery q = em.createQuery("SELECT COUNT(o) FROM Cargo AS o WHERE o.conceptoCobro = :conceptoCobro AND o.torneo = :torneo", Long.class);
        q.setParameter("conceptoCobro", conceptoCobro);
        q.setParameter("torneo", torneo);
        return ((Long) q.getSingleResult());
    }
    
    public static Long Cargo.countFindCargoesByConceptoCobroAndTorneoAndEquipo(ConceptoCobro conceptoCobro, Torneo torneo, Equipo equipo) {
        if (conceptoCobro == null) throw new IllegalArgumentException("The conceptoCobro argument is required");
        if (torneo == null) throw new IllegalArgumentException("The torneo argument is required");
        if (equipo == null) throw new IllegalArgumentException("The equipo argument is required");
        EntityManager em = Cargo.entityManager();
        TypedQuery q = em.createQuery("SELECT COUNT(o) FROM Cargo AS o WHERE o.conceptoCobro = :conceptoCobro AND o.torneo = :torneo AND o.equipo = :equipo", Long.class);
        q.setParameter("conceptoCobro", conceptoCobro);
        q.setParameter("torneo", torneo);
        q.setParameter("equipo", equipo);
        return ((Long) q.getSingleResult());
    }
    
    public static Long Cargo.countFindCargoesByConceptoCobroAndTorneoAndEquipoAndFechaModificacionBetween(ConceptoCobro conceptoCobro, Torneo torneo, Equipo equipo, Date minFechaModificacion, Date maxFechaModificacion) {
        if (conceptoCobro == null) throw new IllegalArgumentException("The conceptoCobro argument is required");
        if (torneo == null) throw new IllegalArgumentException("The torneo argument is required");
        if (equipo == null) throw new IllegalArgumentException("The equipo argument is required");
        if (minFechaModificacion == null) throw new IllegalArgumentException("The minFechaModificacion argument is required");
        if (maxFechaModificacion == null) throw new IllegalArgumentException("The maxFechaModificacion argument is required");
        EntityManager em = Cargo.entityManager();
        TypedQuery q = em.createQuery("SELECT COUNT(o) FROM Cargo AS o WHERE o.conceptoCobro = :conceptoCobro AND o.torneo = :torneo AND o.equipo = :equipo AND o.fechaModificacion BETWEEN :minFechaModificacion AND :maxFechaModificacion", Long.class);
        q.setParameter("conceptoCobro", conceptoCobro);
        q.setParameter("torneo", torneo);
        q.setParameter("equipo", equipo);
        q.setParameter("minFechaModificacion", minFechaModificacion);
        q.setParameter("maxFechaModificacion", maxFechaModificacion);
        return ((Long) q.getSingleResult());
    }
    
    public static Long Cargo.countFindCargoesByConceptoCobroAndTorneoAndFechaModificacionBetween(ConceptoCobro conceptoCobro, Torneo torneo, Date minFechaModificacion, Date maxFechaModificacion) {
        if (conceptoCobro == null) throw new IllegalArgumentException("The conceptoCobro argument is required");
        if (torneo == null) throw new IllegalArgumentException("The torneo argument is required");
        if (minFechaModificacion == null) throw new IllegalArgumentException("The minFechaModificacion argument is required");
        if (maxFechaModificacion == null) throw new IllegalArgumentException("The maxFechaModificacion argument is required");
        EntityManager em = Cargo.entityManager();
        TypedQuery q = em.createQuery("SELECT COUNT(o) FROM Cargo AS o WHERE o.conceptoCobro = :conceptoCobro AND o.torneo = :torneo AND o.fechaModificacion BETWEEN :minFechaModificacion AND :maxFechaModificacion", Long.class);
        q.setParameter("conceptoCobro", conceptoCobro);
        q.setParameter("torneo", torneo);
        q.setParameter("minFechaModificacion", minFechaModificacion);
        q.setParameter("maxFechaModificacion", maxFechaModificacion);
        return ((Long) q.getSingleResult());
    }
    
    public static TypedQuery<Cargo> Cargo.findCargoesByConceptoCobroAndFechaCreacionBetween(ConceptoCobro conceptoCobro, Date minFechaCreacion, Date maxFechaCreacion) {
        if (conceptoCobro == null) throw new IllegalArgumentException("The conceptoCobro argument is required");
        if (minFechaCreacion == null) throw new IllegalArgumentException("The minFechaCreacion argument is required");
        if (maxFechaCreacion == null) throw new IllegalArgumentException("The maxFechaCreacion argument is required");
        EntityManager em = Cargo.entityManager();
        TypedQuery<Cargo> q = em.createQuery("SELECT o FROM Cargo AS o WHERE o.conceptoCobro = :conceptoCobro AND o.fechaCreacion BETWEEN :minFechaCreacion AND :maxFechaCreacion", Cargo.class);
        q.setParameter("conceptoCobro", conceptoCobro);
        q.setParameter("minFechaCreacion", minFechaCreacion);
        q.setParameter("maxFechaCreacion", maxFechaCreacion);
        return q;
    }
    
    public static TypedQuery<Cargo> Cargo.findCargoesByConceptoCobroAndFechaCreacionBetween(ConceptoCobro conceptoCobro, Date minFechaCreacion, Date maxFechaCreacion, String sortFieldName, String sortOrder) {
        if (conceptoCobro == null) throw new IllegalArgumentException("The conceptoCobro argument is required");
        if (minFechaCreacion == null) throw new IllegalArgumentException("The minFechaCreacion argument is required");
        if (maxFechaCreacion == null) throw new IllegalArgumentException("The maxFechaCreacion argument is required");
        EntityManager em = Cargo.entityManager();
        String jpaQuery = "SELECT o FROM Cargo AS o WHERE o.conceptoCobro = :conceptoCobro AND o.fechaCreacion BETWEEN :minFechaCreacion AND :maxFechaCreacion";
        if (fieldNames4OrderClauseFilter.contains(sortFieldName)) {
            jpaQuery = jpaQuery + " ORDER BY " + sortFieldName;
            if ("ASC".equalsIgnoreCase(sortOrder) || "DESC".equalsIgnoreCase(sortOrder)) {
                jpaQuery = jpaQuery + " " + sortOrder;
            }
        }
        TypedQuery<Cargo> q = em.createQuery(jpaQuery, Cargo.class);
        q.setParameter("conceptoCobro", conceptoCobro);
        q.setParameter("minFechaCreacion", minFechaCreacion);
        q.setParameter("maxFechaCreacion", maxFechaCreacion);
        return q;
    }
    
    public static TypedQuery<Cargo> Cargo.findCargoesByConceptoCobroAndStatus(ConceptoCobro conceptoCobro, StatusCargoAbono status) {
        if (conceptoCobro == null) throw new IllegalArgumentException("The conceptoCobro argument is required");
        if (status == null) throw new IllegalArgumentException("The status argument is required");
        EntityManager em = Cargo.entityManager();
        TypedQuery<Cargo> q = em.createQuery("SELECT o FROM Cargo AS o WHERE o.conceptoCobro = :conceptoCobro AND o.status = :status", Cargo.class);
        q.setParameter("conceptoCobro", conceptoCobro);
        q.setParameter("status", status);
        return q;
    }
    
    public static TypedQuery<Cargo> Cargo.findCargoesByConceptoCobroAndStatus(ConceptoCobro conceptoCobro, StatusCargoAbono status, String sortFieldName, String sortOrder) {
        if (conceptoCobro == null) throw new IllegalArgumentException("The conceptoCobro argument is required");
        if (status == null) throw new IllegalArgumentException("The status argument is required");
        EntityManager em = Cargo.entityManager();
        String jpaQuery = "SELECT o FROM Cargo AS o WHERE o.conceptoCobro = :conceptoCobro AND o.status = :status";
        if (fieldNames4OrderClauseFilter.contains(sortFieldName)) {
            jpaQuery = jpaQuery + " ORDER BY " + sortFieldName;
            if ("ASC".equalsIgnoreCase(sortOrder) || "DESC".equalsIgnoreCase(sortOrder)) {
                jpaQuery = jpaQuery + " " + sortOrder;
            }
        }
        TypedQuery<Cargo> q = em.createQuery(jpaQuery, Cargo.class);
        q.setParameter("conceptoCobro", conceptoCobro);
        q.setParameter("status", status);
        return q;
    }
    
    public static TypedQuery<Cargo> Cargo.findCargoesByConceptoCobroAndTorneo(ConceptoCobro conceptoCobro, Torneo torneo) {
        if (conceptoCobro == null) throw new IllegalArgumentException("The conceptoCobro argument is required");
        if (torneo == null) throw new IllegalArgumentException("The torneo argument is required");
        EntityManager em = Cargo.entityManager();
        TypedQuery<Cargo> q = em.createQuery("SELECT o FROM Cargo AS o WHERE o.conceptoCobro = :conceptoCobro AND o.torneo = :torneo", Cargo.class);
        q.setParameter("conceptoCobro", conceptoCobro);
        q.setParameter("torneo", torneo);
        return q;
    }
    
    public static TypedQuery<Cargo> Cargo.findCargoesByConceptoCobroAndTorneo(ConceptoCobro conceptoCobro, Torneo torneo, String sortFieldName, String sortOrder) {
        if (conceptoCobro == null) throw new IllegalArgumentException("The conceptoCobro argument is required");
        if (torneo == null) throw new IllegalArgumentException("The torneo argument is required");
        EntityManager em = Cargo.entityManager();
        String jpaQuery = "SELECT o FROM Cargo AS o WHERE o.conceptoCobro = :conceptoCobro AND o.torneo = :torneo";
        if (fieldNames4OrderClauseFilter.contains(sortFieldName)) {
            jpaQuery = jpaQuery + " ORDER BY " + sortFieldName;
            if ("ASC".equalsIgnoreCase(sortOrder) || "DESC".equalsIgnoreCase(sortOrder)) {
                jpaQuery = jpaQuery + " " + sortOrder;
            }
        }
        TypedQuery<Cargo> q = em.createQuery(jpaQuery, Cargo.class);
        q.setParameter("conceptoCobro", conceptoCobro);
        q.setParameter("torneo", torneo);
        return q;
    }
    
    public static TypedQuery<Cargo> Cargo.findCargoesByConceptoCobroAndTorneoAndEquipo(ConceptoCobro conceptoCobro, Torneo torneo, Equipo equipo) {
        if (conceptoCobro == null) throw new IllegalArgumentException("The conceptoCobro argument is required");
        if (torneo == null) throw new IllegalArgumentException("The torneo argument is required");
        if (equipo == null) throw new IllegalArgumentException("The equipo argument is required");
        EntityManager em = Cargo.entityManager();
        TypedQuery<Cargo> q = em.createQuery("SELECT o FROM Cargo AS o WHERE o.conceptoCobro = :conceptoCobro AND o.torneo = :torneo AND o.equipo = :equipo", Cargo.class);
        q.setParameter("conceptoCobro", conceptoCobro);
        q.setParameter("torneo", torneo);
        q.setParameter("equipo", equipo);
        return q;
    }
    
    public static TypedQuery<Cargo> Cargo.findCargoesByConceptoCobroAndTorneoAndEquipo(ConceptoCobro conceptoCobro, Torneo torneo, Equipo equipo, String sortFieldName, String sortOrder) {
        if (conceptoCobro == null) throw new IllegalArgumentException("The conceptoCobro argument is required");
        if (torneo == null) throw new IllegalArgumentException("The torneo argument is required");
        if (equipo == null) throw new IllegalArgumentException("The equipo argument is required");
        EntityManager em = Cargo.entityManager();
        String jpaQuery = "SELECT o FROM Cargo AS o WHERE o.conceptoCobro = :conceptoCobro AND o.torneo = :torneo AND o.equipo = :equipo";
        if (fieldNames4OrderClauseFilter.contains(sortFieldName)) {
            jpaQuery = jpaQuery + " ORDER BY " + sortFieldName;
            if ("ASC".equalsIgnoreCase(sortOrder) || "DESC".equalsIgnoreCase(sortOrder)) {
                jpaQuery = jpaQuery + " " + sortOrder;
            }
        }
        TypedQuery<Cargo> q = em.createQuery(jpaQuery, Cargo.class);
        q.setParameter("conceptoCobro", conceptoCobro);
        q.setParameter("torneo", torneo);
        q.setParameter("equipo", equipo);
        return q;
    }
    
    public static TypedQuery<Cargo> Cargo.findCargoesByConceptoCobroAndTorneoAndEquipoAndFechaModificacionBetween(ConceptoCobro conceptoCobro, Torneo torneo, Equipo equipo, Date minFechaModificacion, Date maxFechaModificacion) {
        if (conceptoCobro == null) throw new IllegalArgumentException("The conceptoCobro argument is required");
        if (torneo == null) throw new IllegalArgumentException("The torneo argument is required");
        if (equipo == null) throw new IllegalArgumentException("The equipo argument is required");
        if (minFechaModificacion == null) throw new IllegalArgumentException("The minFechaModificacion argument is required");
        if (maxFechaModificacion == null) throw new IllegalArgumentException("The maxFechaModificacion argument is required");
        EntityManager em = Cargo.entityManager();
        TypedQuery<Cargo> q = em.createQuery("SELECT o FROM Cargo AS o WHERE o.conceptoCobro = :conceptoCobro AND o.torneo = :torneo AND o.equipo = :equipo AND o.fechaModificacion BETWEEN :minFechaModificacion AND :maxFechaModificacion", Cargo.class);
        q.setParameter("conceptoCobro", conceptoCobro);
        q.setParameter("torneo", torneo);
        q.setParameter("equipo", equipo);
        q.setParameter("minFechaModificacion", minFechaModificacion);
        q.setParameter("maxFechaModificacion", maxFechaModificacion);
        return q;
    }
    
    public static TypedQuery<Cargo> Cargo.findCargoesByConceptoCobroAndTorneoAndEquipoAndFechaModificacionBetween(ConceptoCobro conceptoCobro, Torneo torneo, Equipo equipo, Date minFechaModificacion, Date maxFechaModificacion, String sortFieldName, String sortOrder) {
        if (conceptoCobro == null) throw new IllegalArgumentException("The conceptoCobro argument is required");
        if (torneo == null) throw new IllegalArgumentException("The torneo argument is required");
        if (equipo == null) throw new IllegalArgumentException("The equipo argument is required");
        if (minFechaModificacion == null) throw new IllegalArgumentException("The minFechaModificacion argument is required");
        if (maxFechaModificacion == null) throw new IllegalArgumentException("The maxFechaModificacion argument is required");
        EntityManager em = Cargo.entityManager();
        String jpaQuery = "SELECT o FROM Cargo AS o WHERE o.conceptoCobro = :conceptoCobro AND o.torneo = :torneo AND o.equipo = :equipo AND o.fechaModificacion BETWEEN :minFechaModificacion AND :maxFechaModificacion";
        if (fieldNames4OrderClauseFilter.contains(sortFieldName)) {
            jpaQuery = jpaQuery + " ORDER BY " + sortFieldName;
            if ("ASC".equalsIgnoreCase(sortOrder) || "DESC".equalsIgnoreCase(sortOrder)) {
                jpaQuery = jpaQuery + " " + sortOrder;
            }
        }
        TypedQuery<Cargo> q = em.createQuery(jpaQuery, Cargo.class);
        q.setParameter("conceptoCobro", conceptoCobro);
        q.setParameter("torneo", torneo);
        q.setParameter("equipo", equipo);
        q.setParameter("minFechaModificacion", minFechaModificacion);
        q.setParameter("maxFechaModificacion", maxFechaModificacion);
        return q;
    }
    
    public static TypedQuery<Cargo> Cargo.findCargoesByConceptoCobroAndTorneoAndFechaModificacionBetween(ConceptoCobro conceptoCobro, Torneo torneo, Date minFechaModificacion, Date maxFechaModificacion) {
        if (conceptoCobro == null) throw new IllegalArgumentException("The conceptoCobro argument is required");
        if (torneo == null) throw new IllegalArgumentException("The torneo argument is required");
        if (minFechaModificacion == null) throw new IllegalArgumentException("The minFechaModificacion argument is required");
        if (maxFechaModificacion == null) throw new IllegalArgumentException("The maxFechaModificacion argument is required");
        EntityManager em = Cargo.entityManager();
        TypedQuery<Cargo> q = em.createQuery("SELECT o FROM Cargo AS o WHERE o.conceptoCobro = :conceptoCobro AND o.torneo = :torneo AND o.fechaModificacion BETWEEN :minFechaModificacion AND :maxFechaModificacion", Cargo.class);
        q.setParameter("conceptoCobro", conceptoCobro);
        q.setParameter("torneo", torneo);
        q.setParameter("minFechaModificacion", minFechaModificacion);
        q.setParameter("maxFechaModificacion", maxFechaModificacion);
        return q;
    }
    
    public static TypedQuery<Cargo> Cargo.findCargoesByConceptoCobroAndTorneoAndFechaModificacionBetween(ConceptoCobro conceptoCobro, Torneo torneo, Date minFechaModificacion, Date maxFechaModificacion, String sortFieldName, String sortOrder) {
        if (conceptoCobro == null) throw new IllegalArgumentException("The conceptoCobro argument is required");
        if (torneo == null) throw new IllegalArgumentException("The torneo argument is required");
        if (minFechaModificacion == null) throw new IllegalArgumentException("The minFechaModificacion argument is required");
        if (maxFechaModificacion == null) throw new IllegalArgumentException("The maxFechaModificacion argument is required");
        EntityManager em = Cargo.entityManager();
        String jpaQuery = "SELECT o FROM Cargo AS o WHERE o.conceptoCobro = :conceptoCobro AND o.torneo = :torneo AND o.fechaModificacion BETWEEN :minFechaModificacion AND :maxFechaModificacion";
        if (fieldNames4OrderClauseFilter.contains(sortFieldName)) {
            jpaQuery = jpaQuery + " ORDER BY " + sortFieldName;
            if ("ASC".equalsIgnoreCase(sortOrder) || "DESC".equalsIgnoreCase(sortOrder)) {
                jpaQuery = jpaQuery + " " + sortOrder;
            }
        }
        TypedQuery<Cargo> q = em.createQuery(jpaQuery, Cargo.class);
        q.setParameter("conceptoCobro", conceptoCobro);
        q.setParameter("torneo", torneo);
        q.setParameter("minFechaModificacion", minFechaModificacion);
        q.setParameter("maxFechaModificacion", maxFechaModificacion);
        return q;
    }
    
}
