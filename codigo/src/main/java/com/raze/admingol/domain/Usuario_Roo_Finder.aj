// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.raze.admingol.domain;

import com.raze.admingol.catalog.Rol;
import com.raze.admingol.domain.Empresa;
import com.raze.admingol.domain.Usuario;
import javax.persistence.EntityManager;
import javax.persistence.TypedQuery;

privileged aspect Usuario_Roo_Finder {
    
    public static Long Usuario.countFindUsuariosByApellidoPaternoLike(String apellidoPaterno) {
        if (apellidoPaterno == null || apellidoPaterno.length() == 0) throw new IllegalArgumentException("The apellidoPaterno argument is required");
        apellidoPaterno = apellidoPaterno.replace('*', '%');
        if (apellidoPaterno.charAt(0) != '%') {
            apellidoPaterno = "%" + apellidoPaterno;
        }
        if (apellidoPaterno.charAt(apellidoPaterno.length() - 1) != '%') {
            apellidoPaterno = apellidoPaterno + "%";
        }
        EntityManager em = Usuario.entityManager();
        TypedQuery q = em.createQuery("SELECT COUNT(o) FROM Usuario AS o WHERE LOWER(o.apellidoPaterno) LIKE LOWER(:apellidoPaterno)", Long.class);
        q.setParameter("apellidoPaterno", apellidoPaterno);
        return ((Long) q.getSingleResult());
    }
    
    public static Long Usuario.countFindUsuariosByEmpresaAndActivo(Empresa empresa, Boolean activo) {
        if (empresa == null) throw new IllegalArgumentException("The empresa argument is required");
        if (activo == null) throw new IllegalArgumentException("The activo argument is required");
        EntityManager em = Usuario.entityManager();
        TypedQuery q = em.createQuery("SELECT COUNT(o) FROM Usuario AS o WHERE o.empresa = :empresa AND o.activo = :activo", Long.class);
        q.setParameter("empresa", empresa);
        q.setParameter("activo", activo);
        return ((Long) q.getSingleResult());
    }
    
    public static Long Usuario.countFindUsuariosByEmpresaAndNombreLikeAndActivo(Empresa empresa, String nombre, Boolean activo) {
        if (empresa == null) throw new IllegalArgumentException("The empresa argument is required");
        if (nombre == null || nombre.length() == 0) throw new IllegalArgumentException("The nombre argument is required");
        nombre = nombre.replace('*', '%');
        if (nombre.charAt(0) != '%') {
            nombre = "%" + nombre;
        }
        if (nombre.charAt(nombre.length() - 1) != '%') {
            nombre = nombre + "%";
        }
        if (activo == null) throw new IllegalArgumentException("The activo argument is required");
        EntityManager em = Usuario.entityManager();
        TypedQuery q = em.createQuery("SELECT COUNT(o) FROM Usuario AS o WHERE o.empresa = :empresa AND LOWER(o.nombre) LIKE LOWER(:nombre)  AND o.activo = :activo", Long.class);
        q.setParameter("empresa", empresa);
        q.setParameter("nombre", nombre);
        q.setParameter("activo", activo);
        return ((Long) q.getSingleResult());
    }
    
    public static Long Usuario.countFindUsuariosByRolAndActivo(Rol rol, Boolean activo) {
        if (rol == null) throw new IllegalArgumentException("The rol argument is required");
        if (activo == null) throw new IllegalArgumentException("The activo argument is required");
        EntityManager em = Usuario.entityManager();
        TypedQuery q = em.createQuery("SELECT COUNT(o) FROM Usuario AS o WHERE o.rol = :rol AND o.activo = :activo", Long.class);
        q.setParameter("rol", rol);
        q.setParameter("activo", activo);
        return ((Long) q.getSingleResult());
    }
    
    public static TypedQuery<Usuario> Usuario.findUsuariosByApellidoPaternoLike(String apellidoPaterno) {
        if (apellidoPaterno == null || apellidoPaterno.length() == 0) throw new IllegalArgumentException("The apellidoPaterno argument is required");
        apellidoPaterno = apellidoPaterno.replace('*', '%');
        if (apellidoPaterno.charAt(0) != '%') {
            apellidoPaterno = "%" + apellidoPaterno;
        }
        if (apellidoPaterno.charAt(apellidoPaterno.length() - 1) != '%') {
            apellidoPaterno = apellidoPaterno + "%";
        }
        EntityManager em = Usuario.entityManager();
        TypedQuery<Usuario> q = em.createQuery("SELECT o FROM Usuario AS o WHERE LOWER(o.apellidoPaterno) LIKE LOWER(:apellidoPaterno)", Usuario.class);
        q.setParameter("apellidoPaterno", apellidoPaterno);
        return q;
    }
    
    public static TypedQuery<Usuario> Usuario.findUsuariosByApellidoPaternoLike(String apellidoPaterno, String sortFieldName, String sortOrder) {
        if (apellidoPaterno == null || apellidoPaterno.length() == 0) throw new IllegalArgumentException("The apellidoPaterno argument is required");
        apellidoPaterno = apellidoPaterno.replace('*', '%');
        if (apellidoPaterno.charAt(0) != '%') {
            apellidoPaterno = "%" + apellidoPaterno;
        }
        if (apellidoPaterno.charAt(apellidoPaterno.length() - 1) != '%') {
            apellidoPaterno = apellidoPaterno + "%";
        }
        EntityManager em = Usuario.entityManager();
        String jpaQuery = "SELECT o FROM Usuario AS o WHERE LOWER(o.apellidoPaterno) LIKE LOWER(:apellidoPaterno)";
        if (fieldNames4OrderClauseFilter.contains(sortFieldName)) {
            jpaQuery = jpaQuery + " ORDER BY " + sortFieldName;
            if ("ASC".equalsIgnoreCase(sortOrder) || "DESC".equalsIgnoreCase(sortOrder)) {
                jpaQuery = jpaQuery + " " + sortOrder;
            }
        }
        TypedQuery<Usuario> q = em.createQuery(jpaQuery, Usuario.class);
        q.setParameter("apellidoPaterno", apellidoPaterno);
        return q;
    }
    
    public static TypedQuery<Usuario> Usuario.findUsuariosByEmpresaAndActivo(Empresa empresa, Boolean activo) {
        if (empresa == null) throw new IllegalArgumentException("The empresa argument is required");
        if (activo == null) throw new IllegalArgumentException("The activo argument is required");
        EntityManager em = Usuario.entityManager();
        TypedQuery<Usuario> q = em.createQuery("SELECT o FROM Usuario AS o WHERE o.empresa = :empresa AND o.activo = :activo", Usuario.class);
        q.setParameter("empresa", empresa);
        q.setParameter("activo", activo);
        return q;
    }
    
    public static TypedQuery<Usuario> Usuario.findUsuariosByEmpresaAndActivo(Empresa empresa, Boolean activo, String sortFieldName, String sortOrder) {
        if (empresa == null) throw new IllegalArgumentException("The empresa argument is required");
        if (activo == null) throw new IllegalArgumentException("The activo argument is required");
        EntityManager em = Usuario.entityManager();
        String jpaQuery = "SELECT o FROM Usuario AS o WHERE o.empresa = :empresa AND o.activo = :activo";
        if (fieldNames4OrderClauseFilter.contains(sortFieldName)) {
            jpaQuery = jpaQuery + " ORDER BY " + sortFieldName;
            if ("ASC".equalsIgnoreCase(sortOrder) || "DESC".equalsIgnoreCase(sortOrder)) {
                jpaQuery = jpaQuery + " " + sortOrder;
            }
        }
        TypedQuery<Usuario> q = em.createQuery(jpaQuery, Usuario.class);
        q.setParameter("empresa", empresa);
        q.setParameter("activo", activo);
        return q;
    }
    
    public static TypedQuery<Usuario> Usuario.findUsuariosByEmpresaAndNombreLikeAndActivo(Empresa empresa, String nombre, Boolean activo) {
        if (empresa == null) throw new IllegalArgumentException("The empresa argument is required");
        if (nombre == null || nombre.length() == 0) throw new IllegalArgumentException("The nombre argument is required");
        nombre = nombre.replace('*', '%');
        if (nombre.charAt(0) != '%') {
            nombre = "%" + nombre;
        }
        if (nombre.charAt(nombre.length() - 1) != '%') {
            nombre = nombre + "%";
        }
        if (activo == null) throw new IllegalArgumentException("The activo argument is required");
        EntityManager em = Usuario.entityManager();
        TypedQuery<Usuario> q = em.createQuery("SELECT o FROM Usuario AS o WHERE o.empresa = :empresa AND LOWER(o.nombre) LIKE LOWER(:nombre)  AND o.activo = :activo", Usuario.class);
        q.setParameter("empresa", empresa);
        q.setParameter("nombre", nombre);
        q.setParameter("activo", activo);
        return q;
    }
    
    public static TypedQuery<Usuario> Usuario.findUsuariosByEmpresaAndNombreLikeAndActivo(Empresa empresa, String nombre, Boolean activo, String sortFieldName, String sortOrder) {
        if (empresa == null) throw new IllegalArgumentException("The empresa argument is required");
        if (nombre == null || nombre.length() == 0) throw new IllegalArgumentException("The nombre argument is required");
        nombre = nombre.replace('*', '%');
        if (nombre.charAt(0) != '%') {
            nombre = "%" + nombre;
        }
        if (nombre.charAt(nombre.length() - 1) != '%') {
            nombre = nombre + "%";
        }
        if (activo == null) throw new IllegalArgumentException("The activo argument is required");
        EntityManager em = Usuario.entityManager();
        String jpaQuery = "SELECT o FROM Usuario AS o WHERE o.empresa = :empresa AND LOWER(o.nombre) LIKE LOWER(:nombre)  AND o.activo = :activo";
        if (fieldNames4OrderClauseFilter.contains(sortFieldName)) {
            jpaQuery = jpaQuery + " ORDER BY " + sortFieldName;
            if ("ASC".equalsIgnoreCase(sortOrder) || "DESC".equalsIgnoreCase(sortOrder)) {
                jpaQuery = jpaQuery + " " + sortOrder;
            }
        }
        TypedQuery<Usuario> q = em.createQuery(jpaQuery, Usuario.class);
        q.setParameter("empresa", empresa);
        q.setParameter("nombre", nombre);
        q.setParameter("activo", activo);
        return q;
    }
    
    public static TypedQuery<Usuario> Usuario.findUsuariosByRolAndActivo(Rol rol, Boolean activo) {
        if (rol == null) throw new IllegalArgumentException("The rol argument is required");
        if (activo == null) throw new IllegalArgumentException("The activo argument is required");
        EntityManager em = Usuario.entityManager();
        TypedQuery<Usuario> q = em.createQuery("SELECT o FROM Usuario AS o WHERE o.rol = :rol AND o.activo = :activo", Usuario.class);
        q.setParameter("rol", rol);
        q.setParameter("activo", activo);
        return q;
    }
    
    public static TypedQuery<Usuario> Usuario.findUsuariosByRolAndActivo(Rol rol, Boolean activo, String sortFieldName, String sortOrder) {
        if (rol == null) throw new IllegalArgumentException("The rol argument is required");
        if (activo == null) throw new IllegalArgumentException("The activo argument is required");
        EntityManager em = Usuario.entityManager();
        String jpaQuery = "SELECT o FROM Usuario AS o WHERE o.rol = :rol AND o.activo = :activo";
        if (fieldNames4OrderClauseFilter.contains(sortFieldName)) {
            jpaQuery = jpaQuery + " ORDER BY " + sortFieldName;
            if ("ASC".equalsIgnoreCase(sortOrder) || "DESC".equalsIgnoreCase(sortOrder)) {
                jpaQuery = jpaQuery + " " + sortOrder;
            }
        }
        TypedQuery<Usuario> q = em.createQuery(jpaQuery, Usuario.class);
        q.setParameter("rol", rol);
        q.setParameter("activo", activo);
        return q;
    }
    
}
