// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.raze.admingol.domain;

import com.raze.admingol.catalog.StatusPartido;
import com.raze.admingol.domain.Cancha;
import com.raze.admingol.domain.Equipo;
import com.raze.admingol.domain.Partido;
import com.raze.admingol.domain.Torneo;
import java.util.Date;
import javax.persistence.EntityManager;
import javax.persistence.TypedQuery;

privileged aspect Partido_Roo_Finder {
    
    public static Long Partido.countFindPartidoesByCancha(Cancha cancha) {
        if (cancha == null) throw new IllegalArgumentException("The cancha argument is required");
        EntityManager em = Partido.entityManager();
        TypedQuery q = em.createQuery("SELECT COUNT(o) FROM Partido AS o WHERE o.cancha = :cancha", Long.class);
        q.setParameter("cancha", cancha);
        return ((Long) q.getSingleResult());
    }
    
    public static Long Partido.countFindPartidoesByCanchaAndStatus(Cancha cancha, StatusPartido status) {
        if (cancha == null) throw new IllegalArgumentException("The cancha argument is required");
        if (status == null) throw new IllegalArgumentException("The status argument is required");
        EntityManager em = Partido.entityManager();
        TypedQuery q = em.createQuery("SELECT COUNT(o) FROM Partido AS o WHERE o.cancha = :cancha AND o.status = :status", Long.class);
        q.setParameter("cancha", cancha);
        q.setParameter("status", status);
        return ((Long) q.getSingleResult());
    }
    
    public static Long Partido.countFindPartidoesByCanchaAndStatusAndFechaJuegoBetween(Cancha cancha, StatusPartido status, Date minFechaJuego, Date maxFechaJuego) {
        if (cancha == null) throw new IllegalArgumentException("The cancha argument is required");
        if (status == null) throw new IllegalArgumentException("The status argument is required");
        if (minFechaJuego == null) throw new IllegalArgumentException("The minFechaJuego argument is required");
        if (maxFechaJuego == null) throw new IllegalArgumentException("The maxFechaJuego argument is required");
        EntityManager em = Partido.entityManager();
        TypedQuery q = em.createQuery("SELECT COUNT(o) FROM Partido AS o WHERE o.cancha = :cancha AND o.status = :status AND o.fechaJuego BETWEEN :minFechaJuego AND :maxFechaJuego", Long.class);
        q.setParameter("cancha", cancha);
        q.setParameter("status", status);
        q.setParameter("minFechaJuego", minFechaJuego);
        q.setParameter("maxFechaJuego", maxFechaJuego);
        return ((Long) q.getSingleResult());
    }
    
    public static Long Partido.countFindPartidoesByCanchaAndStatusAndFechaJuegoEquals(Cancha cancha, StatusPartido status, Date fechaJuego) {
        if (cancha == null) throw new IllegalArgumentException("The cancha argument is required");
        if (status == null) throw new IllegalArgumentException("The status argument is required");
        if (fechaJuego == null) throw new IllegalArgumentException("The fechaJuego argument is required");
        EntityManager em = Partido.entityManager();
        TypedQuery q = em.createQuery("SELECT COUNT(o) FROM Partido AS o WHERE o.cancha = :cancha AND o.status = :status AND o.fechaJuego = :fechaJuego", Long.class);
        q.setParameter("cancha", cancha);
        q.setParameter("status", status);
        q.setParameter("fechaJuego", fechaJuego);
        return ((Long) q.getSingleResult());
    }
    
    public static Long Partido.countFindPartidoesByFechaJuegoBetweenAndStatus(Date minFechaJuego, Date maxFechaJuego, StatusPartido status) {
        if (minFechaJuego == null) throw new IllegalArgumentException("The minFechaJuego argument is required");
        if (maxFechaJuego == null) throw new IllegalArgumentException("The maxFechaJuego argument is required");
        if (status == null) throw new IllegalArgumentException("The status argument is required");
        EntityManager em = Partido.entityManager();
        TypedQuery q = em.createQuery("SELECT COUNT(o) FROM Partido AS o WHERE o.fechaJuego BETWEEN :minFechaJuego AND :maxFechaJuego  AND o.status = :status", Long.class);
        q.setParameter("minFechaJuego", minFechaJuego);
        q.setParameter("maxFechaJuego", maxFechaJuego);
        q.setParameter("status", status);
        return ((Long) q.getSingleResult());
    }
    
    public static Long Partido.countFindPartidoesByFechaJuegoEqualsAndStatus(Date fechaJuego, StatusPartido status) {
        if (fechaJuego == null) throw new IllegalArgumentException("The fechaJuego argument is required");
        if (status == null) throw new IllegalArgumentException("The status argument is required");
        EntityManager em = Partido.entityManager();
        TypedQuery q = em.createQuery("SELECT COUNT(o) FROM Partido AS o WHERE o.fechaJuego = :fechaJuego  AND o.status = :status", Long.class);
        q.setParameter("fechaJuego", fechaJuego);
        q.setParameter("status", status);
        return ((Long) q.getSingleResult());
    }
    
    public static Long Partido.countFindPartidoesByTorneoEquipoLocalAndTorneoEquipoVisitanteAndEquipoLocalAndEquipoVisitante(Torneo torneoEquipoLocal, Torneo torneoEquipoVisitante, Equipo equipoLocal, Equipo equipoVisitante) {
        if (torneoEquipoLocal == null) throw new IllegalArgumentException("The torneoEquipoLocal argument is required");
        if (torneoEquipoVisitante == null) throw new IllegalArgumentException("The torneoEquipoVisitante argument is required");
        if (equipoLocal == null) throw new IllegalArgumentException("The equipoLocal argument is required");
        if (equipoVisitante == null) throw new IllegalArgumentException("The equipoVisitante argument is required");
        EntityManager em = Partido.entityManager();
        TypedQuery q = em.createQuery("SELECT COUNT(o) FROM Partido AS o WHERE o.torneoEquipoLocal = :torneoEquipoLocal AND o.torneoEquipoVisitante = :torneoEquipoVisitante AND o.equipoLocal = :equipoLocal AND o.equipoVisitante = :equipoVisitante", Long.class);
        q.setParameter("torneoEquipoLocal", torneoEquipoLocal);
        q.setParameter("torneoEquipoVisitante", torneoEquipoVisitante);
        q.setParameter("equipoLocal", equipoLocal);
        q.setParameter("equipoVisitante", equipoVisitante);
        return ((Long) q.getSingleResult());
    }
    
    public static Long Partido.countFindPartidoesByTorneoEquipoLocalAndTorneoEquipoVisitanteAndEquipoLocalAndEquipoVisitanteAndStatus(Torneo torneoEquipoLocal, Torneo torneoEquipoVisitante, Equipo equipoLocal, Equipo equipoVisitante, StatusPartido status) {
        if (torneoEquipoLocal == null) throw new IllegalArgumentException("The torneoEquipoLocal argument is required");
        if (torneoEquipoVisitante == null) throw new IllegalArgumentException("The torneoEquipoVisitante argument is required");
        if (equipoLocal == null) throw new IllegalArgumentException("The equipoLocal argument is required");
        if (equipoVisitante == null) throw new IllegalArgumentException("The equipoVisitante argument is required");
        if (status == null) throw new IllegalArgumentException("The status argument is required");
        EntityManager em = Partido.entityManager();
        TypedQuery q = em.createQuery("SELECT COUNT(o) FROM Partido AS o WHERE o.torneoEquipoLocal = :torneoEquipoLocal AND o.torneoEquipoVisitante = :torneoEquipoVisitante AND o.equipoLocal = :equipoLocal AND o.equipoVisitante = :equipoVisitante AND o.status = :status", Long.class);
        q.setParameter("torneoEquipoLocal", torneoEquipoLocal);
        q.setParameter("torneoEquipoVisitante", torneoEquipoVisitante);
        q.setParameter("equipoLocal", equipoLocal);
        q.setParameter("equipoVisitante", equipoVisitante);
        q.setParameter("status", status);
        return ((Long) q.getSingleResult());
    }
    
    public static Long Partido.countFindPartidoesByTorneoEquipoLocalOrTorneoEquipoVisitante(Torneo torneoEquipoLocal, Torneo torneoEquipoVisitante) {
        if (torneoEquipoLocal == null) throw new IllegalArgumentException("The torneoEquipoLocal argument is required");
        if (torneoEquipoVisitante == null) throw new IllegalArgumentException("The torneoEquipoVisitante argument is required");
        EntityManager em = Partido.entityManager();
        TypedQuery q = em.createQuery("SELECT COUNT(o) FROM Partido AS o WHERE o.torneoEquipoLocal = :torneoEquipoLocal OR o.torneoEquipoVisitante = :torneoEquipoVisitante", Long.class);
        q.setParameter("torneoEquipoLocal", torneoEquipoLocal);
        q.setParameter("torneoEquipoVisitante", torneoEquipoVisitante);
        return ((Long) q.getSingleResult());
    }
    
    public static Long Partido.countFindPartidoesByTorneoEquipoLocalOrTorneoEquipoVisitanteAndEquipoLocalOrEquipoVisitante(Torneo torneoEquipoLocal, Torneo torneoEquipoVisitante, Equipo equipoLocal, Equipo equipoVisitante) {
        if (torneoEquipoLocal == null) throw new IllegalArgumentException("The torneoEquipoLocal argument is required");
        if (torneoEquipoVisitante == null) throw new IllegalArgumentException("The torneoEquipoVisitante argument is required");
        if (equipoLocal == null) throw new IllegalArgumentException("The equipoLocal argument is required");
        if (equipoVisitante == null) throw new IllegalArgumentException("The equipoVisitante argument is required");
        EntityManager em = Partido.entityManager();
        TypedQuery q = em.createQuery("SELECT COUNT(o) FROM Partido AS o WHERE o.torneoEquipoLocal = :torneoEquipoLocal OR o.torneoEquipoVisitante = :torneoEquipoVisitante AND o.equipoLocal = :equipoLocal OR o.equipoVisitante = :equipoVisitante", Long.class);
        q.setParameter("torneoEquipoLocal", torneoEquipoLocal);
        q.setParameter("torneoEquipoVisitante", torneoEquipoVisitante);
        q.setParameter("equipoLocal", equipoLocal);
        q.setParameter("equipoVisitante", equipoVisitante);
        return ((Long) q.getSingleResult());
    }
    
    public static Long Partido.countFindPartidoesByTorneoEquipoLocalOrTorneoEquipoVisitanteAndEquipoLocalOrEquipoVisitanteAndStatus(Torneo torneoEquipoLocal, Torneo torneoEquipoVisitante, Equipo equipoLocal, Equipo equipoVisitante, StatusPartido status) {
        if (torneoEquipoLocal == null) throw new IllegalArgumentException("The torneoEquipoLocal argument is required");
        if (torneoEquipoVisitante == null) throw new IllegalArgumentException("The torneoEquipoVisitante argument is required");
        if (equipoLocal == null) throw new IllegalArgumentException("The equipoLocal argument is required");
        if (equipoVisitante == null) throw new IllegalArgumentException("The equipoVisitante argument is required");
        if (status == null) throw new IllegalArgumentException("The status argument is required");
        EntityManager em = Partido.entityManager();
        TypedQuery q = em.createQuery("SELECT COUNT(o) FROM Partido AS o WHERE o.torneoEquipoLocal = :torneoEquipoLocal OR o.torneoEquipoVisitante = :torneoEquipoVisitante AND o.equipoLocal = :equipoLocal OR o.equipoVisitante = :equipoVisitante AND o.status = :status", Long.class);
        q.setParameter("torneoEquipoLocal", torneoEquipoLocal);
        q.setParameter("torneoEquipoVisitante", torneoEquipoVisitante);
        q.setParameter("equipoLocal", equipoLocal);
        q.setParameter("equipoVisitante", equipoVisitante);
        q.setParameter("status", status);
        return ((Long) q.getSingleResult());
    }
    
    public static Long Partido.countFindPartidoesByTorneoEquipoLocalOrTorneoEquipoVisitanteAndStatus(Torneo torneoEquipoLocal, Torneo torneoEquipoVisitante, StatusPartido status) {
        if (torneoEquipoLocal == null) throw new IllegalArgumentException("The torneoEquipoLocal argument is required");
        if (torneoEquipoVisitante == null) throw new IllegalArgumentException("The torneoEquipoVisitante argument is required");
        if (status == null) throw new IllegalArgumentException("The status argument is required");
        EntityManager em = Partido.entityManager();
        TypedQuery q = em.createQuery("SELECT COUNT(o) FROM Partido AS o WHERE o.torneoEquipoLocal = :torneoEquipoLocal OR o.torneoEquipoVisitante = :torneoEquipoVisitante AND o.status = :status", Long.class);
        q.setParameter("torneoEquipoLocal", torneoEquipoLocal);
        q.setParameter("torneoEquipoVisitante", torneoEquipoVisitante);
        q.setParameter("status", status);
        return ((Long) q.getSingleResult());
    }
    
    public static TypedQuery<Partido> Partido.findPartidoesByCancha(Cancha cancha) {
        if (cancha == null) throw new IllegalArgumentException("The cancha argument is required");
        EntityManager em = Partido.entityManager();
        TypedQuery<Partido> q = em.createQuery("SELECT o FROM Partido AS o WHERE o.cancha = :cancha", Partido.class);
        q.setParameter("cancha", cancha);
        return q;
    }
    
    public static TypedQuery<Partido> Partido.findPartidoesByCancha(Cancha cancha, String sortFieldName, String sortOrder) {
        if (cancha == null) throw new IllegalArgumentException("The cancha argument is required");
        EntityManager em = Partido.entityManager();
        String jpaQuery = "SELECT o FROM Partido AS o WHERE o.cancha = :cancha";
        if (fieldNames4OrderClauseFilter.contains(sortFieldName)) {
            jpaQuery = jpaQuery + " ORDER BY " + sortFieldName;
            if ("ASC".equalsIgnoreCase(sortOrder) || "DESC".equalsIgnoreCase(sortOrder)) {
                jpaQuery = jpaQuery + " " + sortOrder;
            }
        }
        TypedQuery<Partido> q = em.createQuery(jpaQuery, Partido.class);
        q.setParameter("cancha", cancha);
        return q;
    }
    
    public static TypedQuery<Partido> Partido.findPartidoesByCanchaAndStatus(Cancha cancha, StatusPartido status) {
        if (cancha == null) throw new IllegalArgumentException("The cancha argument is required");
        if (status == null) throw new IllegalArgumentException("The status argument is required");
        EntityManager em = Partido.entityManager();
        TypedQuery<Partido> q = em.createQuery("SELECT o FROM Partido AS o WHERE o.cancha = :cancha AND o.status = :status", Partido.class);
        q.setParameter("cancha", cancha);
        q.setParameter("status", status);
        return q;
    }
    
    public static TypedQuery<Partido> Partido.findPartidoesByCanchaAndStatus(Cancha cancha, StatusPartido status, String sortFieldName, String sortOrder) {
        if (cancha == null) throw new IllegalArgumentException("The cancha argument is required");
        if (status == null) throw new IllegalArgumentException("The status argument is required");
        EntityManager em = Partido.entityManager();
        String jpaQuery = "SELECT o FROM Partido AS o WHERE o.cancha = :cancha AND o.status = :status";
        if (fieldNames4OrderClauseFilter.contains(sortFieldName)) {
            jpaQuery = jpaQuery + " ORDER BY " + sortFieldName;
            if ("ASC".equalsIgnoreCase(sortOrder) || "DESC".equalsIgnoreCase(sortOrder)) {
                jpaQuery = jpaQuery + " " + sortOrder;
            }
        }
        TypedQuery<Partido> q = em.createQuery(jpaQuery, Partido.class);
        q.setParameter("cancha", cancha);
        q.setParameter("status", status);
        return q;
    }
    
    public static TypedQuery<Partido> Partido.findPartidoesByCanchaAndStatusAndFechaJuegoBetween(Cancha cancha, StatusPartido status, Date minFechaJuego, Date maxFechaJuego) {
        if (cancha == null) throw new IllegalArgumentException("The cancha argument is required");
        if (status == null) throw new IllegalArgumentException("The status argument is required");
        if (minFechaJuego == null) throw new IllegalArgumentException("The minFechaJuego argument is required");
        if (maxFechaJuego == null) throw new IllegalArgumentException("The maxFechaJuego argument is required");
        EntityManager em = Partido.entityManager();
        TypedQuery<Partido> q = em.createQuery("SELECT o FROM Partido AS o WHERE o.cancha = :cancha AND o.status = :status AND o.fechaJuego BETWEEN :minFechaJuego AND :maxFechaJuego", Partido.class);
        q.setParameter("cancha", cancha);
        q.setParameter("status", status);
        q.setParameter("minFechaJuego", minFechaJuego);
        q.setParameter("maxFechaJuego", maxFechaJuego);
        return q;
    }
    
    public static TypedQuery<Partido> Partido.findPartidoesByCanchaAndStatusAndFechaJuegoBetween(Cancha cancha, StatusPartido status, Date minFechaJuego, Date maxFechaJuego, String sortFieldName, String sortOrder) {
        if (cancha == null) throw new IllegalArgumentException("The cancha argument is required");
        if (status == null) throw new IllegalArgumentException("The status argument is required");
        if (minFechaJuego == null) throw new IllegalArgumentException("The minFechaJuego argument is required");
        if (maxFechaJuego == null) throw new IllegalArgumentException("The maxFechaJuego argument is required");
        EntityManager em = Partido.entityManager();
        String jpaQuery = "SELECT o FROM Partido AS o WHERE o.cancha = :cancha AND o.status = :status AND o.fechaJuego BETWEEN :minFechaJuego AND :maxFechaJuego";
        if (fieldNames4OrderClauseFilter.contains(sortFieldName)) {
            jpaQuery = jpaQuery + " ORDER BY " + sortFieldName;
            if ("ASC".equalsIgnoreCase(sortOrder) || "DESC".equalsIgnoreCase(sortOrder)) {
                jpaQuery = jpaQuery + " " + sortOrder;
            }
        }
        TypedQuery<Partido> q = em.createQuery(jpaQuery, Partido.class);
        q.setParameter("cancha", cancha);
        q.setParameter("status", status);
        q.setParameter("minFechaJuego", minFechaJuego);
        q.setParameter("maxFechaJuego", maxFechaJuego);
        return q;
    }
    
    public static TypedQuery<Partido> Partido.findPartidoesByCanchaAndStatusAndFechaJuegoEquals(Cancha cancha, StatusPartido status, Date fechaJuego) {
        if (cancha == null) throw new IllegalArgumentException("The cancha argument is required");
        if (status == null) throw new IllegalArgumentException("The status argument is required");
        if (fechaJuego == null) throw new IllegalArgumentException("The fechaJuego argument is required");
        EntityManager em = Partido.entityManager();
        TypedQuery<Partido> q = em.createQuery("SELECT o FROM Partido AS o WHERE o.cancha = :cancha AND o.status = :status AND o.fechaJuego = :fechaJuego", Partido.class);
        q.setParameter("cancha", cancha);
        q.setParameter("status", status);
        q.setParameter("fechaJuego", fechaJuego);
        return q;
    }
    
    public static TypedQuery<Partido> Partido.findPartidoesByCanchaAndStatusAndFechaJuegoEquals(Cancha cancha, StatusPartido status, Date fechaJuego, String sortFieldName, String sortOrder) {
        if (cancha == null) throw new IllegalArgumentException("The cancha argument is required");
        if (status == null) throw new IllegalArgumentException("The status argument is required");
        if (fechaJuego == null) throw new IllegalArgumentException("The fechaJuego argument is required");
        EntityManager em = Partido.entityManager();
        String jpaQuery = "SELECT o FROM Partido AS o WHERE o.cancha = :cancha AND o.status = :status AND o.fechaJuego = :fechaJuego";
        if (fieldNames4OrderClauseFilter.contains(sortFieldName)) {
            jpaQuery = jpaQuery + " ORDER BY " + sortFieldName;
            if ("ASC".equalsIgnoreCase(sortOrder) || "DESC".equalsIgnoreCase(sortOrder)) {
                jpaQuery = jpaQuery + " " + sortOrder;
            }
        }
        TypedQuery<Partido> q = em.createQuery(jpaQuery, Partido.class);
        q.setParameter("cancha", cancha);
        q.setParameter("status", status);
        q.setParameter("fechaJuego", fechaJuego);
        return q;
    }
    
    public static TypedQuery<Partido> Partido.findPartidoesByFechaJuegoBetweenAndStatus(Date minFechaJuego, Date maxFechaJuego, StatusPartido status) {
        if (minFechaJuego == null) throw new IllegalArgumentException("The minFechaJuego argument is required");
        if (maxFechaJuego == null) throw new IllegalArgumentException("The maxFechaJuego argument is required");
        if (status == null) throw new IllegalArgumentException("The status argument is required");
        EntityManager em = Partido.entityManager();
        TypedQuery<Partido> q = em.createQuery("SELECT o FROM Partido AS o WHERE o.fechaJuego BETWEEN :minFechaJuego AND :maxFechaJuego  AND o.status = :status", Partido.class);
        q.setParameter("minFechaJuego", minFechaJuego);
        q.setParameter("maxFechaJuego", maxFechaJuego);
        q.setParameter("status", status);
        return q;
    }
    
    public static TypedQuery<Partido> Partido.findPartidoesByFechaJuegoBetweenAndStatus(Date minFechaJuego, Date maxFechaJuego, StatusPartido status, String sortFieldName, String sortOrder) {
        if (minFechaJuego == null) throw new IllegalArgumentException("The minFechaJuego argument is required");
        if (maxFechaJuego == null) throw new IllegalArgumentException("The maxFechaJuego argument is required");
        if (status == null) throw new IllegalArgumentException("The status argument is required");
        EntityManager em = Partido.entityManager();
        String jpaQuery = "SELECT o FROM Partido AS o WHERE o.fechaJuego BETWEEN :minFechaJuego AND :maxFechaJuego  AND o.status = :status";
        if (fieldNames4OrderClauseFilter.contains(sortFieldName)) {
            jpaQuery = jpaQuery + " ORDER BY " + sortFieldName;
            if ("ASC".equalsIgnoreCase(sortOrder) || "DESC".equalsIgnoreCase(sortOrder)) {
                jpaQuery = jpaQuery + " " + sortOrder;
            }
        }
        TypedQuery<Partido> q = em.createQuery(jpaQuery, Partido.class);
        q.setParameter("minFechaJuego", minFechaJuego);
        q.setParameter("maxFechaJuego", maxFechaJuego);
        q.setParameter("status", status);
        return q;
    }
    
    public static TypedQuery<Partido> Partido.findPartidoesByFechaJuegoEqualsAndStatus(Date fechaJuego, StatusPartido status) {
        if (fechaJuego == null) throw new IllegalArgumentException("The fechaJuego argument is required");
        if (status == null) throw new IllegalArgumentException("The status argument is required");
        EntityManager em = Partido.entityManager();
        TypedQuery<Partido> q = em.createQuery("SELECT o FROM Partido AS o WHERE o.fechaJuego = :fechaJuego  AND o.status = :status", Partido.class);
        q.setParameter("fechaJuego", fechaJuego);
        q.setParameter("status", status);
        return q;
    }
    
    public static TypedQuery<Partido> Partido.findPartidoesByFechaJuegoEqualsAndStatus(Date fechaJuego, StatusPartido status, String sortFieldName, String sortOrder) {
        if (fechaJuego == null) throw new IllegalArgumentException("The fechaJuego argument is required");
        if (status == null) throw new IllegalArgumentException("The status argument is required");
        EntityManager em = Partido.entityManager();
        String jpaQuery = "SELECT o FROM Partido AS o WHERE o.fechaJuego = :fechaJuego  AND o.status = :status";
        if (fieldNames4OrderClauseFilter.contains(sortFieldName)) {
            jpaQuery = jpaQuery + " ORDER BY " + sortFieldName;
            if ("ASC".equalsIgnoreCase(sortOrder) || "DESC".equalsIgnoreCase(sortOrder)) {
                jpaQuery = jpaQuery + " " + sortOrder;
            }
        }
        TypedQuery<Partido> q = em.createQuery(jpaQuery, Partido.class);
        q.setParameter("fechaJuego", fechaJuego);
        q.setParameter("status", status);
        return q;
    }
    
    public static TypedQuery<Partido> Partido.findPartidoesByTorneoEquipoLocalAndTorneoEquipoVisitanteAndEquipoLocalAndEquipoVisitante(Torneo torneoEquipoLocal, Torneo torneoEquipoVisitante, Equipo equipoLocal, Equipo equipoVisitante) {
        if (torneoEquipoLocal == null) throw new IllegalArgumentException("The torneoEquipoLocal argument is required");
        if (torneoEquipoVisitante == null) throw new IllegalArgumentException("The torneoEquipoVisitante argument is required");
        if (equipoLocal == null) throw new IllegalArgumentException("The equipoLocal argument is required");
        if (equipoVisitante == null) throw new IllegalArgumentException("The equipoVisitante argument is required");
        EntityManager em = Partido.entityManager();
        TypedQuery<Partido> q = em.createQuery("SELECT o FROM Partido AS o WHERE o.torneoEquipoLocal = :torneoEquipoLocal AND o.torneoEquipoVisitante = :torneoEquipoVisitante AND o.equipoLocal = :equipoLocal AND o.equipoVisitante = :equipoVisitante", Partido.class);
        q.setParameter("torneoEquipoLocal", torneoEquipoLocal);
        q.setParameter("torneoEquipoVisitante", torneoEquipoVisitante);
        q.setParameter("equipoLocal", equipoLocal);
        q.setParameter("equipoVisitante", equipoVisitante);
        return q;
    }
    
    public static TypedQuery<Partido> Partido.findPartidoesByTorneoEquipoLocalAndTorneoEquipoVisitanteAndEquipoLocalAndEquipoVisitante(Torneo torneoEquipoLocal, Torneo torneoEquipoVisitante, Equipo equipoLocal, Equipo equipoVisitante, String sortFieldName, String sortOrder) {
        if (torneoEquipoLocal == null) throw new IllegalArgumentException("The torneoEquipoLocal argument is required");
        if (torneoEquipoVisitante == null) throw new IllegalArgumentException("The torneoEquipoVisitante argument is required");
        if (equipoLocal == null) throw new IllegalArgumentException("The equipoLocal argument is required");
        if (equipoVisitante == null) throw new IllegalArgumentException("The equipoVisitante argument is required");
        EntityManager em = Partido.entityManager();
        String jpaQuery = "SELECT o FROM Partido AS o WHERE o.torneoEquipoLocal = :torneoEquipoLocal AND o.torneoEquipoVisitante = :torneoEquipoVisitante AND o.equipoLocal = :equipoLocal AND o.equipoVisitante = :equipoVisitante";
        if (fieldNames4OrderClauseFilter.contains(sortFieldName)) {
            jpaQuery = jpaQuery + " ORDER BY " + sortFieldName;
            if ("ASC".equalsIgnoreCase(sortOrder) || "DESC".equalsIgnoreCase(sortOrder)) {
                jpaQuery = jpaQuery + " " + sortOrder;
            }
        }
        TypedQuery<Partido> q = em.createQuery(jpaQuery, Partido.class);
        q.setParameter("torneoEquipoLocal", torneoEquipoLocal);
        q.setParameter("torneoEquipoVisitante", torneoEquipoVisitante);
        q.setParameter("equipoLocal", equipoLocal);
        q.setParameter("equipoVisitante", equipoVisitante);
        return q;
    }
    
    public static TypedQuery<Partido> Partido.findPartidoesByTorneoEquipoLocalAndTorneoEquipoVisitanteAndEquipoLocalAndEquipoVisitanteAndStatus(Torneo torneoEquipoLocal, Torneo torneoEquipoVisitante, Equipo equipoLocal, Equipo equipoVisitante, StatusPartido status) {
        if (torneoEquipoLocal == null) throw new IllegalArgumentException("The torneoEquipoLocal argument is required");
        if (torneoEquipoVisitante == null) throw new IllegalArgumentException("The torneoEquipoVisitante argument is required");
        if (equipoLocal == null) throw new IllegalArgumentException("The equipoLocal argument is required");
        if (equipoVisitante == null) throw new IllegalArgumentException("The equipoVisitante argument is required");
        if (status == null) throw new IllegalArgumentException("The status argument is required");
        EntityManager em = Partido.entityManager();
        TypedQuery<Partido> q = em.createQuery("SELECT o FROM Partido AS o WHERE o.torneoEquipoLocal = :torneoEquipoLocal AND o.torneoEquipoVisitante = :torneoEquipoVisitante AND o.equipoLocal = :equipoLocal AND o.equipoVisitante = :equipoVisitante AND o.status = :status", Partido.class);
        q.setParameter("torneoEquipoLocal", torneoEquipoLocal);
        q.setParameter("torneoEquipoVisitante", torneoEquipoVisitante);
        q.setParameter("equipoLocal", equipoLocal);
        q.setParameter("equipoVisitante", equipoVisitante);
        q.setParameter("status", status);
        return q;
    }
    
    public static TypedQuery<Partido> Partido.findPartidoesByTorneoEquipoLocalAndTorneoEquipoVisitanteAndEquipoLocalAndEquipoVisitanteAndStatus(Torneo torneoEquipoLocal, Torneo torneoEquipoVisitante, Equipo equipoLocal, Equipo equipoVisitante, StatusPartido status, String sortFieldName, String sortOrder) {
        if (torneoEquipoLocal == null) throw new IllegalArgumentException("The torneoEquipoLocal argument is required");
        if (torneoEquipoVisitante == null) throw new IllegalArgumentException("The torneoEquipoVisitante argument is required");
        if (equipoLocal == null) throw new IllegalArgumentException("The equipoLocal argument is required");
        if (equipoVisitante == null) throw new IllegalArgumentException("The equipoVisitante argument is required");
        if (status == null) throw new IllegalArgumentException("The status argument is required");
        EntityManager em = Partido.entityManager();
        String jpaQuery = "SELECT o FROM Partido AS o WHERE o.torneoEquipoLocal = :torneoEquipoLocal AND o.torneoEquipoVisitante = :torneoEquipoVisitante AND o.equipoLocal = :equipoLocal AND o.equipoVisitante = :equipoVisitante AND o.status = :status";
        if (fieldNames4OrderClauseFilter.contains(sortFieldName)) {
            jpaQuery = jpaQuery + " ORDER BY " + sortFieldName;
            if ("ASC".equalsIgnoreCase(sortOrder) || "DESC".equalsIgnoreCase(sortOrder)) {
                jpaQuery = jpaQuery + " " + sortOrder;
            }
        }
        TypedQuery<Partido> q = em.createQuery(jpaQuery, Partido.class);
        q.setParameter("torneoEquipoLocal", torneoEquipoLocal);
        q.setParameter("torneoEquipoVisitante", torneoEquipoVisitante);
        q.setParameter("equipoLocal", equipoLocal);
        q.setParameter("equipoVisitante", equipoVisitante);
        q.setParameter("status", status);
        return q;
    }
    
    public static TypedQuery<Partido> Partido.findPartidoesByTorneoEquipoLocalOrTorneoEquipoVisitante(Torneo torneoEquipoLocal, Torneo torneoEquipoVisitante) {
        if (torneoEquipoLocal == null) throw new IllegalArgumentException("The torneoEquipoLocal argument is required");
        if (torneoEquipoVisitante == null) throw new IllegalArgumentException("The torneoEquipoVisitante argument is required");
        EntityManager em = Partido.entityManager();
        TypedQuery<Partido> q = em.createQuery("SELECT o FROM Partido AS o WHERE o.torneoEquipoLocal = :torneoEquipoLocal OR o.torneoEquipoVisitante = :torneoEquipoVisitante", Partido.class);
        q.setParameter("torneoEquipoLocal", torneoEquipoLocal);
        q.setParameter("torneoEquipoVisitante", torneoEquipoVisitante);
        return q;
    }
    
    public static TypedQuery<Partido> Partido.findPartidoesByTorneoEquipoLocalOrTorneoEquipoVisitante(Torneo torneoEquipoLocal, Torneo torneoEquipoVisitante, String sortFieldName, String sortOrder) {
        if (torneoEquipoLocal == null) throw new IllegalArgumentException("The torneoEquipoLocal argument is required");
        if (torneoEquipoVisitante == null) throw new IllegalArgumentException("The torneoEquipoVisitante argument is required");
        EntityManager em = Partido.entityManager();
        String jpaQuery = "SELECT o FROM Partido AS o WHERE o.torneoEquipoLocal = :torneoEquipoLocal OR o.torneoEquipoVisitante = :torneoEquipoVisitante";
        if (fieldNames4OrderClauseFilter.contains(sortFieldName)) {
            jpaQuery = jpaQuery + " ORDER BY " + sortFieldName;
            if ("ASC".equalsIgnoreCase(sortOrder) || "DESC".equalsIgnoreCase(sortOrder)) {
                jpaQuery = jpaQuery + " " + sortOrder;
            }
        }
        TypedQuery<Partido> q = em.createQuery(jpaQuery, Partido.class);
        q.setParameter("torneoEquipoLocal", torneoEquipoLocal);
        q.setParameter("torneoEquipoVisitante", torneoEquipoVisitante);
        return q;
    }
    
    public static TypedQuery<Partido> Partido.findPartidoesByTorneoEquipoLocalOrTorneoEquipoVisitanteAndEquipoLocalOrEquipoVisitante(Torneo torneoEquipoLocal, Torneo torneoEquipoVisitante, Equipo equipoLocal, Equipo equipoVisitante) {
        if (torneoEquipoLocal == null) throw new IllegalArgumentException("The torneoEquipoLocal argument is required");
        if (torneoEquipoVisitante == null) throw new IllegalArgumentException("The torneoEquipoVisitante argument is required");
        if (equipoLocal == null) throw new IllegalArgumentException("The equipoLocal argument is required");
        if (equipoVisitante == null) throw new IllegalArgumentException("The equipoVisitante argument is required");
        EntityManager em = Partido.entityManager();
        TypedQuery<Partido> q = em.createQuery("SELECT o FROM Partido AS o WHERE o.torneoEquipoLocal = :torneoEquipoLocal OR o.torneoEquipoVisitante = :torneoEquipoVisitante AND o.equipoLocal = :equipoLocal OR o.equipoVisitante = :equipoVisitante", Partido.class);
        q.setParameter("torneoEquipoLocal", torneoEquipoLocal);
        q.setParameter("torneoEquipoVisitante", torneoEquipoVisitante);
        q.setParameter("equipoLocal", equipoLocal);
        q.setParameter("equipoVisitante", equipoVisitante);
        return q;
    }
    
    public static TypedQuery<Partido> Partido.findPartidoesByTorneoEquipoLocalOrTorneoEquipoVisitanteAndEquipoLocalOrEquipoVisitante(Torneo torneoEquipoLocal, Torneo torneoEquipoVisitante, Equipo equipoLocal, Equipo equipoVisitante, String sortFieldName, String sortOrder) {
        if (torneoEquipoLocal == null) throw new IllegalArgumentException("The torneoEquipoLocal argument is required");
        if (torneoEquipoVisitante == null) throw new IllegalArgumentException("The torneoEquipoVisitante argument is required");
        if (equipoLocal == null) throw new IllegalArgumentException("The equipoLocal argument is required");
        if (equipoVisitante == null) throw new IllegalArgumentException("The equipoVisitante argument is required");
        EntityManager em = Partido.entityManager();
        String jpaQuery = "SELECT o FROM Partido AS o WHERE o.torneoEquipoLocal = :torneoEquipoLocal OR o.torneoEquipoVisitante = :torneoEquipoVisitante AND o.equipoLocal = :equipoLocal OR o.equipoVisitante = :equipoVisitante";
        if (fieldNames4OrderClauseFilter.contains(sortFieldName)) {
            jpaQuery = jpaQuery + " ORDER BY " + sortFieldName;
            if ("ASC".equalsIgnoreCase(sortOrder) || "DESC".equalsIgnoreCase(sortOrder)) {
                jpaQuery = jpaQuery + " " + sortOrder;
            }
        }
        TypedQuery<Partido> q = em.createQuery(jpaQuery, Partido.class);
        q.setParameter("torneoEquipoLocal", torneoEquipoLocal);
        q.setParameter("torneoEquipoVisitante", torneoEquipoVisitante);
        q.setParameter("equipoLocal", equipoLocal);
        q.setParameter("equipoVisitante", equipoVisitante);
        return q;
    }
    
    public static TypedQuery<Partido> Partido.findPartidoesByTorneoEquipoLocalOrTorneoEquipoVisitanteAndEquipoLocalOrEquipoVisitanteAndStatus(Torneo torneoEquipoLocal, Torneo torneoEquipoVisitante, Equipo equipoLocal, Equipo equipoVisitante, StatusPartido status) {
        if (torneoEquipoLocal == null) throw new IllegalArgumentException("The torneoEquipoLocal argument is required");
        if (torneoEquipoVisitante == null) throw new IllegalArgumentException("The torneoEquipoVisitante argument is required");
        if (equipoLocal == null) throw new IllegalArgumentException("The equipoLocal argument is required");
        if (equipoVisitante == null) throw new IllegalArgumentException("The equipoVisitante argument is required");
        if (status == null) throw new IllegalArgumentException("The status argument is required");
        EntityManager em = Partido.entityManager();
        TypedQuery<Partido> q = em.createQuery("SELECT o FROM Partido AS o WHERE o.torneoEquipoLocal = :torneoEquipoLocal OR o.torneoEquipoVisitante = :torneoEquipoVisitante AND o.equipoLocal = :equipoLocal OR o.equipoVisitante = :equipoVisitante AND o.status = :status", Partido.class);
        q.setParameter("torneoEquipoLocal", torneoEquipoLocal);
        q.setParameter("torneoEquipoVisitante", torneoEquipoVisitante);
        q.setParameter("equipoLocal", equipoLocal);
        q.setParameter("equipoVisitante", equipoVisitante);
        q.setParameter("status", status);
        return q;
    }
    
    public static TypedQuery<Partido> Partido.findPartidoesByTorneoEquipoLocalOrTorneoEquipoVisitanteAndEquipoLocalOrEquipoVisitanteAndStatus(Torneo torneoEquipoLocal, Torneo torneoEquipoVisitante, Equipo equipoLocal, Equipo equipoVisitante, StatusPartido status, String sortFieldName, String sortOrder) {
        if (torneoEquipoLocal == null) throw new IllegalArgumentException("The torneoEquipoLocal argument is required");
        if (torneoEquipoVisitante == null) throw new IllegalArgumentException("The torneoEquipoVisitante argument is required");
        if (equipoLocal == null) throw new IllegalArgumentException("The equipoLocal argument is required");
        if (equipoVisitante == null) throw new IllegalArgumentException("The equipoVisitante argument is required");
        if (status == null) throw new IllegalArgumentException("The status argument is required");
        EntityManager em = Partido.entityManager();
        String jpaQuery = "SELECT o FROM Partido AS o WHERE o.torneoEquipoLocal = :torneoEquipoLocal OR o.torneoEquipoVisitante = :torneoEquipoVisitante AND o.equipoLocal = :equipoLocal OR o.equipoVisitante = :equipoVisitante AND o.status = :status";
        if (fieldNames4OrderClauseFilter.contains(sortFieldName)) {
            jpaQuery = jpaQuery + " ORDER BY " + sortFieldName;
            if ("ASC".equalsIgnoreCase(sortOrder) || "DESC".equalsIgnoreCase(sortOrder)) {
                jpaQuery = jpaQuery + " " + sortOrder;
            }
        }
        TypedQuery<Partido> q = em.createQuery(jpaQuery, Partido.class);
        q.setParameter("torneoEquipoLocal", torneoEquipoLocal);
        q.setParameter("torneoEquipoVisitante", torneoEquipoVisitante);
        q.setParameter("equipoLocal", equipoLocal);
        q.setParameter("equipoVisitante", equipoVisitante);
        q.setParameter("status", status);
        return q;
    }
    
    public static TypedQuery<Partido> Partido.findPartidoesByTorneoEquipoLocalOrTorneoEquipoVisitanteAndStatus(Torneo torneoEquipoLocal, Torneo torneoEquipoVisitante, StatusPartido status) {
        if (torneoEquipoLocal == null) throw new IllegalArgumentException("The torneoEquipoLocal argument is required");
        if (torneoEquipoVisitante == null) throw new IllegalArgumentException("The torneoEquipoVisitante argument is required");
        if (status == null) throw new IllegalArgumentException("The status argument is required");
        EntityManager em = Partido.entityManager();
        TypedQuery<Partido> q = em.createQuery("SELECT o FROM Partido AS o WHERE o.torneoEquipoLocal = :torneoEquipoLocal OR o.torneoEquipoVisitante = :torneoEquipoVisitante AND o.status = :status", Partido.class);
        q.setParameter("torneoEquipoLocal", torneoEquipoLocal);
        q.setParameter("torneoEquipoVisitante", torneoEquipoVisitante);
        q.setParameter("status", status);
        return q;
    }
    
    public static TypedQuery<Partido> Partido.findPartidoesByTorneoEquipoLocalOrTorneoEquipoVisitanteAndStatus(Torneo torneoEquipoLocal, Torneo torneoEquipoVisitante, StatusPartido status, String sortFieldName, String sortOrder) {
        if (torneoEquipoLocal == null) throw new IllegalArgumentException("The torneoEquipoLocal argument is required");
        if (torneoEquipoVisitante == null) throw new IllegalArgumentException("The torneoEquipoVisitante argument is required");
        if (status == null) throw new IllegalArgumentException("The status argument is required");
        EntityManager em = Partido.entityManager();
        String jpaQuery = "SELECT o FROM Partido AS o WHERE o.torneoEquipoLocal = :torneoEquipoLocal OR o.torneoEquipoVisitante = :torneoEquipoVisitante AND o.status = :status";
        if (fieldNames4OrderClauseFilter.contains(sortFieldName)) {
            jpaQuery = jpaQuery + " ORDER BY " + sortFieldName;
            if ("ASC".equalsIgnoreCase(sortOrder) || "DESC".equalsIgnoreCase(sortOrder)) {
                jpaQuery = jpaQuery + " " + sortOrder;
            }
        }
        TypedQuery<Partido> q = em.createQuery(jpaQuery, Partido.class);
        q.setParameter("torneoEquipoLocal", torneoEquipoLocal);
        q.setParameter("torneoEquipoVisitante", torneoEquipoVisitante);
        q.setParameter("status", status);
        return q;
    }
    
}
