// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.raze.admingol.catalog;

import com.raze.admingol.catalog.Rol;
import javax.persistence.EntityManager;
import javax.persistence.TypedQuery;

privileged aspect Rol_Roo_Finder {
    
    public static Long Rol.countFindRolsByActivo(Boolean activo) {
        if (activo == null) throw new IllegalArgumentException("The activo argument is required");
        EntityManager em = Rol.entityManager();
        TypedQuery q = em.createQuery("SELECT COUNT(o) FROM Rol AS o WHERE o.activo = :activo", Long.class);
        q.setParameter("activo", activo);
        return ((Long) q.getSingleResult());
    }
    
    public static TypedQuery<Rol> Rol.findRolsByActivo(Boolean activo) {
        if (activo == null) throw new IllegalArgumentException("The activo argument is required");
        EntityManager em = Rol.entityManager();
        TypedQuery<Rol> q = em.createQuery("SELECT o FROM Rol AS o WHERE o.activo = :activo", Rol.class);
        q.setParameter("activo", activo);
        return q;
    }
    
    public static TypedQuery<Rol> Rol.findRolsByActivo(Boolean activo, String sortFieldName, String sortOrder) {
        if (activo == null) throw new IllegalArgumentException("The activo argument is required");
        EntityManager em = Rol.entityManager();
        String jpaQuery = "SELECT o FROM Rol AS o WHERE o.activo = :activo";
        if (fieldNames4OrderClauseFilter.contains(sortFieldName)) {
            jpaQuery = jpaQuery + " ORDER BY " + sortFieldName;
            if ("ASC".equalsIgnoreCase(sortOrder) || "DESC".equalsIgnoreCase(sortOrder)) {
                jpaQuery = jpaQuery + " " + sortOrder;
            }
        }
        TypedQuery<Rol> q = em.createQuery(jpaQuery, Rol.class);
        q.setParameter("activo", activo);
        return q;
    }
    
}
