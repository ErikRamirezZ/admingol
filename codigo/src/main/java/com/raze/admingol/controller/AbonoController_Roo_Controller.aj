// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.raze.admingol.controller;

import com.raze.admingol.catalog.Descuento;
import com.raze.admingol.catalog.MetodoPago;
import com.raze.admingol.catalog.StatusCargoAbono;
import com.raze.admingol.controller.AbonoController;
import com.raze.admingol.domain.Abono;
import com.raze.admingol.domain.Cargo;
import com.raze.admingol.domain.Usuario;
import java.io.UnsupportedEncodingException;
import java.util.ArrayList;
import java.util.List;
import javax.servlet.http.HttpServletRequest;
import javax.validation.Valid;
import org.joda.time.format.DateTimeFormat;
import org.springframework.context.i18n.LocaleContextHolder;
import org.springframework.ui.Model;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.util.UriUtils;
import org.springframework.web.util.WebUtils;

privileged aspect AbonoController_Roo_Controller {
    
    @RequestMapping(method = RequestMethod.POST, produces = "text/html")
    public String AbonoController.create(@Valid Abono abono, BindingResult bindingResult, Model uiModel, HttpServletRequest httpServletRequest) {
        if (bindingResult.hasErrors()) {
            populateEditForm(uiModel, abono);
            return "abonoes/create";
        }
        uiModel.asMap().clear();
        abono.persist();
        return "redirect:/abonoes/" + encodeUrlPathSegment(abono.getId().toString(), httpServletRequest);
    }
    
    @RequestMapping(params = "form", produces = "text/html")
    public String AbonoController.createForm(Model uiModel) {
        populateEditForm(uiModel, new Abono());
        List<String[]> dependencies = new ArrayList<String[]>();
        if (Cargo.countCargoes() == 0) {
            dependencies.add(new String[] { "cargo", "cargoes" });
        }
        if (MetodoPago.countMetodoPagoes() == 0) {
            dependencies.add(new String[] { "metodopago", "metodopagoes" });
        }
        if (StatusCargoAbono.countStatusCargoAbonoes() == 0) {
            dependencies.add(new String[] { "statuscargoabono", "statuscargoabonoes" });
        }
        uiModel.addAttribute("dependencies", dependencies);
        return "abonoes/create";
    }
    
    @RequestMapping(value = "/{id}", produces = "text/html")
    public String AbonoController.show(@PathVariable("id") Long id, Model uiModel) {
        addDateTimeFormatPatterns(uiModel);
        uiModel.addAttribute("abono", Abono.findAbono(id));
        uiModel.addAttribute("itemId", id);
        return "abonoes/show";
    }
    
    @RequestMapping(produces = "text/html")
    public String AbonoController.list(@RequestParam(value = "page", required = false) Integer page, @RequestParam(value = "size", required = false) Integer size, @RequestParam(value = "sortFieldName", required = false) String sortFieldName, @RequestParam(value = "sortOrder", required = false) String sortOrder, Model uiModel) {
        if (page != null || size != null) {
            int sizeNo = size == null ? 10 : size.intValue();
            final int firstResult = page == null ? 0 : (page.intValue() - 1) * sizeNo;
            uiModel.addAttribute("abonoes", Abono.findAbonoEntries(firstResult, sizeNo, sortFieldName, sortOrder));
            float nrOfPages = (float) Abono.countAbonoes() / sizeNo;
            uiModel.addAttribute("maxPages", (int) ((nrOfPages > (int) nrOfPages || nrOfPages == 0.0) ? nrOfPages + 1 : nrOfPages));
        } else {
            uiModel.addAttribute("abonoes", Abono.findAllAbonoes(sortFieldName, sortOrder));
        }
        addDateTimeFormatPatterns(uiModel);
        return "abonoes/list";
    }
    
    @RequestMapping(method = RequestMethod.PUT, produces = "text/html")
    public String AbonoController.update(@Valid Abono abono, BindingResult bindingResult, Model uiModel, HttpServletRequest httpServletRequest) {
        if (bindingResult.hasErrors()) {
            populateEditForm(uiModel, abono);
            return "abonoes/update";
        }
        uiModel.asMap().clear();
        abono.merge();
        return "redirect:/abonoes/" + encodeUrlPathSegment(abono.getId().toString(), httpServletRequest);
    }
    
    @RequestMapping(value = "/{id}", params = "form", produces = "text/html")
    public String AbonoController.updateForm(@PathVariable("id") Long id, Model uiModel) {
        populateEditForm(uiModel, Abono.findAbono(id));
        return "abonoes/update";
    }
    
    @RequestMapping(value = "/{id}", method = RequestMethod.DELETE, produces = "text/html")
    public String AbonoController.delete(@PathVariable("id") Long id, @RequestParam(value = "page", required = false) Integer page, @RequestParam(value = "size", required = false) Integer size, Model uiModel) {
        Abono abono = Abono.findAbono(id);
        abono.remove();
        uiModel.asMap().clear();
        uiModel.addAttribute("page", (page == null) ? "1" : page.toString());
        uiModel.addAttribute("size", (size == null) ? "10" : size.toString());
        return "redirect:/abonoes";
    }
    
    void AbonoController.addDateTimeFormatPatterns(Model uiModel) {
        uiModel.addAttribute("abono_fechacreacion_date_format", DateTimeFormat.patternForStyle("M-", LocaleContextHolder.getLocale()));
        uiModel.addAttribute("abono_fechamodificacion_date_format", DateTimeFormat.patternForStyle("M-", LocaleContextHolder.getLocale()));
    }
    
    void AbonoController.populateEditForm(Model uiModel, Abono abono) {
        uiModel.addAttribute("abono", abono);
        addDateTimeFormatPatterns(uiModel);
        uiModel.addAttribute("descuentoes", Descuento.findAllDescuentoes());
        uiModel.addAttribute("metodopagoes", MetodoPago.findAllMetodoPagoes());
        uiModel.addAttribute("statuscargoabonoes", StatusCargoAbono.findAllStatusCargoAbonoes());
        uiModel.addAttribute("cargoes", Cargo.findAllCargoes());
        uiModel.addAttribute("usuarios", Usuario.findAllUsuarios());
    }
    
    String AbonoController.encodeUrlPathSegment(String pathSegment, HttpServletRequest httpServletRequest) {
        String enc = httpServletRequest.getCharacterEncoding();
        if (enc == null) {
            enc = WebUtils.DEFAULT_CHARACTER_ENCODING;
        }
        try {
            pathSegment = UriUtils.encodePathSegment(pathSegment, enc);
        } catch (UnsupportedEncodingException uee) {}
        return pathSegment;
    }
    
}
