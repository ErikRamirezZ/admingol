// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.raze.admingol.controller;

import com.raze.admingol.catalog.Posicion;
import com.raze.admingol.catalog.StatusEquipoJugador;
import com.raze.admingol.controller.JugadorController;
import com.raze.admingol.domain.Equipo;
import com.raze.admingol.domain.Jugador;
import java.util.List;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.util.UriComponentsBuilder;

privileged aspect JugadorController_Roo_Controller_Json {
    
    @RequestMapping(value = "/{id}", method = RequestMethod.GET, headers = "Accept=application/json")
    @ResponseBody
    public ResponseEntity<String> JugadorController.showJson(@PathVariable("id") Long id) {
        Jugador jugador = Jugador.findJugador(id);
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/json; charset=utf-8");
        if (jugador == null) {
            return new ResponseEntity<String>(headers, HttpStatus.NOT_FOUND);
        }
        return new ResponseEntity<String>(jugador.toJson(), headers, HttpStatus.OK);
    }
    
    @RequestMapping(headers = "Accept=application/json")
    @ResponseBody
    public ResponseEntity<String> JugadorController.listJson() {
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/json; charset=utf-8");
        List<Jugador> result = Jugador.findAllJugadors();
        return new ResponseEntity<String>(Jugador.toJsonArray(result), headers, HttpStatus.OK);
    }
    
    @RequestMapping(method = RequestMethod.POST, headers = "Accept=application/json")
    public ResponseEntity<String> JugadorController.createFromJson(@RequestBody String json, UriComponentsBuilder uriBuilder) {
        Jugador jugador = Jugador.fromJsonToJugador(json);
        jugador.persist();
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/json");
        RequestMapping a = (RequestMapping) getClass().getAnnotation(RequestMapping.class);
        headers.add("Location",uriBuilder.path(a.value()[0]+"/"+jugador.getId().toString()).build().toUriString());
        return new ResponseEntity<String>(headers, HttpStatus.CREATED);
    }
    
    @RequestMapping(value = "/jsonArray", method = RequestMethod.POST, headers = "Accept=application/json")
    public ResponseEntity<String> JugadorController.createFromJsonArray(@RequestBody String json) {
        for (Jugador jugador: Jugador.fromJsonArrayToJugadors(json)) {
            jugador.persist();
        }
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/json");
        return new ResponseEntity<String>(headers, HttpStatus.CREATED);
    }
    
    @RequestMapping(value = "/{id}", method = RequestMethod.PUT, headers = "Accept=application/json")
    public ResponseEntity<String> JugadorController.updateFromJson(@RequestBody String json, @PathVariable("id") Long id) {
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/json");
        Jugador jugador = Jugador.fromJsonToJugador(json);
        jugador.setId(id);
        if (jugador.merge() == null) {
            return new ResponseEntity<String>(headers, HttpStatus.NOT_FOUND);
        }
        return new ResponseEntity<String>(headers, HttpStatus.OK);
    }
    
    @RequestMapping(value = "/{id}", method = RequestMethod.DELETE, headers = "Accept=application/json")
    public ResponseEntity<String> JugadorController.deleteFromJson(@PathVariable("id") Long id) {
        Jugador jugador = Jugador.findJugador(id);
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/json");
        if (jugador == null) {
            return new ResponseEntity<String>(headers, HttpStatus.NOT_FOUND);
        }
        jugador.remove();
        return new ResponseEntity<String>(headers, HttpStatus.OK);
    }
    
    @RequestMapping(params = "find=ByEquipoAndActivo", headers = "Accept=application/json")
    @ResponseBody
    public ResponseEntity<String> JugadorController.jsonFindJugadorsByEquipoAndActivo(@RequestParam("equipo") Equipo equipo, @RequestParam(value = "activo", required = false) Boolean activo) {
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/json; charset=utf-8");
        return new ResponseEntity<String>(Jugador.toJsonArray(Jugador.findJugadorsByEquipoAndActivo(equipo, activo == null ? Boolean.FALSE : activo).getResultList()), headers, HttpStatus.OK);
    }
    
    @RequestMapping(params = "find=ByEquipoAndEsDelegadoAndActivo", headers = "Accept=application/json")
    @ResponseBody
    public ResponseEntity<String> JugadorController.jsonFindJugadorsByEquipoAndEsDelegadoAndActivo(@RequestParam("equipo") Equipo equipo, @RequestParam(value = "esDelegado", required = false) Boolean esDelegado, @RequestParam(value = "activo", required = false) Boolean activo) {
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/json; charset=utf-8");
        return new ResponseEntity<String>(Jugador.toJsonArray(Jugador.findJugadorsByEquipoAndEsDelegadoAndActivo(equipo, esDelegado == null ? Boolean.FALSE : esDelegado, activo == null ? Boolean.FALSE : activo).getResultList()), headers, HttpStatus.OK);
    }
    
    @RequestMapping(params = "find=ByEquipoAndNombreLikeAndActivo", headers = "Accept=application/json")
    @ResponseBody
    public ResponseEntity<String> JugadorController.jsonFindJugadorsByEquipoAndNombreLikeAndActivo(@RequestParam("equipo") Equipo equipo, @RequestParam("nombre") String nombre, @RequestParam(value = "activo", required = false) Boolean activo) {
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/json; charset=utf-8");
        return new ResponseEntity<String>(Jugador.toJsonArray(Jugador.findJugadorsByEquipoAndNombreLikeAndActivo(equipo, nombre, activo == null ? Boolean.FALSE : activo).getResultList()), headers, HttpStatus.OK);
    }
    
    @RequestMapping(params = "find=ByEquipoAndNombreLikeAndApellidoPaternoLikeAndActivo", headers = "Accept=application/json")
    @ResponseBody
    public ResponseEntity<String> JugadorController.jsonFindJugadorsByEquipoAndNombreLikeAndApellidoPaternoLikeAndActivo(@RequestParam("equipo") Equipo equipo, @RequestParam("nombre") String nombre, @RequestParam("apellidoPaterno") String apellidoPaterno, @RequestParam(value = "activo", required = false) Boolean activo) {
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/json; charset=utf-8");
        return new ResponseEntity<String>(Jugador.toJsonArray(Jugador.findJugadorsByEquipoAndNombreLikeAndApellidoPaternoLikeAndActivo(equipo, nombre, apellidoPaterno, activo == null ? Boolean.FALSE : activo).getResultList()), headers, HttpStatus.OK);
    }
    
    @RequestMapping(params = "find=ByEquipoAndPosicionAndActivo", headers = "Accept=application/json")
    @ResponseBody
    public ResponseEntity<String> JugadorController.jsonFindJugadorsByEquipoAndPosicionAndActivo(@RequestParam("equipo") Equipo equipo, @RequestParam("posicion") Posicion posicion, @RequestParam(value = "activo", required = false) Boolean activo) {
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/json; charset=utf-8");
        return new ResponseEntity<String>(Jugador.toJsonArray(Jugador.findJugadorsByEquipoAndPosicionAndActivo(equipo, posicion, activo == null ? Boolean.FALSE : activo).getResultList()), headers, HttpStatus.OK);
    }
    
    @RequestMapping(params = "find=ByEquipoAndStatusAndActivo", headers = "Accept=application/json")
    @ResponseBody
    public ResponseEntity<String> JugadorController.jsonFindJugadorsByEquipoAndStatusAndActivo(@RequestParam("equipo") Equipo equipo, @RequestParam("status") StatusEquipoJugador status, @RequestParam(value = "activo", required = false) Boolean activo) {
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/json; charset=utf-8");
        return new ResponseEntity<String>(Jugador.toJsonArray(Jugador.findJugadorsByEquipoAndStatusAndActivo(equipo, status, activo == null ? Boolean.FALSE : activo).getResultList()), headers, HttpStatus.OK);
    }
    
}
