// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.raze.admingol.controller;

import com.raze.admingol.catalog.Descuento;
import com.raze.admingol.catalog.MetodoPago;
import com.raze.admingol.catalog.StatusCargoAbono;
import com.raze.admingol.controller.AbonoController;
import com.raze.admingol.domain.Abono;
import com.raze.admingol.domain.Cargo;
import java.util.Date;
import java.util.List;
import org.springframework.format.annotation.DateTimeFormat;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.util.UriComponentsBuilder;

privileged aspect AbonoController_Roo_Controller_Json {
    
    @RequestMapping(value = "/{id}", method = RequestMethod.GET, headers = "Accept=application/json")
    @ResponseBody
    public ResponseEntity<String> AbonoController.showJson(@PathVariable("id") Long id) {
        Abono abono = Abono.findAbono(id);
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/json; charset=utf-8");
        if (abono == null) {
            return new ResponseEntity<String>(headers, HttpStatus.NOT_FOUND);
        }
        return new ResponseEntity<String>(abono.toJson(), headers, HttpStatus.OK);
    }
    
    @RequestMapping(headers = "Accept=application/json")
    @ResponseBody
    public ResponseEntity<String> AbonoController.listJson() {
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/json; charset=utf-8");
        List<Abono> result = Abono.findAllAbonoes();
        return new ResponseEntity<String>(Abono.toJsonArray(result), headers, HttpStatus.OK);
    }
    
    @RequestMapping(method = RequestMethod.POST, headers = "Accept=application/json")
    public ResponseEntity<String> AbonoController.createFromJson(@RequestBody String json, UriComponentsBuilder uriBuilder) {
        Abono abono = Abono.fromJsonToAbono(json);
        abono.persist();
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/json");
        RequestMapping a = (RequestMapping) getClass().getAnnotation(RequestMapping.class);
        headers.add("Location",uriBuilder.path(a.value()[0]+"/"+abono.getId().toString()).build().toUriString());
        return new ResponseEntity<String>(headers, HttpStatus.CREATED);
    }
    
    @RequestMapping(value = "/jsonArray", method = RequestMethod.POST, headers = "Accept=application/json")
    public ResponseEntity<String> AbonoController.createFromJsonArray(@RequestBody String json) {
        for (Abono abono: Abono.fromJsonArrayToAbonoes(json)) {
            abono.persist();
        }
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/json");
        return new ResponseEntity<String>(headers, HttpStatus.CREATED);
    }
    
    @RequestMapping(value = "/{id}", method = RequestMethod.PUT, headers = "Accept=application/json")
    public ResponseEntity<String> AbonoController.updateFromJson(@RequestBody String json, @PathVariable("id") Long id) {
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/json");
        Abono abono = Abono.fromJsonToAbono(json);
        abono.setId(id);
        if (abono.merge() == null) {
            return new ResponseEntity<String>(headers, HttpStatus.NOT_FOUND);
        }
        return new ResponseEntity<String>(headers, HttpStatus.OK);
    }
    
    @RequestMapping(value = "/{id}", method = RequestMethod.DELETE, headers = "Accept=application/json")
    public ResponseEntity<String> AbonoController.deleteFromJson(@PathVariable("id") Long id) {
        Abono abono = Abono.findAbono(id);
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/json");
        if (abono == null) {
            return new ResponseEntity<String>(headers, HttpStatus.NOT_FOUND);
        }
        abono.remove();
        return new ResponseEntity<String>(headers, HttpStatus.OK);
    }
    
    @RequestMapping(params = "find=ByCargoAndFechaCreacionBetween", headers = "Accept=application/json")
    @ResponseBody
    public ResponseEntity<String> AbonoController.jsonFindAbonoesByCargoAndFechaCreacionBetween(@RequestParam("cargo") Cargo cargo, @RequestParam("minFechaCreacion") @DateTimeFormat(style = "M-") Date minFechaCreacion, @RequestParam("maxFechaCreacion") @DateTimeFormat(style = "M-") Date maxFechaCreacion) {
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/json; charset=utf-8");
        return new ResponseEntity<String>(Abono.toJsonArray(Abono.findAbonoesByCargoAndFechaCreacionBetween(cargo, minFechaCreacion, maxFechaCreacion).getResultList()), headers, HttpStatus.OK);
    }
    
    @RequestMapping(params = "find=ByDescuentoAndFechaCreacionBetween", headers = "Accept=application/json")
    @ResponseBody
    public ResponseEntity<String> AbonoController.jsonFindAbonoesByDescuentoAndFechaCreacionBetween(@RequestParam("descuento") Descuento descuento, @RequestParam("minFechaCreacion") @DateTimeFormat(style = "M-") Date minFechaCreacion, @RequestParam("maxFechaCreacion") @DateTimeFormat(style = "M-") Date maxFechaCreacion) {
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/json; charset=utf-8");
        return new ResponseEntity<String>(Abono.toJsonArray(Abono.findAbonoesByDescuentoAndFechaCreacionBetween(descuento, minFechaCreacion, maxFechaCreacion).getResultList()), headers, HttpStatus.OK);
    }
    
    @RequestMapping(params = "find=ByMetodoPagoAndFechaCreacionBetween", headers = "Accept=application/json")
    @ResponseBody
    public ResponseEntity<String> AbonoController.jsonFindAbonoesByMetodoPagoAndFechaCreacionBetween(@RequestParam("metodoPago") MetodoPago metodoPago, @RequestParam("minFechaCreacion") @DateTimeFormat(style = "M-") Date minFechaCreacion, @RequestParam("maxFechaCreacion") @DateTimeFormat(style = "M-") Date maxFechaCreacion) {
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/json; charset=utf-8");
        return new ResponseEntity<String>(Abono.toJsonArray(Abono.findAbonoesByMetodoPagoAndFechaCreacionBetween(metodoPago, minFechaCreacion, maxFechaCreacion).getResultList()), headers, HttpStatus.OK);
    }
    
    @RequestMapping(params = "find=ByStatusAndFechaCreacionBetween", headers = "Accept=application/json")
    @ResponseBody
    public ResponseEntity<String> AbonoController.jsonFindAbonoesByStatusAndFechaCreacionBetween(@RequestParam("status") StatusCargoAbono status, @RequestParam("minFechaCreacion") @DateTimeFormat(style = "M-") Date minFechaCreacion, @RequestParam("maxFechaCreacion") @DateTimeFormat(style = "M-") Date maxFechaCreacion) {
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/json; charset=utf-8");
        return new ResponseEntity<String>(Abono.toJsonArray(Abono.findAbonoesByStatusAndFechaCreacionBetween(status, minFechaCreacion, maxFechaCreacion).getResultList()), headers, HttpStatus.OK);
    }
    
}
