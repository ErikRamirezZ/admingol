// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.raze.admingol.controller;

import com.raze.admingol.catalog.TipoCobro;
import com.raze.admingol.controller.ConfiguracionTorneoController;
import com.raze.admingol.domain.ConfiguracionTorneo;
import com.raze.admingol.domain.Torneo;
import java.util.List;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.util.UriComponentsBuilder;

privileged aspect ConfiguracionTorneoController_Roo_Controller_Json {
    
    @RequestMapping(value = "/{id}", method = RequestMethod.GET, headers = "Accept=application/json")
    @ResponseBody
    public ResponseEntity<String> ConfiguracionTorneoController.showJson(@PathVariable("id") Long id) {
        ConfiguracionTorneo configuracionTorneo = ConfiguracionTorneo.findConfiguracionTorneo(id);
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/json; charset=utf-8");
        if (configuracionTorneo == null) {
            return new ResponseEntity<String>(headers, HttpStatus.NOT_FOUND);
        }
        return new ResponseEntity<String>(configuracionTorneo.toJson(), headers, HttpStatus.OK);
    }
    
    @RequestMapping(headers = "Accept=application/json")
    @ResponseBody
    public ResponseEntity<String> ConfiguracionTorneoController.listJson() {
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/json; charset=utf-8");
        List<ConfiguracionTorneo> result = ConfiguracionTorneo.findAllConfiguracionTorneos();
        return new ResponseEntity<String>(ConfiguracionTorneo.toJsonArray(result), headers, HttpStatus.OK);
    }
    
    @RequestMapping(method = RequestMethod.POST, headers = "Accept=application/json")
    public ResponseEntity<String> ConfiguracionTorneoController.createFromJson(@RequestBody String json, UriComponentsBuilder uriBuilder) {
        ConfiguracionTorneo configuracionTorneo = ConfiguracionTorneo.fromJsonToConfiguracionTorneo(json);
        configuracionTorneo.persist();
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/json");
        RequestMapping a = (RequestMapping) getClass().getAnnotation(RequestMapping.class);
        headers.add("Location",uriBuilder.path(a.value()[0]+"/"+configuracionTorneo.getId().toString()).build().toUriString());
        return new ResponseEntity<String>(headers, HttpStatus.CREATED);
    }
    
    @RequestMapping(value = "/jsonArray", method = RequestMethod.POST, headers = "Accept=application/json")
    public ResponseEntity<String> ConfiguracionTorneoController.createFromJsonArray(@RequestBody String json) {
        for (ConfiguracionTorneo configuracionTorneo: ConfiguracionTorneo.fromJsonArrayToConfiguracionTorneos(json)) {
            configuracionTorneo.persist();
        }
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/json");
        return new ResponseEntity<String>(headers, HttpStatus.CREATED);
    }
    
    @RequestMapping(value = "/{id}", method = RequestMethod.PUT, headers = "Accept=application/json")
    public ResponseEntity<String> ConfiguracionTorneoController.updateFromJson(@RequestBody String json, @PathVariable("id") Long id) {
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/json");
        ConfiguracionTorneo configuracionTorneo = ConfiguracionTorneo.fromJsonToConfiguracionTorneo(json);
        configuracionTorneo.setId(id);
        if (configuracionTorneo.merge() == null) {
            return new ResponseEntity<String>(headers, HttpStatus.NOT_FOUND);
        }
        return new ResponseEntity<String>(headers, HttpStatus.OK);
    }
    
    @RequestMapping(value = "/{id}", method = RequestMethod.DELETE, headers = "Accept=application/json")
    public ResponseEntity<String> ConfiguracionTorneoController.deleteFromJson(@PathVariable("id") Long id) {
        ConfiguracionTorneo configuracionTorneo = ConfiguracionTorneo.findConfiguracionTorneo(id);
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/json");
        if (configuracionTorneo == null) {
            return new ResponseEntity<String>(headers, HttpStatus.NOT_FOUND);
        }
        configuracionTorneo.remove();
        return new ResponseEntity<String>(headers, HttpStatus.OK);
    }
    
    @RequestMapping(params = "find=ByInscripcionAndActivo", headers = "Accept=application/json")
    @ResponseBody
    public ResponseEntity<String> ConfiguracionTorneoController.jsonFindConfiguracionTorneosByInscripcionAndActivo(@RequestParam(value = "inscripcion", required = false) Boolean inscripcion, @RequestParam(value = "activo", required = false) Boolean activo) {
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/json; charset=utf-8");
        return new ResponseEntity<String>(ConfiguracionTorneo.toJsonArray(ConfiguracionTorneo.findConfiguracionTorneosByInscripcionAndActivo(inscripcion == null ? Boolean.FALSE : inscripcion, activo == null ? Boolean.FALSE : activo).getResultList()), headers, HttpStatus.OK);
    }
    
    @RequestMapping(params = "find=ByTipoCobroAndActivo", headers = "Accept=application/json")
    @ResponseBody
    public ResponseEntity<String> ConfiguracionTorneoController.jsonFindConfiguracionTorneosByTipoCobroAndActivo(@RequestParam("tipoCobro") TipoCobro tipoCobro, @RequestParam(value = "activo", required = false) Boolean activo) {
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/json; charset=utf-8");
        return new ResponseEntity<String>(ConfiguracionTorneo.toJsonArray(ConfiguracionTorneo.findConfiguracionTorneosByTipoCobroAndActivo(tipoCobro, activo == null ? Boolean.FALSE : activo).getResultList()), headers, HttpStatus.OK);
    }
    
    @RequestMapping(params = "find=ByTorneoAndActivo", headers = "Accept=application/json")
    @ResponseBody
    public ResponseEntity<String> ConfiguracionTorneoController.jsonFindConfiguracionTorneosByTorneoAndActivo(@RequestParam("torneo") Torneo torneo, @RequestParam(value = "activo", required = false) Boolean activo) {
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/json; charset=utf-8");
        return new ResponseEntity<String>(ConfiguracionTorneo.toJsonArray(ConfiguracionTorneo.findConfiguracionTorneosByTorneoAndActivo(torneo, activo == null ? Boolean.FALSE : activo).getResultList()), headers, HttpStatus.OK);
    }
    
}
