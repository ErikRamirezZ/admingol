// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.raze.admingol.controller;

import com.raze.admingol.catalog.Rol;
import com.raze.admingol.controller.UsuarioController;
import com.raze.admingol.domain.Empresa;
import com.raze.admingol.domain.Usuario;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;

privileged aspect UsuarioController_Roo_Controller_Finder {
    
    @RequestMapping(params = { "find=ByApellidoPaternoLike", "form" }, method = RequestMethod.GET)
    public String UsuarioController.findUsuariosByApellidoPaternoLikeForm(Model uiModel) {
        return "usuarios/findUsuariosByApellidoPaternoLike";
    }
    
    @RequestMapping(params = "find=ByApellidoPaternoLike", method = RequestMethod.GET)
    public String UsuarioController.findUsuariosByApellidoPaternoLike(@RequestParam("apellidoPaterno") String apellidoPaterno, @RequestParam(value = "page", required = false) Integer page, @RequestParam(value = "size", required = false) Integer size, @RequestParam(value = "sortFieldName", required = false) String sortFieldName, @RequestParam(value = "sortOrder", required = false) String sortOrder, Model uiModel) {
        if (page != null || size != null) {
            int sizeNo = size == null ? 10 : size.intValue();
            final int firstResult = page == null ? 0 : (page.intValue() - 1) * sizeNo;
            uiModel.addAttribute("usuarios", Usuario.findUsuariosByApellidoPaternoLike(apellidoPaterno, sortFieldName, sortOrder).setFirstResult(firstResult).setMaxResults(sizeNo).getResultList());
            float nrOfPages = (float) Usuario.countFindUsuariosByApellidoPaternoLike(apellidoPaterno) / sizeNo;
            uiModel.addAttribute("maxPages", (int) ((nrOfPages > (int) nrOfPages || nrOfPages == 0.0) ? nrOfPages + 1 : nrOfPages));
        } else {
            uiModel.addAttribute("usuarios", Usuario.findUsuariosByApellidoPaternoLike(apellidoPaterno, sortFieldName, sortOrder).getResultList());
        }
        addDateTimeFormatPatterns(uiModel);
        return "usuarios/list";
    }
    
    @RequestMapping(params = { "find=ByEmpresaAndActivo", "form" }, method = RequestMethod.GET)
    public String UsuarioController.findUsuariosByEmpresaAndActivoForm(Model uiModel) {
        uiModel.addAttribute("empresas", Empresa.findAllEmpresas());
        return "usuarios/findUsuariosByEmpresaAndActivo";
    }
    
    @RequestMapping(params = "find=ByEmpresaAndActivo", method = RequestMethod.GET)
    public String UsuarioController.findUsuariosByEmpresaAndActivo(@RequestParam("empresa") Empresa empresa, @RequestParam(value = "activo", required = false) Boolean activo, @RequestParam(value = "page", required = false) Integer page, @RequestParam(value = "size", required = false) Integer size, @RequestParam(value = "sortFieldName", required = false) String sortFieldName, @RequestParam(value = "sortOrder", required = false) String sortOrder, Model uiModel) {
        if (page != null || size != null) {
            int sizeNo = size == null ? 10 : size.intValue();
            final int firstResult = page == null ? 0 : (page.intValue() - 1) * sizeNo;
            uiModel.addAttribute("usuarios", Usuario.findUsuariosByEmpresaAndActivo(empresa, activo == null ? Boolean.FALSE : activo, sortFieldName, sortOrder).setFirstResult(firstResult).setMaxResults(sizeNo).getResultList());
            float nrOfPages = (float) Usuario.countFindUsuariosByEmpresaAndActivo(empresa, activo == null ? Boolean.FALSE : activo) / sizeNo;
            uiModel.addAttribute("maxPages", (int) ((nrOfPages > (int) nrOfPages || nrOfPages == 0.0) ? nrOfPages + 1 : nrOfPages));
        } else {
            uiModel.addAttribute("usuarios", Usuario.findUsuariosByEmpresaAndActivo(empresa, activo == null ? Boolean.FALSE : activo, sortFieldName, sortOrder).getResultList());
        }
        addDateTimeFormatPatterns(uiModel);
        return "usuarios/list";
    }
    
    @RequestMapping(params = { "find=ByEmpresaAndNombreLikeAndActivo", "form" }, method = RequestMethod.GET)
    public String UsuarioController.findUsuariosByEmpresaAndNombreLikeAndActivoForm(Model uiModel) {
        uiModel.addAttribute("empresas", Empresa.findAllEmpresas());
        return "usuarios/findUsuariosByEmpresaAndNombreLikeAndActivo";
    }
    
    @RequestMapping(params = "find=ByEmpresaAndNombreLikeAndActivo", method = RequestMethod.GET)
    public String UsuarioController.findUsuariosByEmpresaAndNombreLikeAndActivo(@RequestParam("empresa") Empresa empresa, @RequestParam("nombre") String nombre, @RequestParam(value = "activo", required = false) Boolean activo, @RequestParam(value = "page", required = false) Integer page, @RequestParam(value = "size", required = false) Integer size, @RequestParam(value = "sortFieldName", required = false) String sortFieldName, @RequestParam(value = "sortOrder", required = false) String sortOrder, Model uiModel) {
        if (page != null || size != null) {
            int sizeNo = size == null ? 10 : size.intValue();
            final int firstResult = page == null ? 0 : (page.intValue() - 1) * sizeNo;
            uiModel.addAttribute("usuarios", Usuario.findUsuariosByEmpresaAndNombreLikeAndActivo(empresa, nombre, activo == null ? Boolean.FALSE : activo, sortFieldName, sortOrder).setFirstResult(firstResult).setMaxResults(sizeNo).getResultList());
            float nrOfPages = (float) Usuario.countFindUsuariosByEmpresaAndNombreLikeAndActivo(empresa, nombre, activo == null ? Boolean.FALSE : activo) / sizeNo;
            uiModel.addAttribute("maxPages", (int) ((nrOfPages > (int) nrOfPages || nrOfPages == 0.0) ? nrOfPages + 1 : nrOfPages));
        } else {
            uiModel.addAttribute("usuarios", Usuario.findUsuariosByEmpresaAndNombreLikeAndActivo(empresa, nombre, activo == null ? Boolean.FALSE : activo, sortFieldName, sortOrder).getResultList());
        }
        addDateTimeFormatPatterns(uiModel);
        return "usuarios/list";
    }
    
    @RequestMapping(params = { "find=ByRolAndActivo", "form" }, method = RequestMethod.GET)
    public String UsuarioController.findUsuariosByRolAndActivoForm(Model uiModel) {
        uiModel.addAttribute("rols", Rol.findAllRols());
        return "usuarios/findUsuariosByRolAndActivo";
    }
    
    @RequestMapping(params = "find=ByRolAndActivo", method = RequestMethod.GET)
    public String UsuarioController.findUsuariosByRolAndActivo(@RequestParam("rol") Rol rol, @RequestParam(value = "activo", required = false) Boolean activo, @RequestParam(value = "page", required = false) Integer page, @RequestParam(value = "size", required = false) Integer size, @RequestParam(value = "sortFieldName", required = false) String sortFieldName, @RequestParam(value = "sortOrder", required = false) String sortOrder, Model uiModel) {
        if (page != null || size != null) {
            int sizeNo = size == null ? 10 : size.intValue();
            final int firstResult = page == null ? 0 : (page.intValue() - 1) * sizeNo;
            uiModel.addAttribute("usuarios", Usuario.findUsuariosByRolAndActivo(rol, activo == null ? Boolean.FALSE : activo, sortFieldName, sortOrder).setFirstResult(firstResult).setMaxResults(sizeNo).getResultList());
            float nrOfPages = (float) Usuario.countFindUsuariosByRolAndActivo(rol, activo == null ? Boolean.FALSE : activo) / sizeNo;
            uiModel.addAttribute("maxPages", (int) ((nrOfPages > (int) nrOfPages || nrOfPages == 0.0) ? nrOfPages + 1 : nrOfPages));
        } else {
            uiModel.addAttribute("usuarios", Usuario.findUsuariosByRolAndActivo(rol, activo == null ? Boolean.FALSE : activo, sortFieldName, sortOrder).getResultList());
        }
        addDateTimeFormatPatterns(uiModel);
        return "usuarios/list";
    }
    
}
