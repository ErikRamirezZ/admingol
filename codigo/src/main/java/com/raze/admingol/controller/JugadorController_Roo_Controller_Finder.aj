// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.raze.admingol.controller;

import com.raze.admingol.catalog.Posicion;
import com.raze.admingol.catalog.StatusEquipoJugador;
import com.raze.admingol.controller.JugadorController;
import com.raze.admingol.domain.Equipo;
import com.raze.admingol.domain.Jugador;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;

privileged aspect JugadorController_Roo_Controller_Finder {
    
    @RequestMapping(params = { "find=ByEquipoAndActivo", "form" }, method = RequestMethod.GET)
    public String JugadorController.findJugadorsByEquipoAndActivoForm(Model uiModel) {
        uiModel.addAttribute("equipoes", Equipo.findAllEquipoes());
        return "jugadors/findJugadorsByEquipoAndActivo";
    }
    
    @RequestMapping(params = "find=ByEquipoAndActivo", method = RequestMethod.GET)
    public String JugadorController.findJugadorsByEquipoAndActivo(@RequestParam("equipo") Equipo equipo, @RequestParam(value = "activo", required = false) Boolean activo, @RequestParam(value = "page", required = false) Integer page, @RequestParam(value = "size", required = false) Integer size, @RequestParam(value = "sortFieldName", required = false) String sortFieldName, @RequestParam(value = "sortOrder", required = false) String sortOrder, Model uiModel) {
        if (page != null || size != null) {
            int sizeNo = size == null ? 10 : size.intValue();
            final int firstResult = page == null ? 0 : (page.intValue() - 1) * sizeNo;
            uiModel.addAttribute("jugadors", Jugador.findJugadorsByEquipoAndActivo(equipo, activo == null ? Boolean.FALSE : activo, sortFieldName, sortOrder).setFirstResult(firstResult).setMaxResults(sizeNo).getResultList());
            float nrOfPages = (float) Jugador.countFindJugadorsByEquipoAndActivo(equipo, activo == null ? Boolean.FALSE : activo) / sizeNo;
            uiModel.addAttribute("maxPages", (int) ((nrOfPages > (int) nrOfPages || nrOfPages == 0.0) ? nrOfPages + 1 : nrOfPages));
        } else {
            uiModel.addAttribute("jugadors", Jugador.findJugadorsByEquipoAndActivo(equipo, activo == null ? Boolean.FALSE : activo, sortFieldName, sortOrder).getResultList());
        }
        addDateTimeFormatPatterns(uiModel);
        return "jugadors/list";
    }
    
    @RequestMapping(params = { "find=ByEquipoAndEsDelegadoAndActivo", "form" }, method = RequestMethod.GET)
    public String JugadorController.findJugadorsByEquipoAndEsDelegadoAndActivoForm(Model uiModel) {
        uiModel.addAttribute("equipoes", Equipo.findAllEquipoes());
        return "jugadors/findJugadorsByEquipoAndEsDelegadoAndActivo";
    }
    
    @RequestMapping(params = "find=ByEquipoAndEsDelegadoAndActivo", method = RequestMethod.GET)
    public String JugadorController.findJugadorsByEquipoAndEsDelegadoAndActivo(@RequestParam("equipo") Equipo equipo, @RequestParam(value = "esDelegado", required = false) Boolean esDelegado, @RequestParam(value = "activo", required = false) Boolean activo, @RequestParam(value = "page", required = false) Integer page, @RequestParam(value = "size", required = false) Integer size, @RequestParam(value = "sortFieldName", required = false) String sortFieldName, @RequestParam(value = "sortOrder", required = false) String sortOrder, Model uiModel) {
        if (page != null || size != null) {
            int sizeNo = size == null ? 10 : size.intValue();
            final int firstResult = page == null ? 0 : (page.intValue() - 1) * sizeNo;
            uiModel.addAttribute("jugadors", Jugador.findJugadorsByEquipoAndEsDelegadoAndActivo(equipo, esDelegado == null ? Boolean.FALSE : esDelegado, activo == null ? Boolean.FALSE : activo, sortFieldName, sortOrder).setFirstResult(firstResult).setMaxResults(sizeNo).getResultList());
            float nrOfPages = (float) Jugador.countFindJugadorsByEquipoAndEsDelegadoAndActivo(equipo, esDelegado == null ? Boolean.FALSE : esDelegado, activo == null ? Boolean.FALSE : activo) / sizeNo;
            uiModel.addAttribute("maxPages", (int) ((nrOfPages > (int) nrOfPages || nrOfPages == 0.0) ? nrOfPages + 1 : nrOfPages));
        } else {
            uiModel.addAttribute("jugadors", Jugador.findJugadorsByEquipoAndEsDelegadoAndActivo(equipo, esDelegado == null ? Boolean.FALSE : esDelegado, activo == null ? Boolean.FALSE : activo, sortFieldName, sortOrder).getResultList());
        }
        addDateTimeFormatPatterns(uiModel);
        return "jugadors/list";
    }
    
    @RequestMapping(params = { "find=ByEquipoAndNombreLikeAndActivo", "form" }, method = RequestMethod.GET)
    public String JugadorController.findJugadorsByEquipoAndNombreLikeAndActivoForm(Model uiModel) {
        uiModel.addAttribute("equipoes", Equipo.findAllEquipoes());
        return "jugadors/findJugadorsByEquipoAndNombreLikeAndActivo";
    }
    
    @RequestMapping(params = "find=ByEquipoAndNombreLikeAndActivo", method = RequestMethod.GET)
    public String JugadorController.findJugadorsByEquipoAndNombreLikeAndActivo(@RequestParam("equipo") Equipo equipo, @RequestParam("nombre") String nombre, @RequestParam(value = "activo", required = false) Boolean activo, @RequestParam(value = "page", required = false) Integer page, @RequestParam(value = "size", required = false) Integer size, @RequestParam(value = "sortFieldName", required = false) String sortFieldName, @RequestParam(value = "sortOrder", required = false) String sortOrder, Model uiModel) {
        if (page != null || size != null) {
            int sizeNo = size == null ? 10 : size.intValue();
            final int firstResult = page == null ? 0 : (page.intValue() - 1) * sizeNo;
            uiModel.addAttribute("jugadors", Jugador.findJugadorsByEquipoAndNombreLikeAndActivo(equipo, nombre, activo == null ? Boolean.FALSE : activo, sortFieldName, sortOrder).setFirstResult(firstResult).setMaxResults(sizeNo).getResultList());
            float nrOfPages = (float) Jugador.countFindJugadorsByEquipoAndNombreLikeAndActivo(equipo, nombre, activo == null ? Boolean.FALSE : activo) / sizeNo;
            uiModel.addAttribute("maxPages", (int) ((nrOfPages > (int) nrOfPages || nrOfPages == 0.0) ? nrOfPages + 1 : nrOfPages));
        } else {
            uiModel.addAttribute("jugadors", Jugador.findJugadorsByEquipoAndNombreLikeAndActivo(equipo, nombre, activo == null ? Boolean.FALSE : activo, sortFieldName, sortOrder).getResultList());
        }
        addDateTimeFormatPatterns(uiModel);
        return "jugadors/list";
    }
    
    @RequestMapping(params = { "find=ByEquipoAndNombreLikeAndApellidoPaternoLikeAndActivo", "form" }, method = RequestMethod.GET)
    public String JugadorController.findJugadorsByEquipoAndNombreLikeAndApellidoPaternoLikeAndActivoForm(Model uiModel) {
        uiModel.addAttribute("equipoes", Equipo.findAllEquipoes());
        return "jugadors/findJugadorsByEquipoAndNombreLikeAndApellidoPaternoLikeAndActivo";
    }
    
    @RequestMapping(params = "find=ByEquipoAndNombreLikeAndApellidoPaternoLikeAndActivo", method = RequestMethod.GET)
    public String JugadorController.findJugadorsByEquipoAndNombreLikeAndApellidoPaternoLikeAndActivo(@RequestParam("equipo") Equipo equipo, @RequestParam("nombre") String nombre, @RequestParam("apellidoPaterno") String apellidoPaterno, @RequestParam(value = "activo", required = false) Boolean activo, @RequestParam(value = "page", required = false) Integer page, @RequestParam(value = "size", required = false) Integer size, @RequestParam(value = "sortFieldName", required = false) String sortFieldName, @RequestParam(value = "sortOrder", required = false) String sortOrder, Model uiModel) {
        if (page != null || size != null) {
            int sizeNo = size == null ? 10 : size.intValue();
            final int firstResult = page == null ? 0 : (page.intValue() - 1) * sizeNo;
            uiModel.addAttribute("jugadors", Jugador.findJugadorsByEquipoAndNombreLikeAndApellidoPaternoLikeAndActivo(equipo, nombre, apellidoPaterno, activo == null ? Boolean.FALSE : activo, sortFieldName, sortOrder).setFirstResult(firstResult).setMaxResults(sizeNo).getResultList());
            float nrOfPages = (float) Jugador.countFindJugadorsByEquipoAndNombreLikeAndApellidoPaternoLikeAndActivo(equipo, nombre, apellidoPaterno, activo == null ? Boolean.FALSE : activo) / sizeNo;
            uiModel.addAttribute("maxPages", (int) ((nrOfPages > (int) nrOfPages || nrOfPages == 0.0) ? nrOfPages + 1 : nrOfPages));
        } else {
            uiModel.addAttribute("jugadors", Jugador.findJugadorsByEquipoAndNombreLikeAndApellidoPaternoLikeAndActivo(equipo, nombre, apellidoPaterno, activo == null ? Boolean.FALSE : activo, sortFieldName, sortOrder).getResultList());
        }
        addDateTimeFormatPatterns(uiModel);
        return "jugadors/list";
    }
    
    @RequestMapping(params = { "find=ByEquipoAndPosicionAndActivo", "form" }, method = RequestMethod.GET)
    public String JugadorController.findJugadorsByEquipoAndPosicionAndActivoForm(Model uiModel) {
        uiModel.addAttribute("equipoes", Equipo.findAllEquipoes());
        uiModel.addAttribute("posicions", Posicion.findAllPosicions());
        return "jugadors/findJugadorsByEquipoAndPosicionAndActivo";
    }
    
    @RequestMapping(params = "find=ByEquipoAndPosicionAndActivo", method = RequestMethod.GET)
    public String JugadorController.findJugadorsByEquipoAndPosicionAndActivo(@RequestParam("equipo") Equipo equipo, @RequestParam("posicion") Posicion posicion, @RequestParam(value = "activo", required = false) Boolean activo, @RequestParam(value = "page", required = false) Integer page, @RequestParam(value = "size", required = false) Integer size, @RequestParam(value = "sortFieldName", required = false) String sortFieldName, @RequestParam(value = "sortOrder", required = false) String sortOrder, Model uiModel) {
        if (page != null || size != null) {
            int sizeNo = size == null ? 10 : size.intValue();
            final int firstResult = page == null ? 0 : (page.intValue() - 1) * sizeNo;
            uiModel.addAttribute("jugadors", Jugador.findJugadorsByEquipoAndPosicionAndActivo(equipo, posicion, activo == null ? Boolean.FALSE : activo, sortFieldName, sortOrder).setFirstResult(firstResult).setMaxResults(sizeNo).getResultList());
            float nrOfPages = (float) Jugador.countFindJugadorsByEquipoAndPosicionAndActivo(equipo, posicion, activo == null ? Boolean.FALSE : activo) / sizeNo;
            uiModel.addAttribute("maxPages", (int) ((nrOfPages > (int) nrOfPages || nrOfPages == 0.0) ? nrOfPages + 1 : nrOfPages));
        } else {
            uiModel.addAttribute("jugadors", Jugador.findJugadorsByEquipoAndPosicionAndActivo(equipo, posicion, activo == null ? Boolean.FALSE : activo, sortFieldName, sortOrder).getResultList());
        }
        addDateTimeFormatPatterns(uiModel);
        return "jugadors/list";
    }
    
    @RequestMapping(params = { "find=ByEquipoAndStatusAndActivo", "form" }, method = RequestMethod.GET)
    public String JugadorController.findJugadorsByEquipoAndStatusAndActivoForm(Model uiModel) {
        uiModel.addAttribute("equipoes", Equipo.findAllEquipoes());
        uiModel.addAttribute("statusequipojugadors", StatusEquipoJugador.findAllStatusEquipoJugadors());
        return "jugadors/findJugadorsByEquipoAndStatusAndActivo";
    }
    
    @RequestMapping(params = "find=ByEquipoAndStatusAndActivo", method = RequestMethod.GET)
    public String JugadorController.findJugadorsByEquipoAndStatusAndActivo(@RequestParam("equipo") Equipo equipo, @RequestParam("status") StatusEquipoJugador status, @RequestParam(value = "activo", required = false) Boolean activo, @RequestParam(value = "page", required = false) Integer page, @RequestParam(value = "size", required = false) Integer size, @RequestParam(value = "sortFieldName", required = false) String sortFieldName, @RequestParam(value = "sortOrder", required = false) String sortOrder, Model uiModel) {
        if (page != null || size != null) {
            int sizeNo = size == null ? 10 : size.intValue();
            final int firstResult = page == null ? 0 : (page.intValue() - 1) * sizeNo;
            uiModel.addAttribute("jugadors", Jugador.findJugadorsByEquipoAndStatusAndActivo(equipo, status, activo == null ? Boolean.FALSE : activo, sortFieldName, sortOrder).setFirstResult(firstResult).setMaxResults(sizeNo).getResultList());
            float nrOfPages = (float) Jugador.countFindJugadorsByEquipoAndStatusAndActivo(equipo, status, activo == null ? Boolean.FALSE : activo) / sizeNo;
            uiModel.addAttribute("maxPages", (int) ((nrOfPages > (int) nrOfPages || nrOfPages == 0.0) ? nrOfPages + 1 : nrOfPages));
        } else {
            uiModel.addAttribute("jugadors", Jugador.findJugadorsByEquipoAndStatusAndActivo(equipo, status, activo == null ? Boolean.FALSE : activo, sortFieldName, sortOrder).getResultList());
        }
        addDateTimeFormatPatterns(uiModel);
        return "jugadors/list";
    }
    
}
