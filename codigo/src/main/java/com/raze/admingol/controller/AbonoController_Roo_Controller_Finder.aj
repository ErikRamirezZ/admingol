// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.raze.admingol.controller;

import com.raze.admingol.catalog.Descuento;
import com.raze.admingol.catalog.MetodoPago;
import com.raze.admingol.catalog.StatusCargoAbono;
import com.raze.admingol.controller.AbonoController;
import com.raze.admingol.domain.Abono;
import com.raze.admingol.domain.Cargo;
import java.util.Date;
import org.springframework.format.annotation.DateTimeFormat;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;

privileged aspect AbonoController_Roo_Controller_Finder {
    
    @RequestMapping(params = { "find=ByCargoAndFechaCreacionBetween", "form" }, method = RequestMethod.GET)
    public String AbonoController.findAbonoesByCargoAndFechaCreacionBetweenForm(Model uiModel) {
        uiModel.addAttribute("cargoes", Cargo.findAllCargoes());
        addDateTimeFormatPatterns(uiModel);
        return "abonoes/findAbonoesByCargoAndFechaCreacionBetween";
    }
    
    @RequestMapping(params = "find=ByCargoAndFechaCreacionBetween", method = RequestMethod.GET)
    public String AbonoController.findAbonoesByCargoAndFechaCreacionBetween(@RequestParam("cargo") Cargo cargo, @RequestParam("minFechaCreacion") @DateTimeFormat(style = "M-") Date minFechaCreacion, @RequestParam("maxFechaCreacion") @DateTimeFormat(style = "M-") Date maxFechaCreacion, @RequestParam(value = "page", required = false) Integer page, @RequestParam(value = "size", required = false) Integer size, @RequestParam(value = "sortFieldName", required = false) String sortFieldName, @RequestParam(value = "sortOrder", required = false) String sortOrder, Model uiModel) {
        if (page != null || size != null) {
            int sizeNo = size == null ? 10 : size.intValue();
            final int firstResult = page == null ? 0 : (page.intValue() - 1) * sizeNo;
            uiModel.addAttribute("abonoes", Abono.findAbonoesByCargoAndFechaCreacionBetween(cargo, minFechaCreacion, maxFechaCreacion, sortFieldName, sortOrder).setFirstResult(firstResult).setMaxResults(sizeNo).getResultList());
            float nrOfPages = (float) Abono.countFindAbonoesByCargoAndFechaCreacionBetween(cargo, minFechaCreacion, maxFechaCreacion) / sizeNo;
            uiModel.addAttribute("maxPages", (int) ((nrOfPages > (int) nrOfPages || nrOfPages == 0.0) ? nrOfPages + 1 : nrOfPages));
        } else {
            uiModel.addAttribute("abonoes", Abono.findAbonoesByCargoAndFechaCreacionBetween(cargo, minFechaCreacion, maxFechaCreacion, sortFieldName, sortOrder).getResultList());
        }
        addDateTimeFormatPatterns(uiModel);
        return "abonoes/list";
    }
    
    @RequestMapping(params = { "find=ByDescuentoAndFechaCreacionBetween", "form" }, method = RequestMethod.GET)
    public String AbonoController.findAbonoesByDescuentoAndFechaCreacionBetweenForm(Model uiModel) {
        uiModel.addAttribute("descuentoes", Descuento.findAllDescuentoes());
        addDateTimeFormatPatterns(uiModel);
        return "abonoes/findAbonoesByDescuentoAndFechaCreacionBetween";
    }
    
    @RequestMapping(params = "find=ByDescuentoAndFechaCreacionBetween", method = RequestMethod.GET)
    public String AbonoController.findAbonoesByDescuentoAndFechaCreacionBetween(@RequestParam("descuento") Descuento descuento, @RequestParam("minFechaCreacion") @DateTimeFormat(style = "M-") Date minFechaCreacion, @RequestParam("maxFechaCreacion") @DateTimeFormat(style = "M-") Date maxFechaCreacion, @RequestParam(value = "page", required = false) Integer page, @RequestParam(value = "size", required = false) Integer size, @RequestParam(value = "sortFieldName", required = false) String sortFieldName, @RequestParam(value = "sortOrder", required = false) String sortOrder, Model uiModel) {
        if (page != null || size != null) {
            int sizeNo = size == null ? 10 : size.intValue();
            final int firstResult = page == null ? 0 : (page.intValue() - 1) * sizeNo;
            uiModel.addAttribute("abonoes", Abono.findAbonoesByDescuentoAndFechaCreacionBetween(descuento, minFechaCreacion, maxFechaCreacion, sortFieldName, sortOrder).setFirstResult(firstResult).setMaxResults(sizeNo).getResultList());
            float nrOfPages = (float) Abono.countFindAbonoesByDescuentoAndFechaCreacionBetween(descuento, minFechaCreacion, maxFechaCreacion) / sizeNo;
            uiModel.addAttribute("maxPages", (int) ((nrOfPages > (int) nrOfPages || nrOfPages == 0.0) ? nrOfPages + 1 : nrOfPages));
        } else {
            uiModel.addAttribute("abonoes", Abono.findAbonoesByDescuentoAndFechaCreacionBetween(descuento, minFechaCreacion, maxFechaCreacion, sortFieldName, sortOrder).getResultList());
        }
        addDateTimeFormatPatterns(uiModel);
        return "abonoes/list";
    }
    
    @RequestMapping(params = { "find=ByMetodoPagoAndFechaCreacionBetween", "form" }, method = RequestMethod.GET)
    public String AbonoController.findAbonoesByMetodoPagoAndFechaCreacionBetweenForm(Model uiModel) {
        uiModel.addAttribute("metodopagoes", MetodoPago.findAllMetodoPagoes());
        addDateTimeFormatPatterns(uiModel);
        return "abonoes/findAbonoesByMetodoPagoAndFechaCreacionBetween";
    }
    
    @RequestMapping(params = "find=ByMetodoPagoAndFechaCreacionBetween", method = RequestMethod.GET)
    public String AbonoController.findAbonoesByMetodoPagoAndFechaCreacionBetween(@RequestParam("metodoPago") MetodoPago metodoPago, @RequestParam("minFechaCreacion") @DateTimeFormat(style = "M-") Date minFechaCreacion, @RequestParam("maxFechaCreacion") @DateTimeFormat(style = "M-") Date maxFechaCreacion, @RequestParam(value = "page", required = false) Integer page, @RequestParam(value = "size", required = false) Integer size, @RequestParam(value = "sortFieldName", required = false) String sortFieldName, @RequestParam(value = "sortOrder", required = false) String sortOrder, Model uiModel) {
        if (page != null || size != null) {
            int sizeNo = size == null ? 10 : size.intValue();
            final int firstResult = page == null ? 0 : (page.intValue() - 1) * sizeNo;
            uiModel.addAttribute("abonoes", Abono.findAbonoesByMetodoPagoAndFechaCreacionBetween(metodoPago, minFechaCreacion, maxFechaCreacion, sortFieldName, sortOrder).setFirstResult(firstResult).setMaxResults(sizeNo).getResultList());
            float nrOfPages = (float) Abono.countFindAbonoesByMetodoPagoAndFechaCreacionBetween(metodoPago, minFechaCreacion, maxFechaCreacion) / sizeNo;
            uiModel.addAttribute("maxPages", (int) ((nrOfPages > (int) nrOfPages || nrOfPages == 0.0) ? nrOfPages + 1 : nrOfPages));
        } else {
            uiModel.addAttribute("abonoes", Abono.findAbonoesByMetodoPagoAndFechaCreacionBetween(metodoPago, minFechaCreacion, maxFechaCreacion, sortFieldName, sortOrder).getResultList());
        }
        addDateTimeFormatPatterns(uiModel);
        return "abonoes/list";
    }
    
    @RequestMapping(params = { "find=ByStatusAndFechaCreacionBetween", "form" }, method = RequestMethod.GET)
    public String AbonoController.findAbonoesByStatusAndFechaCreacionBetweenForm(Model uiModel) {
        uiModel.addAttribute("statuscargoabonoes", StatusCargoAbono.findAllStatusCargoAbonoes());
        addDateTimeFormatPatterns(uiModel);
        return "abonoes/findAbonoesByStatusAndFechaCreacionBetween";
    }
    
    @RequestMapping(params = "find=ByStatusAndFechaCreacionBetween", method = RequestMethod.GET)
    public String AbonoController.findAbonoesByStatusAndFechaCreacionBetween(@RequestParam("status") StatusCargoAbono status, @RequestParam("minFechaCreacion") @DateTimeFormat(style = "M-") Date minFechaCreacion, @RequestParam("maxFechaCreacion") @DateTimeFormat(style = "M-") Date maxFechaCreacion, @RequestParam(value = "page", required = false) Integer page, @RequestParam(value = "size", required = false) Integer size, @RequestParam(value = "sortFieldName", required = false) String sortFieldName, @RequestParam(value = "sortOrder", required = false) String sortOrder, Model uiModel) {
        if (page != null || size != null) {
            int sizeNo = size == null ? 10 : size.intValue();
            final int firstResult = page == null ? 0 : (page.intValue() - 1) * sizeNo;
            uiModel.addAttribute("abonoes", Abono.findAbonoesByStatusAndFechaCreacionBetween(status, minFechaCreacion, maxFechaCreacion, sortFieldName, sortOrder).setFirstResult(firstResult).setMaxResults(sizeNo).getResultList());
            float nrOfPages = (float) Abono.countFindAbonoesByStatusAndFechaCreacionBetween(status, minFechaCreacion, maxFechaCreacion) / sizeNo;
            uiModel.addAttribute("maxPages", (int) ((nrOfPages > (int) nrOfPages || nrOfPages == 0.0) ? nrOfPages + 1 : nrOfPages));
        } else {
            uiModel.addAttribute("abonoes", Abono.findAbonoesByStatusAndFechaCreacionBetween(status, minFechaCreacion, maxFechaCreacion, sortFieldName, sortOrder).getResultList());
        }
        addDateTimeFormatPatterns(uiModel);
        return "abonoes/list";
    }
    
}
