// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.raze.admingol.controller;

import com.raze.admingol.controller.TorneoEquipoController;
import com.raze.admingol.domain.Equipo;
import com.raze.admingol.domain.Torneo;
import com.raze.admingol.domain.TorneoEquipo;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;

privileged aspect TorneoEquipoController_Roo_Controller_Finder {
    
    @RequestMapping(params = { "find=ByEquipo", "form" }, method = RequestMethod.GET)
    public String TorneoEquipoController.findTorneoEquipoesByEquipoForm(Model uiModel) {
        uiModel.addAttribute("equipoes", Equipo.findAllEquipoes());
        return "torneoequipoes/findTorneoEquipoesByEquipo";
    }
    
    @RequestMapping(params = "find=ByEquipo", method = RequestMethod.GET)
    public String TorneoEquipoController.findTorneoEquipoesByEquipo(@RequestParam("equipo") Equipo equipo, @RequestParam(value = "page", required = false) Integer page, @RequestParam(value = "size", required = false) Integer size, @RequestParam(value = "sortFieldName", required = false) String sortFieldName, @RequestParam(value = "sortOrder", required = false) String sortOrder, Model uiModel) {
        if (page != null || size != null) {
            int sizeNo = size == null ? 10 : size.intValue();
            final int firstResult = page == null ? 0 : (page.intValue() - 1) * sizeNo;
            uiModel.addAttribute("torneoequipoes", TorneoEquipo.findTorneoEquipoesByEquipo(equipo, sortFieldName, sortOrder).setFirstResult(firstResult).setMaxResults(sizeNo).getResultList());
            float nrOfPages = (float) TorneoEquipo.countFindTorneoEquipoesByEquipo(equipo) / sizeNo;
            uiModel.addAttribute("maxPages", (int) ((nrOfPages > (int) nrOfPages || nrOfPages == 0.0) ? nrOfPages + 1 : nrOfPages));
        } else {
            uiModel.addAttribute("torneoequipoes", TorneoEquipo.findTorneoEquipoesByEquipo(equipo, sortFieldName, sortOrder).getResultList());
        }
        addDateTimeFormatPatterns(uiModel);
        return "torneoequipoes/list";
    }
    
    @RequestMapping(params = { "find=ByTorneo", "form" }, method = RequestMethod.GET)
    public String TorneoEquipoController.findTorneoEquipoesByTorneoForm(Model uiModel) {
        uiModel.addAttribute("torneos", Torneo.findAllTorneos());
        return "torneoequipoes/findTorneoEquipoesByTorneo";
    }
    
    @RequestMapping(params = "find=ByTorneo", method = RequestMethod.GET)
    public String TorneoEquipoController.findTorneoEquipoesByTorneo(@RequestParam("torneo") Torneo torneo, @RequestParam(value = "page", required = false) Integer page, @RequestParam(value = "size", required = false) Integer size, @RequestParam(value = "sortFieldName", required = false) String sortFieldName, @RequestParam(value = "sortOrder", required = false) String sortOrder, Model uiModel) {
        if (page != null || size != null) {
            int sizeNo = size == null ? 10 : size.intValue();
            final int firstResult = page == null ? 0 : (page.intValue() - 1) * sizeNo;
            uiModel.addAttribute("torneoequipoes", TorneoEquipo.findTorneoEquipoesByTorneo(torneo, sortFieldName, sortOrder).setFirstResult(firstResult).setMaxResults(sizeNo).getResultList());
            float nrOfPages = (float) TorneoEquipo.countFindTorneoEquipoesByTorneo(torneo) / sizeNo;
            uiModel.addAttribute("maxPages", (int) ((nrOfPages > (int) nrOfPages || nrOfPages == 0.0) ? nrOfPages + 1 : nrOfPages));
        } else {
            uiModel.addAttribute("torneoequipoes", TorneoEquipo.findTorneoEquipoesByTorneo(torneo, sortFieldName, sortOrder).getResultList());
        }
        addDateTimeFormatPatterns(uiModel);
        return "torneoequipoes/list";
    }
    
}
