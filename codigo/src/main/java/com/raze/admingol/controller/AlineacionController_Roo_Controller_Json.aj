// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.raze.admingol.controller;

import com.raze.admingol.controller.AlineacionController;
import com.raze.admingol.domain.Alineacion;
import com.raze.admingol.domain.Jugador;
import com.raze.admingol.domain.Partido;
import java.util.Date;
import java.util.List;
import org.springframework.format.annotation.DateTimeFormat;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.util.UriComponentsBuilder;

privileged aspect AlineacionController_Roo_Controller_Json {
    
    @RequestMapping(value = "/{id}", method = RequestMethod.GET, headers = "Accept=application/json")
    @ResponseBody
    public ResponseEntity<String> AlineacionController.showJson(@PathVariable("id") Long id) {
        Alineacion alineacion = Alineacion.findAlineacion(id);
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/json; charset=utf-8");
        if (alineacion == null) {
            return new ResponseEntity<String>(headers, HttpStatus.NOT_FOUND);
        }
        return new ResponseEntity<String>(alineacion.toJson(), headers, HttpStatus.OK);
    }
    
    @RequestMapping(headers = "Accept=application/json")
    @ResponseBody
    public ResponseEntity<String> AlineacionController.listJson() {
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/json; charset=utf-8");
        List<Alineacion> result = Alineacion.findAllAlineacions();
        return new ResponseEntity<String>(Alineacion.toJsonArray(result), headers, HttpStatus.OK);
    }
    
    @RequestMapping(method = RequestMethod.POST, headers = "Accept=application/json")
    public ResponseEntity<String> AlineacionController.createFromJson(@RequestBody String json, UriComponentsBuilder uriBuilder) {
        Alineacion alineacion = Alineacion.fromJsonToAlineacion(json);
        alineacion.persist();
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/json");
        RequestMapping a = (RequestMapping) getClass().getAnnotation(RequestMapping.class);
        headers.add("Location",uriBuilder.path(a.value()[0]+"/"+alineacion.getId().toString()).build().toUriString());
        return new ResponseEntity<String>(headers, HttpStatus.CREATED);
    }
    
    @RequestMapping(value = "/jsonArray", method = RequestMethod.POST, headers = "Accept=application/json")
    public ResponseEntity<String> AlineacionController.createFromJsonArray(@RequestBody String json) {
        for (Alineacion alineacion: Alineacion.fromJsonArrayToAlineacions(json)) {
            alineacion.persist();
        }
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/json");
        return new ResponseEntity<String>(headers, HttpStatus.CREATED);
    }
    
    @RequestMapping(value = "/{id}", method = RequestMethod.PUT, headers = "Accept=application/json")
    public ResponseEntity<String> AlineacionController.updateFromJson(@RequestBody String json, @PathVariable("id") Long id) {
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/json");
        Alineacion alineacion = Alineacion.fromJsonToAlineacion(json);
        alineacion.setId(id);
        if (alineacion.merge() == null) {
            return new ResponseEntity<String>(headers, HttpStatus.NOT_FOUND);
        }
        return new ResponseEntity<String>(headers, HttpStatus.OK);
    }
    
    @RequestMapping(value = "/{id}", method = RequestMethod.DELETE, headers = "Accept=application/json")
    public ResponseEntity<String> AlineacionController.deleteFromJson(@PathVariable("id") Long id) {
        Alineacion alineacion = Alineacion.findAlineacion(id);
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/json");
        if (alineacion == null) {
            return new ResponseEntity<String>(headers, HttpStatus.NOT_FOUND);
        }
        alineacion.remove();
        return new ResponseEntity<String>(headers, HttpStatus.OK);
    }
    
    @RequestMapping(params = "find=ByJugador", headers = "Accept=application/json")
    @ResponseBody
    public ResponseEntity<String> AlineacionController.jsonFindAlineacionsByJugador(@RequestParam("jugador") Jugador jugador) {
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/json; charset=utf-8");
        return new ResponseEntity<String>(Alineacion.toJsonArray(Alineacion.findAlineacionsByJugador(jugador).getResultList()), headers, HttpStatus.OK);
    }
    
    @RequestMapping(params = "find=ByJugadorAndFechaCreacionBetween", headers = "Accept=application/json")
    @ResponseBody
    public ResponseEntity<String> AlineacionController.jsonFindAlineacionsByJugadorAndFechaCreacionBetween(@RequestParam("jugador") Jugador jugador, @RequestParam("minFechaCreacion") @DateTimeFormat(style = "M-") Date minFechaCreacion, @RequestParam("maxFechaCreacion") @DateTimeFormat(style = "M-") Date maxFechaCreacion) {
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/json; charset=utf-8");
        return new ResponseEntity<String>(Alineacion.toJsonArray(Alineacion.findAlineacionsByJugadorAndFechaCreacionBetween(jugador, minFechaCreacion, maxFechaCreacion).getResultList()), headers, HttpStatus.OK);
    }
    
    @RequestMapping(params = "find=ByPartido", headers = "Accept=application/json")
    @ResponseBody
    public ResponseEntity<String> AlineacionController.jsonFindAlineacionsByPartido(@RequestParam("partido") Partido partido) {
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/json; charset=utf-8");
        return new ResponseEntity<String>(Alineacion.toJsonArray(Alineacion.findAlineacionsByPartido(partido).getResultList()), headers, HttpStatus.OK);
    }
    
    @RequestMapping(params = "find=ByPartidoAndFechaCreacionBetween", headers = "Accept=application/json")
    @ResponseBody
    public ResponseEntity<String> AlineacionController.jsonFindAlineacionsByPartidoAndFechaCreacionBetween(@RequestParam("partido") Partido partido, @RequestParam("minFechaCreacion") @DateTimeFormat(style = "M-") Date minFechaCreacion, @RequestParam("maxFechaCreacion") @DateTimeFormat(style = "M-") Date maxFechaCreacion) {
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/json; charset=utf-8");
        return new ResponseEntity<String>(Alineacion.toJsonArray(Alineacion.findAlineacionsByPartidoAndFechaCreacionBetween(partido, minFechaCreacion, maxFechaCreacion).getResultList()), headers, HttpStatus.OK);
    }
    
}
