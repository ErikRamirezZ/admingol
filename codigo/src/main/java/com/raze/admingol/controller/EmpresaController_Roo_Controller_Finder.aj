// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.raze.admingol.controller;

import com.raze.admingol.controller.EmpresaController;
import com.raze.admingol.domain.Empresa;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;

privileged aspect EmpresaController_Roo_Controller_Finder {
    
    @RequestMapping(params = { "find=ByActivo", "form" }, method = RequestMethod.GET)
    public String EmpresaController.findEmpresasByActivoForm(Model uiModel) {
        return "empresas/findEmpresasByActivo";
    }
    
    @RequestMapping(params = "find=ByActivo", method = RequestMethod.GET)
    public String EmpresaController.findEmpresasByActivo(@RequestParam(value = "activo", required = false) Boolean activo, @RequestParam(value = "page", required = false) Integer page, @RequestParam(value = "size", required = false) Integer size, @RequestParam(value = "sortFieldName", required = false) String sortFieldName, @RequestParam(value = "sortOrder", required = false) String sortOrder, Model uiModel) {
        if (page != null || size != null) {
            int sizeNo = size == null ? 10 : size.intValue();
            final int firstResult = page == null ? 0 : (page.intValue() - 1) * sizeNo;
            uiModel.addAttribute("empresas", Empresa.findEmpresasByActivo(activo == null ? Boolean.FALSE : activo, sortFieldName, sortOrder).setFirstResult(firstResult).setMaxResults(sizeNo).getResultList());
            float nrOfPages = (float) Empresa.countFindEmpresasByActivo(activo == null ? Boolean.FALSE : activo) / sizeNo;
            uiModel.addAttribute("maxPages", (int) ((nrOfPages > (int) nrOfPages || nrOfPages == 0.0) ? nrOfPages + 1 : nrOfPages));
        } else {
            uiModel.addAttribute("empresas", Empresa.findEmpresasByActivo(activo == null ? Boolean.FALSE : activo, sortFieldName, sortOrder).getResultList());
        }
        addDateTimeFormatPatterns(uiModel);
        return "empresas/list";
    }
    
    @RequestMapping(params = { "find=ByNombreComercialLikeAndActivo", "form" }, method = RequestMethod.GET)
    public String EmpresaController.findEmpresasByNombreComercialLikeAndActivoForm(Model uiModel) {
        return "empresas/findEmpresasByNombreComercialLikeAndActivo";
    }
    
    @RequestMapping(params = "find=ByNombreComercialLikeAndActivo", method = RequestMethod.GET)
    public String EmpresaController.findEmpresasByNombreComercialLikeAndActivo(@RequestParam("nombreComercial") String nombreComercial, @RequestParam(value = "activo", required = false) Boolean activo, @RequestParam(value = "page", required = false) Integer page, @RequestParam(value = "size", required = false) Integer size, @RequestParam(value = "sortFieldName", required = false) String sortFieldName, @RequestParam(value = "sortOrder", required = false) String sortOrder, Model uiModel) {
        if (page != null || size != null) {
            int sizeNo = size == null ? 10 : size.intValue();
            final int firstResult = page == null ? 0 : (page.intValue() - 1) * sizeNo;
            uiModel.addAttribute("empresas", Empresa.findEmpresasByNombreComercialLikeAndActivo(nombreComercial, activo == null ? Boolean.FALSE : activo, sortFieldName, sortOrder).setFirstResult(firstResult).setMaxResults(sizeNo).getResultList());
            float nrOfPages = (float) Empresa.countFindEmpresasByNombreComercialLikeAndActivo(nombreComercial, activo == null ? Boolean.FALSE : activo) / sizeNo;
            uiModel.addAttribute("maxPages", (int) ((nrOfPages > (int) nrOfPages || nrOfPages == 0.0) ? nrOfPages + 1 : nrOfPages));
        } else {
            uiModel.addAttribute("empresas", Empresa.findEmpresasByNombreComercialLikeAndActivo(nombreComercial, activo == null ? Boolean.FALSE : activo, sortFieldName, sortOrder).getResultList());
        }
        addDateTimeFormatPatterns(uiModel);
        return "empresas/list";
    }
    
    @RequestMapping(params = { "find=ByNombreLikeAndActivo", "form" }, method = RequestMethod.GET)
    public String EmpresaController.findEmpresasByNombreLikeAndActivoForm(Model uiModel) {
        return "empresas/findEmpresasByNombreLikeAndActivo";
    }
    
    @RequestMapping(params = "find=ByNombreLikeAndActivo", method = RequestMethod.GET)
    public String EmpresaController.findEmpresasByNombreLikeAndActivo(@RequestParam("nombre") String nombre, @RequestParam(value = "activo", required = false) Boolean activo, @RequestParam(value = "page", required = false) Integer page, @RequestParam(value = "size", required = false) Integer size, @RequestParam(value = "sortFieldName", required = false) String sortFieldName, @RequestParam(value = "sortOrder", required = false) String sortOrder, Model uiModel) {
        if (page != null || size != null) {
            int sizeNo = size == null ? 10 : size.intValue();
            final int firstResult = page == null ? 0 : (page.intValue() - 1) * sizeNo;
            uiModel.addAttribute("empresas", Empresa.findEmpresasByNombreLikeAndActivo(nombre, activo == null ? Boolean.FALSE : activo, sortFieldName, sortOrder).setFirstResult(firstResult).setMaxResults(sizeNo).getResultList());
            float nrOfPages = (float) Empresa.countFindEmpresasByNombreLikeAndActivo(nombre, activo == null ? Boolean.FALSE : activo) / sizeNo;
            uiModel.addAttribute("maxPages", (int) ((nrOfPages > (int) nrOfPages || nrOfPages == 0.0) ? nrOfPages + 1 : nrOfPages));
        } else {
            uiModel.addAttribute("empresas", Empresa.findEmpresasByNombreLikeAndActivo(nombre, activo == null ? Boolean.FALSE : activo, sortFieldName, sortOrder).getResultList());
        }
        addDateTimeFormatPatterns(uiModel);
        return "empresas/list";
    }
    
}
