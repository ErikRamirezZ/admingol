// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.raze.admingol.controller;

import com.raze.admingol.catalog.ConceptoCobro;
import com.raze.admingol.catalog.StatusCargoAbono;
import com.raze.admingol.controller.CargoController;
import com.raze.admingol.domain.Cargo;
import com.raze.admingol.domain.Equipo;
import com.raze.admingol.domain.Torneo;
import java.util.Date;
import java.util.List;
import org.springframework.format.annotation.DateTimeFormat;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.util.UriComponentsBuilder;

privileged aspect CargoController_Roo_Controller_Json {
    
    @RequestMapping(value = "/{id}", method = RequestMethod.GET, headers = "Accept=application/json")
    @ResponseBody
    public ResponseEntity<String> CargoController.showJson(@PathVariable("id") Long id) {
        Cargo cargo = Cargo.findCargo(id);
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/json; charset=utf-8");
        if (cargo == null) {
            return new ResponseEntity<String>(headers, HttpStatus.NOT_FOUND);
        }
        return new ResponseEntity<String>(cargo.toJson(), headers, HttpStatus.OK);
    }
    
    @RequestMapping(headers = "Accept=application/json")
    @ResponseBody
    public ResponseEntity<String> CargoController.listJson() {
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/json; charset=utf-8");
        List<Cargo> result = Cargo.findAllCargoes();
        return new ResponseEntity<String>(Cargo.toJsonArray(result), headers, HttpStatus.OK);
    }
    
    @RequestMapping(method = RequestMethod.POST, headers = "Accept=application/json")
    public ResponseEntity<String> CargoController.createFromJson(@RequestBody String json, UriComponentsBuilder uriBuilder) {
        Cargo cargo = Cargo.fromJsonToCargo(json);
        cargo.persist();
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/json");
        RequestMapping a = (RequestMapping) getClass().getAnnotation(RequestMapping.class);
        headers.add("Location",uriBuilder.path(a.value()[0]+"/"+cargo.getId().toString()).build().toUriString());
        return new ResponseEntity<String>(headers, HttpStatus.CREATED);
    }
    
    @RequestMapping(value = "/jsonArray", method = RequestMethod.POST, headers = "Accept=application/json")
    public ResponseEntity<String> CargoController.createFromJsonArray(@RequestBody String json) {
        for (Cargo cargo: Cargo.fromJsonArrayToCargoes(json)) {
            cargo.persist();
        }
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/json");
        return new ResponseEntity<String>(headers, HttpStatus.CREATED);
    }
    
    @RequestMapping(value = "/{id}", method = RequestMethod.PUT, headers = "Accept=application/json")
    public ResponseEntity<String> CargoController.updateFromJson(@RequestBody String json, @PathVariable("id") Long id) {
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/json");
        Cargo cargo = Cargo.fromJsonToCargo(json);
        cargo.setId(id);
        if (cargo.merge() == null) {
            return new ResponseEntity<String>(headers, HttpStatus.NOT_FOUND);
        }
        return new ResponseEntity<String>(headers, HttpStatus.OK);
    }
    
    @RequestMapping(value = "/{id}", method = RequestMethod.DELETE, headers = "Accept=application/json")
    public ResponseEntity<String> CargoController.deleteFromJson(@PathVariable("id") Long id) {
        Cargo cargo = Cargo.findCargo(id);
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/json");
        if (cargo == null) {
            return new ResponseEntity<String>(headers, HttpStatus.NOT_FOUND);
        }
        cargo.remove();
        return new ResponseEntity<String>(headers, HttpStatus.OK);
    }
    
    @RequestMapping(params = "find=ByConceptoCobroAndFechaCreacionBetween", headers = "Accept=application/json")
    @ResponseBody
    public ResponseEntity<String> CargoController.jsonFindCargoesByConceptoCobroAndFechaCreacionBetween(@RequestParam("conceptoCobro") ConceptoCobro conceptoCobro, @RequestParam("minFechaCreacion") @DateTimeFormat(style = "M-") Date minFechaCreacion, @RequestParam("maxFechaCreacion") @DateTimeFormat(style = "M-") Date maxFechaCreacion) {
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/json; charset=utf-8");
        return new ResponseEntity<String>(Cargo.toJsonArray(Cargo.findCargoesByConceptoCobroAndFechaCreacionBetween(conceptoCobro, minFechaCreacion, maxFechaCreacion).getResultList()), headers, HttpStatus.OK);
    }
    
    @RequestMapping(params = "find=ByConceptoCobroAndStatus", headers = "Accept=application/json")
    @ResponseBody
    public ResponseEntity<String> CargoController.jsonFindCargoesByConceptoCobroAndStatus(@RequestParam("conceptoCobro") ConceptoCobro conceptoCobro, @RequestParam("status") StatusCargoAbono status) {
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/json; charset=utf-8");
        return new ResponseEntity<String>(Cargo.toJsonArray(Cargo.findCargoesByConceptoCobroAndStatus(conceptoCobro, status).getResultList()), headers, HttpStatus.OK);
    }
    
    @RequestMapping(params = "find=ByConceptoCobroAndTorneo", headers = "Accept=application/json")
    @ResponseBody
    public ResponseEntity<String> CargoController.jsonFindCargoesByConceptoCobroAndTorneo(@RequestParam("conceptoCobro") ConceptoCobro conceptoCobro, @RequestParam("torneo") Torneo torneo) {
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/json; charset=utf-8");
        return new ResponseEntity<String>(Cargo.toJsonArray(Cargo.findCargoesByConceptoCobroAndTorneo(conceptoCobro, torneo).getResultList()), headers, HttpStatus.OK);
    }
    
    @RequestMapping(params = "find=ByConceptoCobroAndTorneoAndEquipo", headers = "Accept=application/json")
    @ResponseBody
    public ResponseEntity<String> CargoController.jsonFindCargoesByConceptoCobroAndTorneoAndEquipo(@RequestParam("conceptoCobro") ConceptoCobro conceptoCobro, @RequestParam("torneo") Torneo torneo, @RequestParam("equipo") Equipo equipo) {
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/json; charset=utf-8");
        return new ResponseEntity<String>(Cargo.toJsonArray(Cargo.findCargoesByConceptoCobroAndTorneoAndEquipo(conceptoCobro, torneo, equipo).getResultList()), headers, HttpStatus.OK);
    }
    
    @RequestMapping(params = "find=ByConceptoCobroAndTorneoAndEquipoAndFechaModificacionBetween", headers = "Accept=application/json")
    @ResponseBody
    public ResponseEntity<String> CargoController.jsonFindCargoesByConceptoCobroAndTorneoAndEquipoAndFechaModificacionBetween(@RequestParam("conceptoCobro") ConceptoCobro conceptoCobro, @RequestParam("torneo") Torneo torneo, @RequestParam("equipo") Equipo equipo, @RequestParam("minFechaModificacion") @DateTimeFormat(style = "M-") Date minFechaModificacion, @RequestParam("maxFechaModificacion") @DateTimeFormat(style = "M-") Date maxFechaModificacion) {
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/json; charset=utf-8");
        return new ResponseEntity<String>(Cargo.toJsonArray(Cargo.findCargoesByConceptoCobroAndTorneoAndEquipoAndFechaModificacionBetween(conceptoCobro, torneo, equipo, minFechaModificacion, maxFechaModificacion).getResultList()), headers, HttpStatus.OK);
    }
    
    @RequestMapping(params = "find=ByConceptoCobroAndTorneoAndFechaModificacionBetween", headers = "Accept=application/json")
    @ResponseBody
    public ResponseEntity<String> CargoController.jsonFindCargoesByConceptoCobroAndTorneoAndFechaModificacionBetween(@RequestParam("conceptoCobro") ConceptoCobro conceptoCobro, @RequestParam("torneo") Torneo torneo, @RequestParam("minFechaModificacion") @DateTimeFormat(style = "M-") Date minFechaModificacion, @RequestParam("maxFechaModificacion") @DateTimeFormat(style = "M-") Date maxFechaModificacion) {
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/json; charset=utf-8");
        return new ResponseEntity<String>(Cargo.toJsonArray(Cargo.findCargoesByConceptoCobroAndTorneoAndFechaModificacionBetween(conceptoCobro, torneo, minFechaModificacion, maxFechaModificacion).getResultList()), headers, HttpStatus.OK);
    }
    
}
