// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.raze.admingol.controller;

import com.raze.admingol.catalog.FechaVencimientoTC;
import com.raze.admingol.catalog.TipoTarjeta;
import com.raze.admingol.controller.ControlPagoController;
import com.raze.admingol.domain.ControlPago;
import com.raze.admingol.domain.Empresa;
import com.raze.admingol.domain.Usuario;
import java.io.UnsupportedEncodingException;
import java.util.ArrayList;
import java.util.List;
import javax.servlet.http.HttpServletRequest;
import javax.validation.Valid;
import org.joda.time.format.DateTimeFormat;
import org.springframework.context.i18n.LocaleContextHolder;
import org.springframework.ui.Model;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.util.UriUtils;
import org.springframework.web.util.WebUtils;

privileged aspect ControlPagoController_Roo_Controller {
    
    @RequestMapping(method = RequestMethod.POST, produces = "text/html")
    public String ControlPagoController.create(@Valid ControlPago controlPago, BindingResult bindingResult, Model uiModel, HttpServletRequest httpServletRequest) {
        if (bindingResult.hasErrors()) {
            populateEditForm(uiModel, controlPago);
            return "controlpagoes/create";
        }
        uiModel.asMap().clear();
        controlPago.persist();
        return "redirect:/controlpagoes/" + encodeUrlPathSegment(controlPago.getId().toString(), httpServletRequest);
    }
    
    @RequestMapping(params = "form", produces = "text/html")
    public String ControlPagoController.createForm(Model uiModel) {
        populateEditForm(uiModel, new ControlPago());
        List<String[]> dependencies = new ArrayList<String[]>();
        if (Empresa.countEmpresas() == 0) {
            dependencies.add(new String[] { "empresa", "empresas" });
        }
        uiModel.addAttribute("dependencies", dependencies);
        return "controlpagoes/create";
    }
    
    @RequestMapping(value = "/{id}", produces = "text/html")
    public String ControlPagoController.show(@PathVariable("id") Long id, Model uiModel) {
        addDateTimeFormatPatterns(uiModel);
        uiModel.addAttribute("controlpago", ControlPago.findControlPago(id));
        uiModel.addAttribute("itemId", id);
        return "controlpagoes/show";
    }
    
    @RequestMapping(produces = "text/html")
    public String ControlPagoController.list(@RequestParam(value = "page", required = false) Integer page, @RequestParam(value = "size", required = false) Integer size, @RequestParam(value = "sortFieldName", required = false) String sortFieldName, @RequestParam(value = "sortOrder", required = false) String sortOrder, Model uiModel) {
        if (page != null || size != null) {
            int sizeNo = size == null ? 10 : size.intValue();
            final int firstResult = page == null ? 0 : (page.intValue() - 1) * sizeNo;
            uiModel.addAttribute("controlpagoes", ControlPago.findControlPagoEntries(firstResult, sizeNo, sortFieldName, sortOrder));
            float nrOfPages = (float) ControlPago.countControlPagoes() / sizeNo;
            uiModel.addAttribute("maxPages", (int) ((nrOfPages > (int) nrOfPages || nrOfPages == 0.0) ? nrOfPages + 1 : nrOfPages));
        } else {
            uiModel.addAttribute("controlpagoes", ControlPago.findAllControlPagoes(sortFieldName, sortOrder));
        }
        addDateTimeFormatPatterns(uiModel);
        return "controlpagoes/list";
    }
    
    @RequestMapping(method = RequestMethod.PUT, produces = "text/html")
    public String ControlPagoController.update(@Valid ControlPago controlPago, BindingResult bindingResult, Model uiModel, HttpServletRequest httpServletRequest) {
        if (bindingResult.hasErrors()) {
            populateEditForm(uiModel, controlPago);
            return "controlpagoes/update";
        }
        uiModel.asMap().clear();
        controlPago.merge();
        return "redirect:/controlpagoes/" + encodeUrlPathSegment(controlPago.getId().toString(), httpServletRequest);
    }
    
    @RequestMapping(value = "/{id}", params = "form", produces = "text/html")
    public String ControlPagoController.updateForm(@PathVariable("id") Long id, Model uiModel) {
        populateEditForm(uiModel, ControlPago.findControlPago(id));
        return "controlpagoes/update";
    }
    
    @RequestMapping(value = "/{id}", method = RequestMethod.DELETE, produces = "text/html")
    public String ControlPagoController.delete(@PathVariable("id") Long id, @RequestParam(value = "page", required = false) Integer page, @RequestParam(value = "size", required = false) Integer size, Model uiModel) {
        ControlPago controlPago = ControlPago.findControlPago(id);
        controlPago.remove();
        uiModel.asMap().clear();
        uiModel.addAttribute("page", (page == null) ? "1" : page.toString());
        uiModel.addAttribute("size", (size == null) ? "10" : size.toString());
        return "redirect:/controlpagoes";
    }
    
    void ControlPagoController.addDateTimeFormatPatterns(Model uiModel) {
        uiModel.addAttribute("controlPago_fechacreacion_date_format", DateTimeFormat.patternForStyle("M-", LocaleContextHolder.getLocale()));
        uiModel.addAttribute("controlPago_fechamodificacion_date_format", DateTimeFormat.patternForStyle("M-", LocaleContextHolder.getLocale()));
    }
    
    void ControlPagoController.populateEditForm(Model uiModel, ControlPago controlPago) {
        uiModel.addAttribute("controlPago", controlPago);
        addDateTimeFormatPatterns(uiModel);
        uiModel.addAttribute("fechavencimientotcs", FechaVencimientoTC.findAllFechaVencimientoTCs());
        uiModel.addAttribute("tipotarjetas", TipoTarjeta.findAllTipoTarjetas());
        uiModel.addAttribute("empresas", Empresa.findAllEmpresas());
        uiModel.addAttribute("usuarios", Usuario.findAllUsuarios());
    }
    
    String ControlPagoController.encodeUrlPathSegment(String pathSegment, HttpServletRequest httpServletRequest) {
        String enc = httpServletRequest.getCharacterEncoding();
        if (enc == null) {
            enc = WebUtils.DEFAULT_CHARACTER_ENCODING;
        }
        try {
            pathSegment = UriUtils.encodePathSegment(pathSegment, enc);
        } catch (UnsupportedEncodingException uee) {}
        return pathSegment;
    }
    
}
