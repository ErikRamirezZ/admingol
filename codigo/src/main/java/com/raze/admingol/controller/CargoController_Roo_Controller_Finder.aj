// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.raze.admingol.controller;

import com.raze.admingol.catalog.ConceptoCobro;
import com.raze.admingol.catalog.StatusCargoAbono;
import com.raze.admingol.controller.CargoController;
import com.raze.admingol.domain.Cargo;
import com.raze.admingol.domain.Equipo;
import com.raze.admingol.domain.Torneo;
import java.util.Date;
import org.springframework.format.annotation.DateTimeFormat;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;

privileged aspect CargoController_Roo_Controller_Finder {
    
    @RequestMapping(params = { "find=ByConceptoCobroAndFechaCreacionBetween", "form" }, method = RequestMethod.GET)
    public String CargoController.findCargoesByConceptoCobroAndFechaCreacionBetweenForm(Model uiModel) {
        uiModel.addAttribute("conceptocobroes", ConceptoCobro.findAllConceptoCobroes());
        addDateTimeFormatPatterns(uiModel);
        return "cargoes/findCargoesByConceptoCobroAndFechaCreacionBetween";
    }
    
    @RequestMapping(params = "find=ByConceptoCobroAndFechaCreacionBetween", method = RequestMethod.GET)
    public String CargoController.findCargoesByConceptoCobroAndFechaCreacionBetween(@RequestParam("conceptoCobro") ConceptoCobro conceptoCobro, @RequestParam("minFechaCreacion") @DateTimeFormat(style = "M-") Date minFechaCreacion, @RequestParam("maxFechaCreacion") @DateTimeFormat(style = "M-") Date maxFechaCreacion, @RequestParam(value = "page", required = false) Integer page, @RequestParam(value = "size", required = false) Integer size, @RequestParam(value = "sortFieldName", required = false) String sortFieldName, @RequestParam(value = "sortOrder", required = false) String sortOrder, Model uiModel) {
        if (page != null || size != null) {
            int sizeNo = size == null ? 10 : size.intValue();
            final int firstResult = page == null ? 0 : (page.intValue() - 1) * sizeNo;
            uiModel.addAttribute("cargoes", Cargo.findCargoesByConceptoCobroAndFechaCreacionBetween(conceptoCobro, minFechaCreacion, maxFechaCreacion, sortFieldName, sortOrder).setFirstResult(firstResult).setMaxResults(sizeNo).getResultList());
            float nrOfPages = (float) Cargo.countFindCargoesByConceptoCobroAndFechaCreacionBetween(conceptoCobro, minFechaCreacion, maxFechaCreacion) / sizeNo;
            uiModel.addAttribute("maxPages", (int) ((nrOfPages > (int) nrOfPages || nrOfPages == 0.0) ? nrOfPages + 1 : nrOfPages));
        } else {
            uiModel.addAttribute("cargoes", Cargo.findCargoesByConceptoCobroAndFechaCreacionBetween(conceptoCobro, minFechaCreacion, maxFechaCreacion, sortFieldName, sortOrder).getResultList());
        }
        addDateTimeFormatPatterns(uiModel);
        return "cargoes/list";
    }
    
    @RequestMapping(params = { "find=ByConceptoCobroAndStatus", "form" }, method = RequestMethod.GET)
    public String CargoController.findCargoesByConceptoCobroAndStatusForm(Model uiModel) {
        uiModel.addAttribute("conceptocobroes", ConceptoCobro.findAllConceptoCobroes());
        uiModel.addAttribute("statuscargoabonoes", StatusCargoAbono.findAllStatusCargoAbonoes());
        return "cargoes/findCargoesByConceptoCobroAndStatus";
    }
    
    @RequestMapping(params = "find=ByConceptoCobroAndStatus", method = RequestMethod.GET)
    public String CargoController.findCargoesByConceptoCobroAndStatus(@RequestParam("conceptoCobro") ConceptoCobro conceptoCobro, @RequestParam("status") StatusCargoAbono status, @RequestParam(value = "page", required = false) Integer page, @RequestParam(value = "size", required = false) Integer size, @RequestParam(value = "sortFieldName", required = false) String sortFieldName, @RequestParam(value = "sortOrder", required = false) String sortOrder, Model uiModel) {
        if (page != null || size != null) {
            int sizeNo = size == null ? 10 : size.intValue();
            final int firstResult = page == null ? 0 : (page.intValue() - 1) * sizeNo;
            uiModel.addAttribute("cargoes", Cargo.findCargoesByConceptoCobroAndStatus(conceptoCobro, status, sortFieldName, sortOrder).setFirstResult(firstResult).setMaxResults(sizeNo).getResultList());
            float nrOfPages = (float) Cargo.countFindCargoesByConceptoCobroAndStatus(conceptoCobro, status) / sizeNo;
            uiModel.addAttribute("maxPages", (int) ((nrOfPages > (int) nrOfPages || nrOfPages == 0.0) ? nrOfPages + 1 : nrOfPages));
        } else {
            uiModel.addAttribute("cargoes", Cargo.findCargoesByConceptoCobroAndStatus(conceptoCobro, status, sortFieldName, sortOrder).getResultList());
        }
        addDateTimeFormatPatterns(uiModel);
        return "cargoes/list";
    }
    
    @RequestMapping(params = { "find=ByConceptoCobroAndTorneo", "form" }, method = RequestMethod.GET)
    public String CargoController.findCargoesByConceptoCobroAndTorneoForm(Model uiModel) {
        uiModel.addAttribute("conceptocobroes", ConceptoCobro.findAllConceptoCobroes());
        uiModel.addAttribute("torneos", Torneo.findAllTorneos());
        return "cargoes/findCargoesByConceptoCobroAndTorneo";
    }
    
    @RequestMapping(params = "find=ByConceptoCobroAndTorneo", method = RequestMethod.GET)
    public String CargoController.findCargoesByConceptoCobroAndTorneo(@RequestParam("conceptoCobro") ConceptoCobro conceptoCobro, @RequestParam("torneo") Torneo torneo, @RequestParam(value = "page", required = false) Integer page, @RequestParam(value = "size", required = false) Integer size, @RequestParam(value = "sortFieldName", required = false) String sortFieldName, @RequestParam(value = "sortOrder", required = false) String sortOrder, Model uiModel) {
        if (page != null || size != null) {
            int sizeNo = size == null ? 10 : size.intValue();
            final int firstResult = page == null ? 0 : (page.intValue() - 1) * sizeNo;
            uiModel.addAttribute("cargoes", Cargo.findCargoesByConceptoCobroAndTorneo(conceptoCobro, torneo, sortFieldName, sortOrder).setFirstResult(firstResult).setMaxResults(sizeNo).getResultList());
            float nrOfPages = (float) Cargo.countFindCargoesByConceptoCobroAndTorneo(conceptoCobro, torneo) / sizeNo;
            uiModel.addAttribute("maxPages", (int) ((nrOfPages > (int) nrOfPages || nrOfPages == 0.0) ? nrOfPages + 1 : nrOfPages));
        } else {
            uiModel.addAttribute("cargoes", Cargo.findCargoesByConceptoCobroAndTorneo(conceptoCobro, torneo, sortFieldName, sortOrder).getResultList());
        }
        addDateTimeFormatPatterns(uiModel);
        return "cargoes/list";
    }
    
    @RequestMapping(params = { "find=ByConceptoCobroAndTorneoAndEquipo", "form" }, method = RequestMethod.GET)
    public String CargoController.findCargoesByConceptoCobroAndTorneoAndEquipoForm(Model uiModel) {
        uiModel.addAttribute("conceptocobroes", ConceptoCobro.findAllConceptoCobroes());
        uiModel.addAttribute("torneos", Torneo.findAllTorneos());
        uiModel.addAttribute("equipoes", Equipo.findAllEquipoes());
        return "cargoes/findCargoesByConceptoCobroAndTorneoAndEquipo";
    }
    
    @RequestMapping(params = "find=ByConceptoCobroAndTorneoAndEquipo", method = RequestMethod.GET)
    public String CargoController.findCargoesByConceptoCobroAndTorneoAndEquipo(@RequestParam("conceptoCobro") ConceptoCobro conceptoCobro, @RequestParam("torneo") Torneo torneo, @RequestParam("equipo") Equipo equipo, @RequestParam(value = "page", required = false) Integer page, @RequestParam(value = "size", required = false) Integer size, @RequestParam(value = "sortFieldName", required = false) String sortFieldName, @RequestParam(value = "sortOrder", required = false) String sortOrder, Model uiModel) {
        if (page != null || size != null) {
            int sizeNo = size == null ? 10 : size.intValue();
            final int firstResult = page == null ? 0 : (page.intValue() - 1) * sizeNo;
            uiModel.addAttribute("cargoes", Cargo.findCargoesByConceptoCobroAndTorneoAndEquipo(conceptoCobro, torneo, equipo, sortFieldName, sortOrder).setFirstResult(firstResult).setMaxResults(sizeNo).getResultList());
            float nrOfPages = (float) Cargo.countFindCargoesByConceptoCobroAndTorneoAndEquipo(conceptoCobro, torneo, equipo) / sizeNo;
            uiModel.addAttribute("maxPages", (int) ((nrOfPages > (int) nrOfPages || nrOfPages == 0.0) ? nrOfPages + 1 : nrOfPages));
        } else {
            uiModel.addAttribute("cargoes", Cargo.findCargoesByConceptoCobroAndTorneoAndEquipo(conceptoCobro, torneo, equipo, sortFieldName, sortOrder).getResultList());
        }
        addDateTimeFormatPatterns(uiModel);
        return "cargoes/list";
    }
    
    @RequestMapping(params = { "find=ByConceptoCobroAndTorneoAndEquipoAndFechaModificacionBetween", "form" }, method = RequestMethod.GET)
    public String CargoController.findCargoesByConceptoCobroAndTorneoAndEquipoAndFechaModificacionBetweenForm(Model uiModel) {
        uiModel.addAttribute("conceptocobroes", ConceptoCobro.findAllConceptoCobroes());
        uiModel.addAttribute("torneos", Torneo.findAllTorneos());
        uiModel.addAttribute("equipoes", Equipo.findAllEquipoes());
        addDateTimeFormatPatterns(uiModel);
        return "cargoes/findCargoesByConceptoCobroAndTorneoAndEquipoAndFechaModificacionBetween";
    }
    
    @RequestMapping(params = "find=ByConceptoCobroAndTorneoAndEquipoAndFechaModificacionBetween", method = RequestMethod.GET)
    public String CargoController.findCargoesByConceptoCobroAndTorneoAndEquipoAndFechaModificacionBetween(@RequestParam("conceptoCobro") ConceptoCobro conceptoCobro, @RequestParam("torneo") Torneo torneo, @RequestParam("equipo") Equipo equipo, @RequestParam("minFechaModificacion") @DateTimeFormat(style = "M-") Date minFechaModificacion, @RequestParam("maxFechaModificacion") @DateTimeFormat(style = "M-") Date maxFechaModificacion, @RequestParam(value = "page", required = false) Integer page, @RequestParam(value = "size", required = false) Integer size, @RequestParam(value = "sortFieldName", required = false) String sortFieldName, @RequestParam(value = "sortOrder", required = false) String sortOrder, Model uiModel) {
        if (page != null || size != null) {
            int sizeNo = size == null ? 10 : size.intValue();
            final int firstResult = page == null ? 0 : (page.intValue() - 1) * sizeNo;
            uiModel.addAttribute("cargoes", Cargo.findCargoesByConceptoCobroAndTorneoAndEquipoAndFechaModificacionBetween(conceptoCobro, torneo, equipo, minFechaModificacion, maxFechaModificacion, sortFieldName, sortOrder).setFirstResult(firstResult).setMaxResults(sizeNo).getResultList());
            float nrOfPages = (float) Cargo.countFindCargoesByConceptoCobroAndTorneoAndEquipoAndFechaModificacionBetween(conceptoCobro, torneo, equipo, minFechaModificacion, maxFechaModificacion) / sizeNo;
            uiModel.addAttribute("maxPages", (int) ((nrOfPages > (int) nrOfPages || nrOfPages == 0.0) ? nrOfPages + 1 : nrOfPages));
        } else {
            uiModel.addAttribute("cargoes", Cargo.findCargoesByConceptoCobroAndTorneoAndEquipoAndFechaModificacionBetween(conceptoCobro, torneo, equipo, minFechaModificacion, maxFechaModificacion, sortFieldName, sortOrder).getResultList());
        }
        addDateTimeFormatPatterns(uiModel);
        return "cargoes/list";
    }
    
    @RequestMapping(params = { "find=ByConceptoCobroAndTorneoAndFechaModificacionBetween", "form" }, method = RequestMethod.GET)
    public String CargoController.findCargoesByConceptoCobroAndTorneoAndFechaModificacionBetweenForm(Model uiModel) {
        uiModel.addAttribute("conceptocobroes", ConceptoCobro.findAllConceptoCobroes());
        uiModel.addAttribute("torneos", Torneo.findAllTorneos());
        addDateTimeFormatPatterns(uiModel);
        return "cargoes/findCargoesByConceptoCobroAndTorneoAndFechaModificacionBetween";
    }
    
    @RequestMapping(params = "find=ByConceptoCobroAndTorneoAndFechaModificacionBetween", method = RequestMethod.GET)
    public String CargoController.findCargoesByConceptoCobroAndTorneoAndFechaModificacionBetween(@RequestParam("conceptoCobro") ConceptoCobro conceptoCobro, @RequestParam("torneo") Torneo torneo, @RequestParam("minFechaModificacion") @DateTimeFormat(style = "M-") Date minFechaModificacion, @RequestParam("maxFechaModificacion") @DateTimeFormat(style = "M-") Date maxFechaModificacion, @RequestParam(value = "page", required = false) Integer page, @RequestParam(value = "size", required = false) Integer size, @RequestParam(value = "sortFieldName", required = false) String sortFieldName, @RequestParam(value = "sortOrder", required = false) String sortOrder, Model uiModel) {
        if (page != null || size != null) {
            int sizeNo = size == null ? 10 : size.intValue();
            final int firstResult = page == null ? 0 : (page.intValue() - 1) * sizeNo;
            uiModel.addAttribute("cargoes", Cargo.findCargoesByConceptoCobroAndTorneoAndFechaModificacionBetween(conceptoCobro, torneo, minFechaModificacion, maxFechaModificacion, sortFieldName, sortOrder).setFirstResult(firstResult).setMaxResults(sizeNo).getResultList());
            float nrOfPages = (float) Cargo.countFindCargoesByConceptoCobroAndTorneoAndFechaModificacionBetween(conceptoCobro, torneo, minFechaModificacion, maxFechaModificacion) / sizeNo;
            uiModel.addAttribute("maxPages", (int) ((nrOfPages > (int) nrOfPages || nrOfPages == 0.0) ? nrOfPages + 1 : nrOfPages));
        } else {
            uiModel.addAttribute("cargoes", Cargo.findCargoesByConceptoCobroAndTorneoAndFechaModificacionBetween(conceptoCobro, torneo, minFechaModificacion, maxFechaModificacion, sortFieldName, sortOrder).getResultList());
        }
        addDateTimeFormatPatterns(uiModel);
        return "cargoes/list";
    }
    
}
